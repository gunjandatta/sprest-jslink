// Generated by dts-bundle v0.7.3

declare module 'gd-sprest' {
    /***************************************************************************************************
    MIT License
    
    Copyright (c) 2016 Dattabase, LLC.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
     ***************************************************************************************************/
    import * as Helper from "gd-sprest/helper";
    import { SPTypes } from "gd-sprest/mapper";
    import * as Types from "gd-sprest/types";
    export * from "gd-sprest/lib";
    export * from "gd-sprest/rest";
    export { Helper, SPTypes, Types };
}

declare module 'gd-sprest/helper' {
    export * from "gd-sprest/helper/app";
    export * from "gd-sprest/helper/dependencies";
    export * from "gd-sprest/helper/fieldSchemaXML";
    export * from "gd-sprest/helper/jslink";
    export * from "gd-sprest/helper/listForm";
    export * from "gd-sprest/helper/listFormField";
    export * from "gd-sprest/helper/loader";
    export * from "gd-sprest/helper/parse";
    export * from "gd-sprest/helper/ribbonLink";
    export * from "gd-sprest/helper/sbLink";
    export * from "gd-sprest/helper/spCfg";
    export * from "gd-sprest/helper/taxonomy";
    export * from "gd-sprest/helper/webpart";
    import * as SP from "gd-sprest/helper/sp";
    export { SP };
    import * as Types from "gd-sprest/helper/types";
    export { Types };
}

declare module 'gd-sprest/mapper' {
    import * as Mapper from "gd-sprest/mapper/mapper";
    import * as SPTypes from "gd-sprest/mapper/sptypes";
    import * as Types from "gd-sprest/mapper/types";
    export { Mapper, SPTypes, Types };
}

declare module 'gd-sprest/types' {
    import { Types as HelperTypes } from "gd-sprest/helper";
    import { Types } from "gd-sprest/mapper";
    import { Types as UtilTypes } from "gd-sprest/utils";
    export { HelperTypes as Helper, Types as SP, UtilTypes as Util };
}

declare module 'gd-sprest/lib' {
    export * from "gd-sprest/lib/contextInfo";
    export * from "gd-sprest/lib/list";
    export * from "gd-sprest/lib/navigation";
    export * from "gd-sprest/lib/peopleManager";
    export * from "gd-sprest/lib/peoplePicker";
    export * from "gd-sprest/lib/profileLoader";
    export * from "gd-sprest/lib/search";
    export * from "gd-sprest/lib/site";
    export * from "gd-sprest/lib/socialFeed";
    export * from "gd-sprest/lib/userProfile";
    export * from "gd-sprest/lib/utility";
    export * from "gd-sprest/lib/web";
    import * as Types from "gd-sprest/lib/types";
    export { Types };
}

declare module 'gd-sprest/rest' {
    import * as Helper from "gd-sprest/helper";
    import * as Lib from "gd-sprest/lib";
    import * as Mapper from "gd-sprest/mapper";
    import * as Util from "gd-sprest/utils";
    /**
        * SharePoint REST Library
        */
    export interface IREST {
            /**
                * The version number of the library.
                */
            __ver: number;
            /**
                * A reference to the _spPageContextInfo global variable.
                */
            ContextInfo: Lib.Types.IContextInformation;
            /**
                * False by default.
                */
            DefaultRequestToHostFl: boolean;
            /**
                * Helper methods.
                */
            Helper: {
                    /**
                        * Helper classes for the app web
                        */
                    App: Helper.Types.IApp;
                    /**
                        * Helper class to load the required SP scripts
                        */
                    Dependencies: Helper.Types.IDependencies;
                    /**
                        * Helper class for generating a field schema xml
                        */
                    FieldSchemaXML: Helper.Types.IFieldSchemaXML;
                    /**
                        * Helper class for implementing JSLink solutions
                        */
                    JSLink: Helper.Types.IJSLink;
                    /**
                        * Helper class for implementing custom list forms
                        */
                    ListForm: Helper.Types.IListForm;
                    /**
                        * Helper class for implementing custom list forms
                        */
                    ListFormField: Helper.Types.IListFormField;
                    /**
                        * Helper class for waiting until the core SP scripts are loaded
                        */
                    Loader: Helper.Types.ILoader;
                    /**
                        * Helper method to convert a json string to a base object
                        * This will require you to use the stringify method of the base object.
                        */
                    parse: (jsonString: string) => Util.Base;
                    /**
                        * Helper class for adding links to the top ribbon bar
                        */
                    RibbonLink: Helper.Types.IRibbonLink;
                    /**
                        * SharePoint Core Library Reference
                        */
                    SP: {
                            /** Modal Dialog */
                            ModalDialog: Helper.Types.IModalDialog;
                            /** Notify */
                            Notify: Helper.Types.INotify;
                            /** Status */
                            Status: Helper.Types.IStatus;
                    };
                    /**
                        * Helper class for automating SharePoint assets
                        */
                    SPConfig: Helper.Types.ISPConfig;
                    /**
                        * Helper class for adding links to the suite bar
                        */
                    SuiteBarLink: Helper.Types.ISuiteBarLink;
                    /**
                        * Helper class for getting information from the taxonomy term store
                        */
                    Taxonomy: Helper.Types.ITaxonomy;
                    /**
                        * Helper class for creating modern webparts in SharePoint 2013+ environments
                        */
                    WebPart: Helper.Types.IWebPart;
            };
            /**
                * Use this api to interact with SharePoint lists and libraries.
                * @param listName - The name of the list.
                * @param targetInfo - (Optional) The target information.
                */
            List: (listName: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IList;
            /**
                * Use this api to interact with SharePoint navigation.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            Navigation: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.INavigationServiceREST;
            /**
                * Use this api to interact with SharePoint user profiles.
                * @param targetInfo - (Optional) The target information.
                */
            PeopleManager: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IPeopleManager;
            /**
                * Use this api to search for users.
                * @param settings - The search settings.
                */
            PeoplePicker: (settings?: Util.Types.ITargetInfo) => Mapper.Types.IPeoplePicker;
            /**
                * Use this api to interact with the user profile loader.
                * @param targetInfo - (Optional) The target information.
                */
            ProfileLoader: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IProfileLoader;
            /**
                * Use this api to interact with the SharePoint search service.
                * @param url - The optional url to execute the search against.
                * @param settings - The search settings.
                */
            Search: (url?: string, settings?: Util.Types.ITargetInfo) => Mapper.Types.ISearch;
            /**
                * The SharePoint enumerator Mapper.Types.
                */
            SPTypes: any;
            /**
                * Use this api to interact with a SharePoint site collection.
                * @param url - (Optional) The site url.
                * @param targetInfo - (Optional) The target information.
                */
            Site: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.ISite;
            /**
                * Use this api to interact with the current user's social profile.
                */
            SocialFeed: Mapper.Types.ISocialFeed;
            /**
                * Use this api to interact with the current user's profile.
                * @param targetInfo - (Optional) The target information.
                */
            UserProfile: (targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IUserProfile;
            /**
                * The utility api
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            Utility: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IUtility;
            /**
                * Use this api to interact with a SharePoint web.
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            Web: (url?: string, targetInfo?: Util.Types.ITargetInfo) => Mapper.Types.IWeb;
    }
    /**
        * SharePoint REST Library
        */
    export const $REST: IREST;
}

declare module 'gd-sprest/helper/app' {
    import { IApp } from "gd-sprest/helper/types";
    /**
      * App Helper Methods
      * Helper methods designed to be run from the app web.
      */
    export const App: IApp;
}

declare module 'gd-sprest/helper/dependencies' {
    import { IDependencies } from "gd-sprest/helper/types";
    export const Dependencies: IDependencies;
}

declare module 'gd-sprest/helper/fieldSchemaXML' {
    import { IFieldInfo } from "gd-sprest/helper/types";
    /**
      * Field Schema XML
      * Helper class for generating the field schema xml
      */
    export const FieldSchemaXML: (fieldInfo: IFieldInfo) => PromiseLike<string>;
}

declare module 'gd-sprest/helper/jslink' {
    import { IJSLink } from "gd-sprest/helper/types";
    /**
      * JSLink Helper Methods
      */
    export const JSLink: IJSLink;
}

declare module 'gd-sprest/helper/listForm' {
    import { IListForm } from "gd-sprest/helper/types";
    /**
      * List Form
      */
    export const ListForm: IListForm;
}

declare module 'gd-sprest/helper/listFormField' {
    import { IListFormField } from "gd-sprest/helper/types";
    /**
      * List Form Field
      */
    export const ListFormField: IListFormField;
}

declare module 'gd-sprest/helper/loader' {
    import { ILoader } from "gd-sprest/helper/types";
    /**
      * Loader
      */
    export const Loader: ILoader;
}

declare module 'gd-sprest/helper/parse' {
    import { Base } from "gd-sprest/utils";
    /**
      * Convert a JSON string to a base object
      */
    export const parse: <T = Base<any, any, any>>(jsonString: string) => T;
}

declare module 'gd-sprest/helper/ribbonLink' {
    import { ILinkInfo } from "gd-sprest/helper/types";
    /**
      * Ribbon Link
      */
    export const RibbonLink: (props: ILinkInfo) => HTMLAnchorElement;
}

declare module 'gd-sprest/helper/sbLink' {
    import { ILinkInfo } from "gd-sprest/helper/types";
    /**
      * Suite Bar Link
      */
    export const SuiteBarLink: (props: ILinkInfo) => HTMLAnchorElement;
}

declare module 'gd-sprest/helper/spCfg' {
    export * from "gd-sprest/helper/spCfgTypes";
    import { Types as SPCfgTypes } from "gd-sprest/helper";
    export const SPConfig: SPCfgTypes.ISPConfig;
}

declare module 'gd-sprest/helper/taxonomy' {
    import * as TaxonomyTypes from "gd-sprest/helper/types";
    /**
      * Taxonomy Helper Class
      */
    export const Taxonomy: TaxonomyTypes.ITaxonomy;
}

declare module 'gd-sprest/helper/webpart' {
    import * as WebPartTypes from "gd-sprest/helper/types";
    export const WebPart: WebPartTypes.IWebPart;
}

declare module 'gd-sprest/helper/sp' {
    import { IModalDialog, INotify, IStatus } from "gd-sprest/helper/types";
    /**
        * Modal Dialog
        */
    export const ModalDialog: IModalDialog;
    /**
        * Notification
        */
    export const Notify: INotify;
    /**
        * Status
        */
    export const Status: IStatus;
}

declare module 'gd-sprest/helper/types' {
    export * from "gd-sprest/helper/types/app";
    export * from "gd-sprest/helper/types/dependencies";
    export * from "gd-sprest/helper/types/fieldSchemaXML";
    export * from "gd-sprest/helper/types/jslink";
    export * from "gd-sprest/helper/types/linkInfo";
    export * from "gd-sprest/helper/types/listForm";
    export * from "gd-sprest/helper/types/listFormField";
    export * from "gd-sprest/helper/types/loader";
    export * from "gd-sprest/helper/types/sp";
    export * from "gd-sprest/helper/types/spCfg";
    export * from "gd-sprest/helper/types/spCfgTypes";
    export * from "gd-sprest/helper/types/taxonomy";
    export * from "gd-sprest/helper/types/webpart";
}

declare module 'gd-sprest/mapper/mapper' {
    export * from "gd-sprest/mapper/audit";
    export * from "gd-sprest/mapper/eventReceiver";
    export * from "gd-sprest/mapper/file";
    export * from "gd-sprest/mapper/list";
    export * from "gd-sprest/mapper/navigation";
    export * from "gd-sprest/mapper/propertyValues";
    export * from "gd-sprest/mapper/search";
    export * from "gd-sprest/mapper/security";
    export * from "gd-sprest/mapper/site";
    export * from "gd-sprest/mapper/social";
    export * from "gd-sprest/mapper/user";
    export * from "gd-sprest/mapper/userCustomAction";
}

declare module 'gd-sprest/mapper/sptypes' {
    import { SPTypes } from "gd-sprest/mapper/types";
    /**
        * Calendar Types
        */
    export const CalendarTypes: SPTypes.ICalendarType;
    /**
        * Check Out Types
        */
    export const CheckOutType: SPTypes.ICheckOutType;
    /**
        * Choice Format Types
        */
    export const ChoiceFormatType: SPTypes.IChoiceFormatType;
    /**
        * Client Template Utility
        */
    export const ClientTemplatesUtility: SPTypes.IClientTemplateUtility;
    /**
        * Control Modes
        */
    export const ControlMode: SPTypes.IControlMode;
    /**
        * Date Format
        */
    export const DateFormat: SPTypes.IDateFormat;
    /**
        * Draft Visibility Types
        */
    export const DraftVisibilityType: SPTypes.IDraftVisibilityType;
    /**
        * Event Receiver Synchronization Types
        */
    export const EventReceiverSynchronizationType: SPTypes.IEventReceiverSynchronizationType;
    /**
        * Event Receiver Types
        */
    export const EventReceiverType: SPTypes.IEventReceiverType;
    /**
        * Field Note Types
        */
    export const FieldNoteType: SPTypes.IFieldNoteType;
    /**
        * Field Number Type
        */
    export const FieldNumberType: SPTypes.IFieldNumberType;
    /**
        * Field Result Types
        */
    export const FieldResultType: SPTypes.IFieldResultType;
    /**
        * Field Types
        */
    export const FieldType: SPTypes.IFieldType;
    /**
        * Field User Selection Types
        */
    export const FieldUserSelectionType: SPTypes.IFieldUserSelectionType;
    /**
        * File Template Types
     */
    export const FileTemplateType: SPTypes.IFileTemplateType;
    /**
        * Friendly Date Format
        */
    export const FriendlyDateFormat: SPTypes.IFriendlyDateFormat;
    /**
        * List Template Types
     */
    export const ListTemplateType: SPTypes.IListTemplateType;
    /**
        * Locale LCID Types
        */
    export const LocaleLCIDType: SPTypes.ILocaleLCIDType;
    /**
        * Node Types - Need to get this info. Documentation not found online. Ref the MS Publishing DLL and decompile to find the type info.
        */
    export type NodeType = {
            /** Specifies no node SPTypes.I */
            None: 0;
            /** Specifies any type of SPWeb site. */
            Area: 0;
            /** Specifies a List item in the Pages list. */
            Page: 0;
            /** Specifies a Microsoft SharePoint Foundation list (SPList). */
            List: 0;
            /** Specifies a Microsoft SharePoint Foundation list item (SPListItem). */
            ListItem: 0;
            /** Specifies a CMS Page Layout. */
            PageLayout: 0;
            /**  Specifies a navigation heading. */
            Heading: 0;
            /** Specifies an authored link that references a page. */
            AuthoredLinkToPage: 0;
            /** Specifies an authored link that references a Web site or area. */
            AuthoredLinkToWeb: 0;
            /** Specifies a generic authored link. */
            AuthoredLinkPlain: 0;
            /** Specifies a custom node type that may be useful for extensibility purposes. */
            Custom: 0;
            /** Represents an error specific to node SPTypes.I */
            Error: 0;
            /** Specifies any type of authored link. */
            AuthoredLink: 0;
            /** Specifies a combination of Area, Page, Heading and AuthoredLink. Navigation uses this value to determine which node types to return by default. */
            Default: 0;
            /** Specifies all node types, including Area, Page, List, ListItem, PageLayout, Heading, AuthoredLink, and Custom. */
            All: 0;
    };
    /**
        * Page Types
        */
    export const PageType: SPTypes.IPageType;
    /**
        * Personal Site Capabilities
        */
    export const PersonalSiteCapabilities: SPTypes.IPersonalSiteCapabilities;
    /**
        * Principal Sources
        */
    export const PrincipalSources: SPTypes.IPrincipalSources;
    /**
        * Principal Types
        */
    export const PrincipalTypes: SPTypes.IPrincipalTypes;
    /**
        * Relationship Delete Behavior Types
        */
    export const RelationshipDeleteBehaviorType: SPTypes.IRelationshipDeleteBehaviorType;
    /**
        * Reordering Rule Match Types
        */
    export const ReorderingRuleMatchType: SPTypes.IReorderingRuleMatchType;
    /**
        * Role Types
        */
    export const RoleType: SPTypes.IRoleType;
    /**
        * Status Pri Color
        */
    export const StatusPriColor: SPTypes.IStatusPriColor;
    /**
        * URL Format Types
        */
    export const UrlFormatType: SPTypes.IUrlFormatType;
    /**
        * URL Zones
        */
    export const URLZones: SPTypes.IURLZones;
    /**
        * User Custom Action Registration Types
        */
    export const UserCustomActionRegistrationType: SPTypes.IUserCustomActionRegistrationType;
    /**
        * View Types
        */
    export const ViewType: SPTypes.IViewType;
}

declare module 'gd-sprest/mapper/types' {
    export * from "gd-sprest/mapper/types/attachment";
    export * from "gd-sprest/mapper/types/attachments";
    export * from "gd-sprest/mapper/types/audit";
    import * as ComplexTypes from "gd-sprest/mapper/types/complexTypes";
    export * from "gd-sprest/mapper/types/contentType";
    export * from "gd-sprest/mapper/types/contentTypes";
    export * from "gd-sprest/mapper/types/eventReceiver";
    export * from "gd-sprest/mapper/types/eventReceivers";
    export * from "gd-sprest/mapper/types/field";
    export * from "gd-sprest/mapper/types/fieldLink";
    export * from "gd-sprest/mapper/types/fieldLinks";
    export * from "gd-sprest/mapper/types/fields";
    export * from "gd-sprest/mapper/types/file";
    export * from "gd-sprest/mapper/types/files";
    export * from "gd-sprest/mapper/types/fileVersion";
    export * from "gd-sprest/mapper/types/fileVersions";
    export * from "gd-sprest/mapper/types/folder";
    export * from "gd-sprest/mapper/types/folders";
    export * from "gd-sprest/mapper/types/group";
    export * from "gd-sprest/mapper/types/groups";
    export * from "gd-sprest/mapper/types/items";
    export * from "gd-sprest/mapper/types/limitedWebPartManager";
    export * from "gd-sprest/mapper/types/list";
    export * from "gd-sprest/mapper/types/listItem";
    export * from "gd-sprest/mapper/types/lists";
    export * from "gd-sprest/mapper/types/navigation";
    export * from "gd-sprest/mapper/types/peopleManager";
    export * from "gd-sprest/mapper/types/peoplePicker";
    export * from "gd-sprest/mapper/types/profileLoader";
    export * from "gd-sprest/mapper/types/propertyValues";
    import * as Results from "gd-sprest/mapper/types/results";
    export * from "gd-sprest/mapper/types/roleAssignment";
    export * from "gd-sprest/mapper/types/roleAssignments";
    export * from "gd-sprest/mapper/types/roleDefinition";
    export * from "gd-sprest/mapper/types/roleDefinitions";
    export * from "gd-sprest/mapper/types/search";
    export * from "gd-sprest/mapper/types/site";
    export * from "gd-sprest/mapper/types/socialFeed";
    import * as SPTypes from "gd-sprest/mapper/types/sptypes";
    export * from "gd-sprest/mapper/types/tenantApp";
    export * from "gd-sprest/mapper/types/tenantAppCatalog";
    export * from "gd-sprest/mapper/types/tenantApps";
    export * from "gd-sprest/mapper/types/types";
    export * from "gd-sprest/mapper/types/user";
    export * from "gd-sprest/mapper/types/userCustomAction";
    export * from "gd-sprest/mapper/types/userCustomActions";
    export * from "gd-sprest/mapper/types/userProfile";
    export * from "gd-sprest/mapper/types/users";
    export * from "gd-sprest/mapper/types/utility";
    export * from "gd-sprest/mapper/types/version";
    export * from "gd-sprest/mapper/types/versions";
    export * from "gd-sprest/mapper/types/view";
    export * from "gd-sprest/mapper/types/viewFieldCollection";
    export * from "gd-sprest/mapper/types/views";
    export * from "gd-sprest/mapper/types/web";
    export * from "gd-sprest/mapper/types/webs";
    export { ComplexTypes, Results, SPTypes };
}

declare module 'gd-sprest/utils' {
    export * from "gd-sprest/utils/requestType";
    export * from "gd-sprest/utils/baseHelper";
    export * from "gd-sprest/utils/baseRequest";
    export * from "gd-sprest/utils/baseExecution";
    export * from "gd-sprest/utils/base";
    export * from "gd-sprest/utils/batch";
    export * from "gd-sprest/utils/methodInfo";
    export * from "gd-sprest/utils/oData";
    export * from "gd-sprest/utils/targetInfo";
    export * from "gd-sprest/utils/xhrRequest";
    import * as Types from "gd-sprest/utils/types";
    export { Types };
}

declare module 'gd-sprest/lib/contextInfo' {
    import { IContextInformation } from "gd-sprest/lib/types";
    export const ContextInfo: IContextInformation;
}

declare module 'gd-sprest/lib/list' {
    import { Types } from "gd-sprest/";
    export const List: Types.SP.IList;
}

declare module 'gd-sprest/lib/navigation' {
    import { INavigationServiceREST } from "gd-sprest/mapper/types";
    export const Navigation: INavigationServiceREST;
}

declare module 'gd-sprest/lib/peopleManager' {
    import { Types } from "gd-sprest/";
    export const PeopleManager: Types.SP.IPeopleManager;
}

declare module 'gd-sprest/lib/peoplePicker' {
    import { Types } from "gd-sprest/";
    export const PeoplePicker: Types.SP.IPeoplePicker;
}

declare module 'gd-sprest/lib/profileLoader' {
    import { Types } from "gd-sprest/";
    export const ProfileLoader: Types.SP.IProfileLoader;
}

declare module 'gd-sprest/lib/search' {
    import { Types } from "gd-sprest/";
    export const Search: Types.SP.ISearch;
}

declare module 'gd-sprest/lib/site' {
    import { Types } from "gd-sprest/";
    export const Site: Types.SP.ISite;
}

declare module 'gd-sprest/lib/socialFeed' {
    import { Types } from "gd-sprest/";
    export const SocialFeed: Types.SP.ISocialFeed;
}

declare module 'gd-sprest/lib/userProfile' {
    import { Types } from "gd-sprest/";
    export const UserProfile: Types.SP.IUserProfile;
}

declare module 'gd-sprest/lib/utility' {
    import { Types } from "gd-sprest/";
    export const Utility: Types.SP.IUtility;
}

declare module 'gd-sprest/lib/web' {
    import { Types } from "gd-sprest/";
    export const Web: Types.SP.IWeb;
}

declare module 'gd-sprest/lib/types' {
    export * from "gd-sprest/lib/types/contextInfo";
}

declare module 'gd-sprest/helper/spCfgTypes' {
    import { ISPCfgFieldType, ISPCfgType } from "gd-sprest/helper/types";
    /**
        * SharePoint Configuration Field Types
        */
    export const SPCfgFieldType: ISPCfgFieldType;
    /**
        * SharePoint Configuration Types
        * The value determines the order to install the object type.
        */
    export const SPCfgType: ISPCfgType;
}

declare module 'gd-sprest/helper/types/app' {
    import { Types } from "gd-sprest/";
    /**
        * App Helper Methods
        */
    export interface IApp {
            /**
                * Method to copy a file from the app web to the host web.
                * @param srcFileUrl - The source file url, relative to the app web.
                * @param dstFolder - The destination folder.
                * @param overwriteFl - Flag to overwrite the file in the destination folder, if it already exists. This value is falst by default.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFileToHostWeb(srcFileUrl: string, dstFolder: Types.SP.IFolderResult, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
                    file: Types.SP.IFileResult;
                    folder: Types.SP.IFolderResult;
            }>;
            /**
                * Method to copy a file from the app web to the host web.
                * @param srcFileUrl - The source file url, relative to the app web.
                * @param dstFolderUrl - The destination folder url, relative to the host web.
                * @param overwriteFl - Flag to overwrite the file in the destination folder, if it already exists. This value is falst by default.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFileToHostWeb(srcFileUrl: string, dstFolderUrl: string, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
                    file: Types.SP.IFileResult;
                    folder: Types.SP.IFolderResult;
            }>;
            /**
                * Method to copy a file from the app web to the host web
                * @param fileUrls - An array of source file urls, relative to the app web.
                * @param folderUrls - An array of destination folder urls, relative to the host web.
                * @param rootWebFl - Flag to target the root web of the site collection, otherwise the host web.
                */
            copyFilesToHostWeb(fileUrls: Array<string>, folderUrls: Array<string>, overwriteFl?: boolean, rootWebFl?: boolean): PromiseLike<{
                    files: Array<Types.SP.IFileResult>;
                    folders: Array<Types.SP.IFolderResult>;
            }>;
            /**
                * Method to create sub-folders.
                * @param folder - The app web relative url to the source file.
                * @param subFolderUrl - The host web relative url of the destination folder.
                */
            createSubFolders(folder: Types.SP.IFolder, subFolderUrl: string): PromiseLike<Types.SP.IFolderResult>;
            /**
                * Method to get the file content.
                * @param web - The web containing the files.
                * @param fileUrls - An array of file urls, relative to the web.
                * @param createFl - Flag to create the folder, if it doesn't exist.
                */
            getFolder(web: Types.SP.IWeb | Types.SP.IWebResult, folderUrl: string, createFl?: boolean): PromiseLike<Types.SP.IFolderResult>;
            /**
                * Method to remove empty folders
                * @param web - The web containing the files.
                * @param folderUrls - An array of folder urls, relative to the web.
                */
            removeEmptyFolders(web: Types.SP.IWebResult, folderUrls: Array<string>): PromiseLike<void>;
            /**
                * Method to remove files from a web.
                * @param web - The web containing the files.
                * @param fileUrl - The file url, relative to the web.
                */
            removeFile(web: Types.SP.IWebResult, fileUrl: string): PromiseLike<void>;
            /**
                * Method to remove files from a web.
                * @param web - The web containing the files.
                * @param fileUrls - An array of file urls, relative to the web.
                */
            removeFiles(web: Types.SP.IWebResult, fileUrls: Array<string>): PromiseLike<void>;
    }
}

declare module 'gd-sprest/helper/types/dependencies' {
    /**
        * Dependencies
        */
    export interface IDependencies {
            /**
                * Constructor
                * @param callback - The method to execute after the dependencies are loaded.
                */
            constructor(callback: (...args) => void): any;
            /** The maximum amount of time to wait for the scripts to be loaded. */
            MAX_WAIT: number;
            /** Flag to determine if the page context information exists */
            pageContextExistsFl: boolean;
            /** The script file names to load. */
            SCRIPTS: Array<string>;
            /**
                * Method to ensure the SP classes are loaded
                */
            loadDependencies(): any;
            /**
                * Method to wait for the page context to be loaded
                */
            waitForPageContext(): any;
    }
}

declare module 'gd-sprest/helper/types/fieldSchemaXML' {
    import { IFieldInfo } from "gd-sprest/helper/types";
    /**
      * Field Schema XML
      */
    export interface IFieldSchemaXML {
        /** Creates the suitebar link */
        new (fieldInfo: IFieldInfo): PromiseLike<string>;
    }
}

declare module 'gd-sprest/helper/types/jslink' {
    /**
        * JSLink
        */
    export interface IJSLink {
            /**
                * Internal field to method mapper
                */
            _fieldToMethodMapper: any;
            /**
                * Internal field used by the hideField method.
                */
            _hideEventFl: boolean;
            /**
                * Disables edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                * @param requireValueFl - Flag to only disable the field, if a value exists.
                */
            disableEdit(ctx: any, field: any, requireValueFl?: boolean): string;
            /**
                * Disable quick edit for the specified field.
                * @param ctx - The client context.
                * @param field - The field to disable edit.
                */
            disableQuickEdit(ctx: any, field: any): any;
            /**
                * Returns the list view.
                * @param ctx - The client context.
                */
            getListView(ctx: any): any;
            /**
                * Returns the list view items.
                * @param ctx - The client context.
                */
            getListViewItems(ctx: any): any;
            /**
                * Returns the selected list view items
                */
            getListViewSelectedItems(): any;
            /**
                * Returns the webpart containing the JSLink field/form/view.
                * @param ctx - The client context.
                */
            getWebPart(ctx: any): any;
            /**
                * Hides the specified field.
                * @param ctx - The client context.
                * @param field - The field to hide.
                */
            hideField(ctx: any, field: any): any;
            /**
                * Registers the JSLink configuration.
                * @param cfg - The JSLink configuration.
                */
            register(cfg: IJSLinkCfg): any;
            /**
                * Removes the field and html from the page.
                * @param ctx - The client context.
                * @param field - The field to remove.
                */
            removeField(ctx: any, field: any): any;
            /**
                * Method to render the default html for a field.
                * @param ctx - The client context.
                * @param field - The form field.
                * @param formType - The form type. (Display, Edit, New or View)
                */
            renderField(ctx: any, field: any, formType?: number): any;
    }
    /**
        * JSLink Configuration
        */
    export interface IJSLinkCfg {
            /** The base view id. */
            BaseViewID?: number | string;
            /** The list template type. */
            ListTemplateType?: number;
            /** The post render event. */
            OnPostRender?: any;
            /** The pre render event. */
            OnPreRender?: any;
            /** The JSLink template overrides. */
            Templates?: IJSLinkCfgTemplate;
    }
    /**
        * JSLink Field Configuration
        */
    export interface IJSLinkCfgField {
            DisplayForm?: any;
            EditForm?: any;
            NewForm?: any;
            View?: any;
    }
    /**
        * JSLink Templates
        */
    export interface IJSLinkCfgTemplate {
            Body?: any;
            Footer?: any;
            Fields?: {
                    [key: string]: IJSLinkCfgField;
            };
            Group?: any;
            Header?: any;
            Item?: any;
            OnPostRender?: any;
            OnPreRender?: any;
    }
}

declare module 'gd-sprest/helper/types/linkInfo' {
    /**
        * Link Information
        */
    export interface ILinkInfo {
            /** True to append the link at the end of the list. */
            appendFl?: boolean;
            /** The link class name */
            className?: string;
            /** The link url */
            href?: string;
            /** The link id */
            id: string;
            /** The link click event */
            onClick?: (link?: HTMLElement, ev?: MouseEvent) => void;
            /** The link title */
            title: string;
    }
    /**
        * Ribbon Link
        */
    export interface IRibbonLink {
            /** Creates the ribbon link */
            new (props: ILinkInfo): HTMLAnchorElement;
    }
    /**
        * Suitebar Link
        */
    export interface ISuiteBarLink {
            /** Creates the suitebar link */
            new (props: ILinkInfo): HTMLAnchorElement;
    }
}

declare module 'gd-sprest/helper/types/listForm' {
    import { Types } from "gd-sprest/mapper";
    /**
        * List Form
        */
    export interface IListForm {
            /**
                * Creates an instance of the list form
                * @param props - The list form properties.
                */
            create(props: IListFormProps): PromiseLike<IListFormResult>;
            /**
                * Method to generate the odata query for the list item.
                */
            generateODataQuery(info: IListFormResult, loadAttachments?: boolean): Types.ODataQuery;
            /**
                * Method to load the item attachments
                * @param info - The list form information.
             */
            loadAttachments(info: IListFormProps): PromiseLike<Array<Types.IAttachment>>;
            /**
                * Method to refresh the item.
                * @param info - The list form information.
                */
            refreshItem(info: IListFormResult): PromiseLike<IListFormResult>;
            /**
                * Method to remove attachment from an item.
                */
            removeAttachment(info: IListFormResult, fileName: string): PromiseLike<IListFormResult>;
            /**
                * Method to save attachments to the item.
                * @param info - The list form information.
                * @param attachmentInfo - The attachment files to add.
                */
            saveAttachments(info: IListFormProps, attachmentInfo: Array<IListFormAttachmentInfo>): PromiseLike<Array<Types.IAttachment>>;
            /**
                * Method to save the item.
                * @param info - The list form information.
                * @param itemValues - The list item values.
                */
            saveItem(info: IListFormResult, formValues: any): PromiseLike<IListFormResult>;
            /**
                * Method to show the file dialog.
                * @param info - The list form information.
                */
            showFileDialog(info: IListFormResult): PromiseLike<IListFormResult>;
    }
    /**
        * List Form Attachment Information
        */
    export interface IListFormAttachmentInfo {
            /** The file content */
            data: any;
            /** The name of the file */
            name: string;
    }
    /**
        * List Form Cache
        */
    export interface IListFormCache {
            ct: string;
            fields: string;
            list: string;
    }
    /**
        * List Form Display
        */
    export interface IListFormDisplay {
            /**
                * Method to get the fields
                */
            getFields(): Array<HTMLDivElement>;
    }
    /**
        * List Form Display Properties
        */
    export interface IListFormDisplayProps {
            /** The element to render the form to. */
            el: Element;
            /** The fields to exclude from the form. */
            excludeFields?: Array<string>;
            /** The fields to include in the form. */
            includeFields?: Array<string>;
            /** The list form information. */
            info: IListFormResult;
    }
    /**
        * List Form Edit
        */
    export interface IListFormEdit {
            /**
                * Method to get the fields
                */
            getFields<T = any>(): Array<T>;
            /**
                * Method to get the form values
                */
            getValues<T = any>(): PromiseLike<T>;
    }
    /**
        * List Form Edit Properties
        */
    export interface IListFormEditProps extends IListFormDisplayProps {
            /** The form mode (New/Edit) */
            controlMode?: number;
    }
    /**
        * List Form Properties
        */
    export interface IListFormProps {
            /** If defined, the data will be cached to the session storage. */
            cacheKey?: string;
            /** The form fields to exclude. */
            excludeFields?: Array<string>;
            /** The form fields */
            fields?: Array<string>;
            /** The list item */
            item?: Types.IListItemQueryResult | Types.IListItemResult;
            /** The item id */
            itemId?: number;
            /** The list name */
            listName: string;
            /** Flag to deteremine if we are loading attachments */
            loadAttachments?: boolean;
            /** OData query used when loading an item */
            query?: Types.ODataQuery;
            /** The relative web url containing the list */
            webUrl?: string;
    }
    /**
        * List Form Result
        */
    export interface IListFormResult {
            /** The item attachments. */
            attachments?: Array<Types.IAttachment>;
            /** The form fields. */
            fields: {
                    [key: string]: Types.IFieldResult;
            };
            /** The list item. */
            item?: Types.IListItemQueryResult | Types.IListItemResult;
            /** The item query. */
            query?: Types.ODataQuery;
            /** The list. */
            list: Types.IListResult;
            /** The relative web url containing the list. */
            webUrl?: string;
    }
}

declare module 'gd-sprest/helper/types/listFormField' {
    import { Helper, Types } from "gd-sprest/";
    /**
        * List Form Field Information
        */
    export interface IListFormFieldInfo {
            /** The default value. */
            defaultValue?: any;
            /** The list field. */
            field?: Types.SP.IFieldResult | Types.SP.IFieldQueryResult;
            /** The list name. */
            listName: string;
            /** The internal name of the field. */
            name: string;
            /** Flag indicating if the field is read-only. */
            readOnly?: boolean;
            /** True indicates a required field type. */
            required?: boolean;
            /** The display name of the field. */
            title?: string;
            /** The field type. */
            type?: number;
            /** The field type as a string. */
            typeAsString?: string;
            /** The relative web url containing the list. */
            webUrl?: string;
    }
    /**
        * List Form Choice Field Information
        */
    export interface IListFormChoiceFieldInfo extends IListFormFieldInfo {
            /** The choices. */
            choices?: Array<string>;
            /** The list field. */
            field?: Types.SP.IFieldChoice | Types.SP.IFieldMultiChoice;
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    /**
        * List Form Date Field Information
        */
    export interface IListFormDateFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Types.SP.IFieldDateTime;
            /** Flag determining if we are displaying time */
            showTime?: boolean;
    }
    /**
        * List Form Lookup Field Information
        */
    export interface IListFormLookupFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Types.SP.IFieldLookup;
            /** The lookup field */
            lookupField?: string;
            /** The lookup list id */
            lookupListId?: string;
            /** The lookup web id */
            lookupWebId?: string;
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    /**
        * List Form MMS Field Information
        */
    export interface IListFormMMSFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Types.SP.IFieldManagedMetadata;
            /** Flag to determine if multiple values exist */
            multi?: boolean;
            /** The term id */
            termId?: string;
            /** The term set id */
            termSetId?: string;
            /** The term store id */
            termStoreId?: string;
            /** The value field */
            valueField?: Types.SP.IFieldNote;
    }
    /**
        * List Form Number Field Information
        */
    export interface IListFormNumberFieldInfo extends IListFormFieldInfo {
            /** The number of decimals. */
            decimals?: number;
            /** The list field. */
            field?: Types.SP.IFieldNumber | Types.SP.IFieldCurrency;
            /** The maximum value */
            maxValue?: number;
            /** The minimum value */
            minValue?: number;
            /** Flag determining if we are displaying the value as a percentage */
            showAsPercentage?: boolean;
    }
    /**
        * List Form Text Field Information
        */
    export interface IListFormTextFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Types.SP.IFieldText | Types.SP.IFieldNote;
            /** Flag determining if this is a note field */
            multiline?: boolean;
            /** Flag determining if this field value is html encoded */
            richText?: boolean;
            /** The number of rows to display */
            rows?: number;
    }
    /**
        * List Form URL Field Information
        */
    export interface IListFormUrlFieldInfo extends IListFormFieldInfo {
            /** The list field. */
            field?: Types.SP.IFieldUrl;
    }
    /**
        * List Form User Field Information
        */
    export interface IListFormUserFieldInfo extends IListFormFieldInfo {
            /** Flag to determine if groups are allowed */
            allowGroups?: boolean;
            /** The list field. */
            field?: Types.SP.IFieldUser;
            /** Flag to determine if multiple values exist */
            multi?: boolean;
    }
    /**
        * List Form Field
        */
    export interface IListFormField {
            /**
                * Creates an instance of the list form field
                * @param props - The list form field properties
                */
            create(props: IListFormFieldInfo): PromiseLike<IListFormFieldInfo>;
            /** Method to load the lookup data */
            loadLookupData(info: IListFormLookupFieldInfo, queryTop?: number): PromiseLike<Array<Types.SP.IListItemQueryResult>>;
            /** Method to load the mms data */
            loadMMSData(info: IListFormMMSFieldInfo): PromiseLike<Array<Helper.Types.ITermInfo>>;
            /** Method to load the mms value field */
            loadMMSValueField(info: IListFormMMSFieldInfo): PromiseLike<Types.SP.IFieldNote>;
    }
}

declare module 'gd-sprest/helper/types/loader' {
    /**
        * Loader
        */
    export interface ILoader {
            loaded: boolean;
            /**
                * Waits for the SharePoint core libraries to be loaded.
                * @param callback - The callback function.
                * @param timeout - The max time (ms) to wait for the libraries to be loaded.
                * @param loadLibraries - Flag to load the core libraries manually.
                */
            waitForSPLibs(callback: any, timeout?: number, loadLibraries?: boolean): any;
    }
}

declare module 'gd-sprest/helper/types/sp' {
    /**
        * Dialog Options
        */
    export interface IDialogOptions {
            /** A Boolean value that specifies whether the dialog can be maximized. true if the Maximize button is shown; otherwise, false. */
            allowMaximize?: boolean;
            /** An object that contains data that are passed to the dialog. */
            args?: any;
            /** A Boolean value that specifies whether the dialog platform handles dialog sizing. */
            autoSize?: boolean;
            /** A function pointer that specifies the return callback function. The function takes two parameters, a dialogResult of type SP.UI.DialogResult Enumeration and a returnValue of type object that contains any data returned by the dialog. */
            dialogReturnValueCallback?: (dialogResult: number, returnVal: any) => void;
            /** An integer value that specifies the height of the dialog. If height is not specified, the height of the dialog is autosized by default. If autosize is false, the dialog height is set to 576 pixels. */
            height?: number;
            /** An html element to display in the dialog. If both html and url are specified, url takes precedence. Either url or html must be specified. */
            html?: HTMLElement;
            /** A Boolean value that specifies whether the Close button appears on the dialog. */
            showClose?: boolean;
            /** A Boolean value that specifies whether the dialog opens in a maximized state. true the dialog opens maximized. Otherwise, the dialog is opened at the requested sized if specified; otherwise, the default size, if specified; otherwise, the autosized size. */
            showMaximized?: boolean;
            /** A string that contains the title of the dialog. */
            title?: string;
            /** A string that contains the URL of the page that appears in the dialog. If both url and html are specified, url takes precedence. Either url or html must be specified. */
            url?: string;
            /** An integer value that specifies the width of the dialog. If width is not specified, the width of the dialog is autosized by default. If autosize is false, the width of the dialog is set to 768 pixels. */
            width?: number;
            /** An integer value that specifies the x-offset of the dialog. This value works like the CSS left value. */
            x?: number;
            /** An integer value that specifies the y-offset of the dialog. This value works like the CSS top value. */
            y?: number;
    }
    /**
        * Modal Dialog
        */
    export interface IModalDialog {
            /**
                * Closes the most recently opened modal dialog with the specified dialog result.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                */
            close(dialogResult?: number): any;
            /**
                * Closes the most recently opened modal dialog with the specified dialog result and return value.
                * @param dialogResult - One of the enumeration values that specifies the result of the modal dialog.
                * @param returnVal - The return value of the modal dialog.
                */
            commonModalDialogClose(dialogResult?: number, returnVal?: any): any;
            /**
                * Displays a modal dialog with the specified URL, options, callback function, and arguments.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param options - The options to create the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param args - The arguments to the modal dialog.
                */
            commonModalDialogOpen(url: string, options?: IDialogOptions, callback?: (dialogResult?: number, returnVal?: any) => void, args?: any): any;
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
            /**
                * Displays a modal dialog with the specified URL, callback function, width, and height.
                * @param url - The URL of the page to be shown in the modal dialog.
                * @param callback - The callback function that runs when the modal dialog is closed.
                * @param width - The width of the modal dialog.
                * @param height - The height of the modal dialog.
                */
            OpenPopUpPage(url: string, callback?: (dialogResult?: number, returnVal?: any) => void, width?: number, height?: number): any;
            /**
                * Refreshes the parent page of the modal dialog when the dialog is closed by clicking OK.
                * @param dialogResult - The result of the modal dialog.
                */
            RefreshPage(dialogResult?: number): any;
            /**
                * Displays a modal dialog with specified dialog options.
                * @param options - The options to create the modal dialog.
                */
            showModalDialog(options: IDialogOptions): any;
            /**
                * Displays a modal dialog using the page at the specified URL.
                * @param url - The URL of the page to be shown in the modal dialog.
                */
            ShowPopupDialog(url: string): any;
            /**
                * Displays a wait screen dialog that has a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param callback - The callback function that runs when the wait screen dialog is closed.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenSize(title: string, message: string, callback: () => void, height: number, width: number): any;
            /**
                * Displays a wait screen dialog that does not have a Cancel button using the specified parameters.
                * @param title - The title of the wait screen dialog.
                * @param message - The message that is shown in the wait screen dialog.
                * @param height - The height of the wait screen dialog.
                * @param width - The width of the wait screen dialog.
                */
            showWaitScreenWithNoClose(title: string, message: string, height: number, width: number): any;
    }
    /**
        * Notify
        */
    export interface INotify {
            /**
                * Adds a notification to the page. By default, notifications appear for five seconds.
                * @param html - The message inside the notification.
                * @param sticky - Specifies whether the notification stays on the page until removed.
                * @returns A promise containing the ID of the notification that was added to the page.
                */
            addNotification(html: string, sticky?: boolean): PromiseLike<string>;
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
            /**
                * Removes the specified notification from the page.
                * @param id - The notification to remove from the page.
                */
            removeNotification(id: string): any;
    }
    /**
        * Status
        */
    export interface IStatus {
            /**
                * Adds a status message to the page.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                * @param prepend - Specifies whether the status message will appear at the beginning of the list.
                */
            addStatus(title: string, html?: string, prepend?: boolean): PromiseLike<string>;
            /**
                * Appends text to an existing status message.
                * @param id - The ID of the status message to remove.
                * @param title - The title of the status message.
                * @param html - The contents of the status message.
                */
            appendStatus(id: string, title: string, html: string): PromiseLike<string>;
            /**
                * Method to ensure the core script is loaded
                */
            load(): PromiseLike<void>;
            /**
                * Removes all status messages from the page.
                * @param hide - Specifies that the status messages should be hidden.
                */
            removeAllStatus(hide?: boolean): any;
            /**
                * Removes the specified status message.
                * @param id - The ID of the status message to remove.
                */
            removeStatus(id: string): any;
            /**
                * Sets the priority color of the specified status message.
                * @param id - The ID of the status message to remove.
                * @param color - The color to set for the status message. The following table lists the values and their priority.
                */
            setStatusPriColor(id: string, color: string): any;
            /**
                * Updates the specified status message.
                * @param id - The ID of the status message to remove.
                * @param html - The contents of the status message.
                */
            updateStatus(id: string, html: string): any;
    }
}

declare module 'gd-sprest/helper/types/spCfg' {
    import { Types } from "gd-sprest/";
    /**
        * Field Information
        */
    export interface IFieldInfo {
            /** The default value of the field */
            defaultValue?: string;
            /** The internal name of the field */
            name: string;
            /** Flag to determine if the field is required */
            required?: boolean;
            /** The schema definition of the field. */
            schemaXml?: string;
            /** The field title */
            title?: string;
            /** The field type */
            type?: number;
    }
    /**
        * Calculated Field Information
        */
    export interface IFieldInfoCalculated extends IFieldInfo {
            /** The field references */
            fieldRefs?: Array<string>;
            /** The date/time format */
            format?: number;
            /** The formula */
            formula?: string;
            /** The result type */
            resultType?: string;
    }
    /**
        * Choice Field Information
        */
    export interface IFieldInfoChoice extends IFieldInfo {
            /** The choices */
            choices?: string[];
            /** Allow multiple choices */
            multi?: boolean;
    }
    /**
        * Date Field Information
        */
    export interface IFieldInfoDate extends IFieldInfo {
            /** The date/time format */
            format?: number;
    }
    /**
        * Lookup Field Information
        */
    export interface IFieldInfoLookup extends IFieldInfo {
            /** The field reference (Required for associated lookup fields) */
            fieldRef?: string;
            /** Allow multiple lookup values */
            multi?: boolean;
            /** The list id */
            listId?: string;
            /** The list name */
            listName?: string;
            /** The lookup field to show */
            showField?: string;
            /** The relative web url containing the list */
            webUrl?: string;
    }
    /**
        * Managed Metadata
        */
    export interface IFieldInfoMMS extends IFieldInfo {
            /** The locale value */
            locale?: number;
    }
    /**
        * Note
        */
    export interface IFieldInfoNote extends IFieldInfo {
            /** Flag to append the comments. (This requires versioning to be enabled) */
            appendFl?: boolean;
            /** The note field type */
            noteType?: number;
            /** The number of lines */
            numberOfLines?: number;
    }
    /**
        * Number
        */
    export interface IFieldInfoNumber extends IFieldInfo {
            /** The number of decimal places */
            decimals?: number;
            /** The maximum value */
            max?: number;
            /** The minimum value */
            min?: number;
            /** The number field type */
            numberType?: number;
    }
    /**
        * User
        */
    export interface IFieldInfoUser extends IFieldInfo {
            /** Allow multiple choices */
            multi?: boolean;
            /** The user selection mode */
            selectionMode?: number;
            /** The user selection scope */
            selectionScope?: number;
    }
    /**
        * SharePoint Configuration - Content Type Information
        */
    export interface ISPCfgContentTypeInfo extends Types.SP.IContentTypeCreationInformation {
            /**
                * The content type. (This value is set internally.)
                */
            ContentType?: Types.SP.IContentTypeResult;
            /**
                * The field references.
                */
            FieldRefs?: Array<string>;
            /**
                * The JSLink property.
                */
            JSLink?: string;
            /**
                * The parent content type name, required if different then the name.
                */
            ParentName?: string;
            /**
                * The url of the web containing the parent content type, required if the parent content type doesn't exist in the current web.
                */
            ParentWebUrl?: string;
            /**
                * Event triggered after the content type is created.
                */
            onCreated?: (ct: Types.SP.IContentTypeResult) => void;
            /**
                * Event triggered after the content type is updated.
                */
            onUpdated?: (ct: Types.SP.IContentTypeResult) => void;
    }
    /**
        * SharePoint Configuration - Custom Action Information
        */
    export interface ISPCfgCustomActionInfo {
            /**
                * Custom actions to be created at the site collection level.
                */
            Site?: Array<Types.SP.IUserCustomActionCreationInformation>;
            /**
                * Custom actions to be created at the web level.
                */
            Web?: Array<Types.SP.IUserCustomActionCreationInformation>;
    }
    /**
        * SharePoint Configuration - Field Information
        */
    export interface ISPCfgFieldInfo extends IFieldInfo {
            /**
                * Event triggered after the field is created.
                */
            onCreated?: (field: Types.SP.IFieldResult) => void;
            /**
                * Event triggered after the field is updated.
                */
            onUpdated?: (field: Types.SP.IFieldResult) => void;
    }
    /**
        * SharePoint Configuration - List Information
        */
    export interface ISPCfgListInfo {
            /** The content Types.SP. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
            /** The custom list fields. */
            CustomFields?: Array<ISPCfgFieldInfo>;
            /** The list creation information. */
            ListInformation: Types.SP.IListCreationInformation;
            /** The title display name. */
            TitleFieldDisplayName?: string;
            /** The user custom actions. */
            UserCustomActions?: Array<Types.SP.IUserCustomActionCreationInformation>;
            /** The view information. */
            ViewInformation?: Array<ISPCfgViewInfo>;
            /**
                * Event triggered after the list is created or updated.
                */
            onCreated?: (list: Types.SP.IListResult) => void;
            /**
                * Event triggered after the list is updated.
                */
            onUpdated?: (list: Types.SP.IListQueryResult) => void;
    }
    /**
        * SharePoint Configuration - View Information
        */
    export interface ISPCfgViewInfo {
            /** The JSLink property. */
            JSLink?: string;
            /** The view fields. */
            ViewFields?: Array<string>;
            /** The view name. */
            ViewName: string;
            /** The view query. */
            ViewQuery?: string;
            /**
                * Event triggered after the view is created or updated.
                */
            onCreated?: (view: Types.SP.IViewResult) => void;
            /**
                * Event triggered after the view is updated.
                */
            onUpdated?: (view: Types.SP.IView) => void;
    }
    /**
        * SharePoint Configuration - WebPart Information
        */
    export interface ISPCfgWebPartInfo {
            /** The file name of the webpart. */
            FileName: string;
            /** The webpart group. */
            Group?: string;
            /** The webpart xml */
            XML: string;
            /**
                * Event triggered after the webpart file is created.
                */
            onCreated?: (file: Types.SP.IFileResult) => void;
            /**
                * Event triggered after the webpart file is updated.
                */
            onUpdated?: (file: Types.SP.IFileResult) => void;
    }
    /**
        * SharePoint Configuration Methods
        */
    export interface ISPConfig {
            /**
                * Constructor
                * @param cfg - The SharePoint configuration information.
                * @param webUrl - An optional string representing the relative web url.
                */
            new (cfg: ISPConfigProps, webUrl?: string): ISPConfig;
            /**
                * Method to install the configuration
                * @param callback - An optional function called after the execution completes.
                */
            install(callback?: () => void): any;
            /**
                * Method to install by the configuration type.
                * @param cfgType - The configuration type.
                * @param callback - An optional function called after the execution completes.
                * @param targetName - The target configuration type to install.
                */
            installByType(cfgType: number, callback?: any, targetName?: string): any;
            /**
                * Method to install the configuration
                * @param callback - An optional function called after the execution completes.
                */
            uninstall(callback?: () => void): any;
            /**
                * Method to uninstall by the configuration type.
                * @param cfgType - The configuration type.
                * @param callback - An optional function called after the execution completes.
                * @param targetName - The target configuration type to uninstall.
                */
            uninstallByType(cfgType: number, callback?: any, targetName?: string): any;
    }
    /**
        * SharePoint Configuration - Properties
        */
    export interface ISPConfigProps {
            /** The content Types.SP. */
            ContentTypes?: Array<ISPCfgContentTypeInfo>;
            /** The custom action configuration. */
            CustomActionCfg?: ISPCfgCustomActionInfo;
            /** The site column configuration. */
            Fields?: Array<ISPCfgFieldInfo>;
            /** The list configuration. */
            ListCfg?: Array<ISPCfgListInfo>;
            /** The web part configuration. */
            WebPartCfg?: Array<ISPCfgWebPartInfo>;
    }
    /**
        * SharePoint Configuration - Types
        */
    export interface ISPConfigTypes {
            /** Fields */
            Fields: number;
            /** Content Types */
            ContentTypes: number;
            /** Lists */
            Lists: number;
            /** Site User Custom Actions */
            SiteUserCustomActions: number;
            /** Web User Custom Actions */
            WebUserCustomActions: number;
    }
}

declare module 'gd-sprest/helper/types/spCfgTypes' {
    /** The field types */
    export type ISPCfgFieldType = {
        Boolean: number;
        Calculated: number;
        Choice: number;
        Date: number;
        Lookup: number;
        MMS: number;
        Note: number;
        Number: number;
        Text: number;
        Url: number;
        User: number;
    };
    /** The configuration types */
    export type ISPCfgType = {
        Fields: number;
        ContentTypes: number;
        Lists: number;
        SiteUserCustomActions: number;
        WebParts: number;
        WebUserCustomActions: number;
    };
}

declare module 'gd-sprest/helper/types/taxonomy' {
    /**
        * Taxonomy Helper Class
        */
    export interface ITaxonomy {
            /**
                * Method to find a term by id
                * @param term - The term
                * @param termId - The term id to search for
                */
            findById(term: ITerm, termId: string): ITerm;
            /**
                * Method to find a term by name
                * @param term - The term
                * @param termName - The term name to search for
                */
            findByName(term: ITerm, termName: string): ITerm;
            /**
                * Method to get the term group
                * @param groupName - The gruop name.
                */
            getTermGroup(groupName?: string): PromiseLike<{
                    context: any;
                    termGroup: any;
            }>;
            /**
                * Method to get the terms
                * @param termSet - The term set.
                * @param termSetTerms - The term set terms.
                */
            getTerms(termSet: any, termSetTerms: any): Array<ITermInfo>;
            /**
                * Method to get the terms by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermsById(termStoreId: string, termSetId: string): PromiseLike<Array<ITermInfo>>;
            /**
                * Method to get the term set by id
                * @param termStoreId - The term store guid
                * @param termSetId - The term set guid
                */
            getTermSetById(termStoreId: string, termSetId: string): PromiseLike<ITerm>;
            /**
                * Method to get the terms from the default site collection
                * @param termSetName - The term set name
                */
            getTermsFromDefaultSC(termSetName: string): PromiseLike<Array<ITermInfo>>;
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetFromDefaultSC(termSetName: string): PromiseLike<ITerm>;
            /**
                * Method to get a terms from a specified group
                */
            getTermsByGroupName(termSetName: string, groupName: string): PromiseLike<Array<ITermInfo>>;
            /**
                * Method to get the term set from the default site collection
                */
            getTermSetByGroupName(termSetName: string, groupName: string): PromiseLike<ITerm>;
            /**
                * Method to ensure the taxonomy script references are loaded.
                */
            loadScripts(): PromiseLike<void>;
            /**
                * Method to convert a term set into an array of terms
                * @param term - The term
                */
            toArray(term: ITerm | ITermInfo): Array<ITermInfo>;
            /**
                * Method to convert a term to a field value
                * @param term - The term
                */
            toFieldValue(term: ITerm | ITermInfo): any;
            /**
                * Method to convert a collection of terms to a field value
                * @param terms - The terms
                */
            toFieldMultiValue(terms: Array<ITerm | ITermInfo>): any;
            /**
                * Method to convert an array of terms into a term set
                * @param terms - The terms
                */
            toObject(terms: Array<ITermInfo>): ITerm;
    }
    /**
        * Taxonomy Term
        */
    export interface ITerm {
            /** The root term information */
            info: ITermInfo;
            /** The parent term */
            parent?: ITerm;
    }
    /**
        * Taxonomy Term Information
        */
    export interface ITermInfo {
            /** The term description */
            description: string;
            /** The term id */
            id: string;
            /** The term name */
            name: string;
            /** The parent term */
            parent?: ITerm;
            /** The term path */
            path: Array<string>;
            /** The term path as a string */
            pathAsString: string;
            /** The term custom properties */
            props: {
                    [key: string]: string;
            };
    }
}

declare module 'gd-sprest/helper/types/webpart' {
    /**
        * Web Part
        */
    export interface IWebPart {
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            new (props: IWebPartProps): any;
            /**
                * Creates an instance of a webpart.
                * @param props - The webpart properties.
                */
            create(props: IWebPartProps): any;
    }
    /**
        * The webpart configuration
        */
    export interface IWebPartCfg {
            /** The webpart id */
            WebPartId?: string;
    }
    /**
        * The webpart information
        */
    export interface IWebPartInfo {
            /** The configuration */
            cfg: IWebPartCfg;
            /** The element to render the webpart to */
            el: HTMLElement;
            /** The webpart id */
            wpId: string;
    }
    /**
        * The webpart properties
        */
    export interface IWebPartProps {
            /** The optional configuration element id */
            cfgElementId?: string;
            /** The optional help link properties */
            helpProps?: {
                    /** The link title */
                    title?: string;
                    /** The link url */
                    url: string;
            };
            /** The post render event */
            onPostRender?: (wp: IWebPartInfo) => void;
            /** The render event triggered when the page is in 'Display' mode */
            onRenderDisplay?: (wp: IWebPartInfo) => any;
            /** The render event triggered when the page is in 'Edit' mode */
            onRenderEdit?: (wp: IWebPartInfo) => any;
            /** The target element id to render the webpart to */
            elementId: string;
    }
}

declare module 'gd-sprest/mapper/audit' {
    /**
      * Audit
      */
    export const audit: {
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/eventReceiver' {
    /**
        * Event Receiver
        */
    export const eventreceiver: {
            delete: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Event Receivers
        */
    export const eventreceivers: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/file' {
    /**
        * Attachment
        */
    export const attachment: {};
    /**
        * Attachment Files
        */
    export const attachmentfiles: {
            add: {
                    argNames: string[];
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * File
        */
    export const file: {
            properties: string[];
            approve: {
                    argNames: string[];
                    requestType: number;
            };
            cancelupload: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            checkin: {
                    argNames: string[];
                    requestType: number;
            };
            checkout: {
                    requestType: number;
            };
            content: {
                    name: string;
                    requestType: number;
            };
            continueUpload: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            copyTo: {
                    argNames: string[];
                    requestType: number;
            };
            delete: {
                    requestType: number;
            };
            deny: {
                    argNames: string[];
                    requestType: number;
            };
            finishUpload: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            getlimitedwebpartmanager: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            moveTo: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            openBinaryStream: {
                    requestType: number;
            };
            publish: {
                    argNames: string[];
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            recycle: {
                    requestType: number;
            };
            saveBinaryStream: {
                    requestType: number;
            };
            startUpload: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            undoCheckOut: {
                    requestType: number;
            };
            unpublish: {
                    argNames: string[];
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Files
        */
    export const files: {
            add: {
                    argNames: string[];
                    requestType: number;
            };
            addTemplateFile: {
                    argNames: string[];
                    requestType: number;
            };
            getByUrl: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * File Version
        */
    export const fileversion: {
            properties: any[];
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * File Versions
        */
    export const fileversions: {
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Folder
        */
    export const folder: {
            properties: string[];
            delete: {
                    requestType: number;
            };
            getByUrl: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            recycle: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Folders
        */
    export const folders: {
            properties: string[];
            add: {
                    argNames: string[];
                    requestType: number;
            };
            getbyurl: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Limited Web Part Manager
        */
    export const limitedwebpartmanager: {
            properties: string[];
            get_WebParts: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/list' {
    /**
        * Content Type
        */
    export const contenttype: {
            properties: string[];
            delete: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Content Types
        */
    export const contenttypes: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            addAvailableContentType: {
                    argNames: string[];
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Field
        */
    export const field: {
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            setShowInDisplayForm: {
                    argNames: string[];
                    requestType: number;
            };
            setShowInEditForm: {
                    argNames: string[];
                    requestType: number;
            };
            setShowInNewForm: {
                    argNames: string[];
                    requestType: number;
            };
            update: {
                    inheritMetadataType: boolean;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Field Links
        */
    export const fieldlinks: {
            add: {
                    argNames: string[];
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Fields
        */
    export const fields: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            addField: {
                    argNames: string[];
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            addDependentLookupField: {
                    argNames: string[];
                    requestType: number;
            };
            createFieldAsXml: {
                    argNames: string[];
                    requestType: number;
                    data: {
                            parameters: {
                                    __metadata: {
                                            type: string;
                                    };
                                    Options: number;
                                    SchemaXml: string;
                            };
                    };
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByInternalNameOrTitle: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByTitle: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Items
        */
    export const items: {
            add: {
                    metadataType: (obj: any) => any;
                    name: string;
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * List
        */
    export const list: {
            properties: string[];
            breakRoleInheritance: {
                    argNames: string[];
                    requestType: number;
            };
            delete: {
                    requestType: number;
            };
            getChanges: {
                    argNames: string[];
                    metadataType: string;
                    requestType: number;
            };
            getItemById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getItems: {
                    argNames: string[];
                    requestType: number;
                    data: {
                            query: {
                                    __metadata: {
                                            type: string;
                                    };
                                    ViewXml: string;
                            };
                    };
            };
            getItemsByQuery: {
                    argNames: string[];
                    name: string;
                    requestType: number;
                    data: {
                            query: {
                                    __metadata: {
                                            type: string;
                                    };
                                    ViewXml: string;
                            };
                    };
            };
            getListItemChangesSinceToken: {
                    argNames: string[];
                    metadataType: string;
                    requestType: number;
            };
            getRelatedFields: {
                    requestType: number;
            };
            getUserEffectivePermissions: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            getViewById: {
                    argNames: string[];
                    name: string;
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            recycle: {
                    requestType: number;
            };
            renderListData: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            renderListFormData: {
                    argNames: string[];
                    requestType: number;
            };
            reserveListItemId: {
                    requestType: number;
            };
            resetRoleInheritance: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * List Item
        */
    export const listitem: {
            properties: string[];
            breakRoleInheritance: {
                    argNames: string[];
                    requestType: number;
            };
            delete: {
                    requestType: number;
            };
            getUserEffectivePermissions: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            recycle: {
                    requestType: number;
            };
            resetRoleInheritance: {
                    requestType: number;
            };
            update: {
                    inheritMetadataType: boolean;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
            validateUpdateListItem: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Lists
        */
    export const lists: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            ensureSiteAssetsLibrary: {
                    requestType: number;
            };
            ensureSitePagesLibrary: {
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByTitle: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Version
        */
    export const version: {
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            deleteAll: {
                    requestType: number;
            };
            deleteById: {
                    argNames: string[];
                    requestType: number;
            };
            deleteByLabel: {
                    argNames: string[];
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            restoreByLabel: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * View
        */
    export const view: {
            properties: string[];
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            renderAsHtml: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * View Field Collection
        */
    export const viewfieldcollection: {
            addViewField: {
                    argNames: string[];
                    requestType: number;
            };
            moveViewFieldTo: {
                    argNames: string[];
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            removeAllViewFields: {
                    requestType: number;
            };
            removeViewField: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Views
        */
    export const views: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByTitle: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/navigation' {
    /**
      * Navigation
      */
    export const navigationservicerest: {
        properties: string[];
        getMenuState: {
            argNames: string[];
            name: string;
            RequestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/propertyValues' {
    /**
      * Property Values
      */
    export const propertyvalues: {
        query: {
            argNames: string[];
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/search' {
    /**
      * Search
      */
    export const search: {
        postquery: {
            argNames: string[];
            metadataType: string;
            requestType: number;
        };
    };
}

declare module 'gd-sprest/mapper/security' {
    /**
        * Role Assignment
        */
    export const roleassignment: {
            properties: string[];
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Role Assignments
        */
    export const roleassignments: {
            addRoleAssignment: {
                    argNames: string[];
                    requestType: number;
            };
            getByPrincipalId: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            removeRoleAssignment: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Role Definition
        */
    export const roledefinition: {
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Role Definitions
        */
    export const roledefinitions: {
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByName: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByType: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/site' {
    /**
        * Site
        */
    export const site: {
            properties: string[];
            createPreviewSPSite: {
                    argNames: string[];
                    requestType: number;
            };
            extendUpgradeReminderDate: {
                    requestType: number;
            };
            getCatalog: {
                    argNames: string[];
                    requestType: number;
            };
            getChanges: {
                    argNames: string[];
                    metadataType: string;
                    requestType: number;
            };
            getCustomListTemplates: {
                    argNames: string[];
                    requestType: number;
            };
            getWebTemplates: {
                    argNames: string[];
                    requestType: number;
            };
            invalidate: {
                    requestType: number;
            };
            needsUpgradeByType: {
                    argNames: string[];
                    requestType: number;
            };
            openWeb: {
                    argNames: string[];
                    requestType: number;
            };
            openWebById: {
                    argNames: string[];
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            runHealthCheck: {
                    argNames: string[];
                    requestType: number;
            };
            runUpgradeSiteSession: {
                    argNames: string[];
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
            updateClientObjectModelUseRemoteAPIsPermissionSetting: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Tenant App
        */
    export const tenantapp: {
            deploy: {
                    requestType: number;
            };
            install: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            remove: {
                    requestType: number;
            };
            retract: {
                    requestType: number;
            };
            upgrade: {
                    requestType: number;
            };
            uninstall: {
                    requestType: number;
            };
    };
    /**
        * Tenant Apps
        */
    export const tenantapps: {
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Tenant App Catalog
        */
    export const tenantappcatalog: {
            properties: string[];
            add: {
                    argNames: string[];
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    name: string;
                    requestType: number;
                    returnType: string;
            };
            SiteCollectionAppCatalogsSites: {
                    requestType: number;
            };
    };
    /**
        * Utility
        */
    export const utility: {
            createEmailBodyForInvitation: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getAppLicenseDeploymentId: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getAppLicenseInformation: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getCurrentUserEmailAddresses: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getLocalizedString: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getLowerCaseString: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            importAppLicense: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            isUserLicensedForEntityInContext: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            localizeWebPartGallery: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            markDiscussionAsFeatured: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            resolvePrincipal: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            searchPrincipals: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            unmarkDiscussionAsFeatured: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
    };
    /**
        * Web
        */
    export const web: {
            properties: string[];
            applyTheme: {
                    argNames: string[];
                    requestType: number;
            };
            applyWebTemplate: {
                    argName: string[];
                    requestType: number;
            };
            breakRoleInheritance: {
                    argNames: string[];
                    requestType: number;
            };
            delete: {
                    requestType: number;
            };
            doesPushNotificationSubscriberExist: {
                    argNames: string[];
                    requestType: number;
            };
            doesUserHavePermissions: {
                    argNames: string[];
                    requestType: number;
            };
            ensureUser: {
                    argNames: string[];
                    requestType: number;
            };
            executeRemoteLOB: {
                    requestType: number;
            };
            getAppBdcCatalog: {
                    requestType: number;
            };
            getAppBdcCatalogForAppInstance: {
                    argNames: string[];
                    requestType: number;
            };
            getAppInstanceById: {
                    argNames: string[];
                    requestType: number;
            };
            getAppInstancesByProductId: {
                    argNames: string[];
                    requestType: number;
            };
            getAvailableWebTemplates: {
                    argNames: string[];
                    requestType: number;
            };
            getCatalog: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getChanges: {
                    argNames: string[];
                    metadataType: string;
                    requestType: number;
            };
            getContextWebInformation: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getCustomListTemplates: {
                    requestType: number;
            };
            getDocumentLibraries: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getEntity: {
                    argNames: string[];
                    requestType: number;
            };
            getFileByServerRelativeUrl: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getFolderByServerRelativeUrl: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getList: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getPushNotificationSubscriber: {
                    argNames: string[];
                    requestType: number;
            };
            getPushNotificationSubscribersByArgs: {
                    argNames: string[];
                    requestType: number;
            };
            getPushNotificationSubscribersByUser: {
                    argNames: string[];
                    requestType: number;
            };
            getSubwebsFilteredForCurrentUser: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getUserById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getUserEffectivePermissions: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            getWebUrlFromPageUrl: {
                    name: string;
                    requestType: number;
            };
            loadAndInstallApp: {
                    requestType: number;
            };
            loadAndInstallAppInSpecifiedLocale: {
                    argNames: string[];
                    requestType: number;
            };
            loadApp: {
                    argNames: string[];
                    requestType: number;
            };
            mapToIcon: {
                    argNames: string[];
                    requestType: number;
            };
            processExternalNotification: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            registerPushNotificationSubscriber: {
                    argNames: string[];
                    requestType: number;
            };
            resetRoleInheritance: {
                    requestType: number;
            };
            unregisterPushNotificationSubscriber: {
                    requestType: number;
            };
            update: {
                    metadataType: string;
                    name: string;
                    requestMethod: string;
                    requestType: number;
            };
    };
    /**
        * Web Information Collection
        */
    export const webinfos: {
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Webs
        */
    export const webs: {
            add: {
                    argNames: string[];
                    metadataType: string;
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/social' {
    /**
        * People Manager
        */
    export const peoplemanager: {
            amIFollowedBy: {
                    argNames: string[];
                    requestType: number;
            };
            amIFollowing: {
                    argNames: string[];
                    requestType: number;
            };
            follow: {
                    argNames: string[];
                    requestType: number;
            };
            followTag: {
                    argNames: string[];
                    requestType: number;
            };
            getFollowedTags: {
                    argNames: string[];
                    requestType: number;
            };
            getFollowersFor: {
                    argNames: string[];
                    requestType: number;
            };
            getMyFollowers: {
                    requestType: number;
            };
            getMyProperties: {
                    requestType: number;
            };
            getMySuggestions: {
                    requestType: number;
            };
            getPeopleFollowedBy: {
                    argNames: string[];
                    requestType: number;
            };
            getPeopleFollowedByMe: {
                    requestType: number;
            };
            getPropertiesFor: {
                    argNames: string[];
                    requestType: number;
            };
            getTrendingTags: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            getUserProfilePropertyFor: {
                    argNames: string[];
                    requestType: number;
            };
            hideSuggestion: {
                    argNames: string[];
                    requestType: number;
            };
            isFollowing: {
                    argNames: string[];
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            setMyProfilePicture: {
                    requestType: number;
            };
            stopFollowing: {
                    argNames: string[];
                    requestType: number;
            };
            stopFollowingTag: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Profile Loader
        */
    export const profileloader: {
            createPersonalSiteEnqueueBulk: {
                    argNames: string[];
                    requestType: number;
            };
            getOwnerUserProfile: {
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
                    returnType: string;
            };
            getUserProfile: {
                    requestType: number;
                    returnType: string;
            };
    };
    /**
        * Social Feed
        */
    export const socialfeed: {
            actor: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            actorFeed: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
            clearMyUnreadMentionCount: {
                    name: string;
                    requestType: number;
            };
            my: {
                    name: string;
                    requestType: number;
            };
            myFeed: {
                    name: string;
                    requestType: number;
            };
            myLikes: {
                    name: string;
                    requestType: number;
            };
            myMentionFeed: {
                    name: string;
                    requestType: number;
            };
            myNews: {
                    name: string;
                    requestType: number;
            };
            myTimelineFeed: {
                    name: string;
                    requestType: number;
            };
            myUnreadMentionCount: {
                    name: string;
                    requestType: number;
            };
    };
    /**
        * User Profile
        */
    export const userprofile: {
            properties: string[];
            createPersonalSiteEnque: {
                    requestType: number;
            };
            shareAllSocialData: {
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/user' {
    /**
        * Group
        */
    export const group: {
            properties: string[];
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Site Groups
        */
    export const sitegroups: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByName: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            removeById: {
                    argNames: string[];
                    requestType: number;
            };
            removeByLoginName: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * People Picker
        */
    export const peoplepicker: {
            clientPeoplePickerResolveUser: {
                    argNames: string[];
                    metadataType: string;
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
            clientPeoplePickerSearchUser: {
                    argNames: string[];
                    metadataType: string;
                    name: string;
                    replaceEndpointFl: boolean;
                    requestType: number;
            };
    };
    /**
        * User
        */
    export const user: {
            properties: string[];
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * Users
        */
    export const users: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            getByEmail: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            getByLoginName: {
                    argNames: string[];
                    name: string;
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
            removeById: {
                    argNames: string[];
                    requestType: number;
            };
            removeByLoginName: {
                    argNames: string[];
                    name: string;
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/userCustomAction' {
    /**
        * User Custom Action
        */
    export const usercustomaction: {
            delete: {
                    requestType: number;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
    /**
        * User Custom Actions
        */
    export const usercustomactions: {
            add: {
                    metadataType: string;
                    name: string;
                    requestType: number;
            };
            clear: {
                    requestType: number;
            };
            getById: {
                    argNames: string[];
                    requestType: number;
                    returnType: string;
            };
            query: {
                    argNames: string[];
                    requestType: number;
            };
    };
}

declare module 'gd-sprest/mapper/types/attachment' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IAttachmentFiles } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IAttachmentFilesMethods {
            /**
                * Adds the attachment that is represented by the specified file name and byte array to the list item.
                * @param fileName - The filename of the attachment.
                * @param content - The contents of the file. The maximum size of a binary file that you can add by using the REST API is 2 GB.
                */
            add(fileName: any, content: any): IBase<IAttachment>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IAttachmentFiles>;
    }
    /**
        * Attachment
        */
    export interface IAttachment {
            /** The filename. */
            FileName: string;
            /** The filename as a path. */
            FileNameAsPath: Types.SP.IResourcePath;
            /** The server relative path. */
            ServerRelativePath: Types.SP.IResourcePath;
            /** The server relative url. */
            ServerRelativeUrl: string;
    }
}

declare module 'gd-sprest/mapper/types/attachments' {
    import { IBaseCollection } from "gd-sprest/utils/types";
    import { IAttachment, IAttachmentFilesMethods } from "gd-sprest/mapper/types";
    /**
      * Attachment Files
      */
    export interface IAttachmentFiles extends IAttachmentFilesMethods, IBaseCollection<IAttachment> {
    }
}

declare module 'gd-sprest/mapper/types/audit' {
    /**
      * Audit
      */
    export interface IAudit {
        AuditFlags: number;
    }
}

declare module 'gd-sprest/mapper/types/complexTypes' {
    import { Types } from "gd-sprest/";
    /**
        * App License
        */
    export interface AppLicense {
            RawXMLLicenseToken: string;
    }
    /**
        * App License Collection
        */
    export interface AppLicenseCollection {
            Items: AppLicense;
    }
    /**
        * App Properties
        */
    export interface AppProperties {
            AppSettingsEnabled: boolean;
            Description: string;
            EulaUrl: string;
            IsAnonymous: boolean;
            IsDisabled: boolean;
            ManagedDeploymentEnabled: boolean;
            ManagePermissionsEnabled: boolean;
            ManageSeatsEnabled: boolean;
            MonitoringEnabled: boolean;
            Publisher: string;
            RemoveEnabled: boolean;
            SideLoadEnabled: boolean;
            SupportUrl: string;
            ViewInMarketPlaceEnabled: boolean;
    }
    /**
        * App Site Context
        */
    export interface AppSiteContext {
            SiteUrl: string;
    }
    /**
        * App View Creation Information
        */
    export interface AppViewCreationInfo {
            AppId: string;
            Title: string;
    }
    /**
        * Attachment Creation Information
        */
    export interface AttachmentCreationInformation {
            FileName: string;
    }
    /**
        * Base Permissions
        */
    export interface BasePermissions {
            High: number;
            Low: number;
    }
    /**
        * Caml Query
        */
    export interface CamlQuery {
            /** A value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format. */
            DatesInUtc: boolean;
            /** A value that specifies the server relative URL of a list folder from which results will be returned. */
            FolderServerRelativeUrl: string;
            /** A value that specifies the information required to get the next page of data for the list view. */
            ListItemCollectionPosition: ListItemCollectionPosition;
            /** A value that specifies the XML schema that defines the list view. */
            ViewXml: string;
    }
    /**
        * Change Log Item Query
        */
    export interface ChangeLogItemQuery {
            ChangeToken: string;
            Contains: string;
            Query: string;
            QueryOptions: string;
            RowLimit: string;
            ViewFields: string;
            ViewName: string;
    }
    /**
        * Change Query
        */
    export interface ChangeQuery {
            Activity: boolean;
            Add: boolean;
            Alert: boolean;
            ChangeTokenEnd: ChangeToken;
            ChangeTokenStart: ChangeToken;
            ContentType: boolean;
            DeleteObject: boolean;
            FetchLimit: number;
            Field: boolean;
            File: boolean;
            Folder: boolean;
            Group: boolean;
            GroupMembershipAdd: boolean;
            GroupMembershipDelete: boolean;
            Item: boolean;
            LatestFirst: boolean;
            List: boolean;
            Move: boolean;
            Navigation: boolean;
            RecursiveAll: boolean;
            Rename: boolean;
            RequireSecurityTrim: boolean;
            Restore: boolean;
            RoleAssignmentAdd: boolean;
            RoleAssignmentDelete: boolean;
            RoleDefinitionAdd: boolean;
            RoleDefinitionDelete: boolean;
            RoleDefinitionUpdate: boolean;
            SecurityPolicy: boolean;
            Site: boolean;
            SystemUpdate: boolean;
            Update: boolean;
            User: boolean;
            View: boolean;
            Web: boolean;
    }
    /**
        * Change Token
        */
    export interface ChangeToken {
            StringValue: string;
    }
    /**
        * Content Type Creation Information
        */
    export interface ContentTypeCreationInformation {
            /** The content type description. */
            Description?: string;
            /** The content type group. */
            Group?: string;
            /** The content type id. */
            Id?: string;
            /** The content type name. */
            Name: string;
    }
    /**
        * Content Type Id
        */
    export interface ContentTypeId {
            StringValue: string;
    }
    /**
        * Context Web Information
        */
    export interface ContextWebInformation {
            FormDigestTimeoutSeconds: number;
            FormDigestValue: string;
            LibraryVersion: string;
            SiteFullUrl: string;
            SupportedSchemaVersions: String;
            WebFullUrl: string;
    }
    /**
        * Copy Job Progress
        */
    export interface CopyJobProgress {
            JobState: number;
            Logs: String;
    }
    /**
        * Copy Migration Information
        */
    export interface CopyMigrationInfo {
            EncryptionKey: any;
            JobId: string;
            JobQueueUri: string;
    }
    /**
        * Copy Migration Options
        */
    export interface CopyMigrationOptions {
            IgnoreVersionHistory: boolean;
    }
    /**
        * Creatable Item Information
        */
    export interface CreatableItemInfo {
            DocumentTemplate: number;
            FileExtension: string;
            ItemType: string;
    }
    /**
        * Creatable Item Information Collection
        */
    export interface CreatableItemInfoCollection {
            Items: CreatableItemInfo;
    }
    /**
        * Custom Action Element
        */
    export interface CustomActionElement {
            CommandUIExtension: string;
            EnabledScript: string;
            ImageUrl: string;
            Location: string;
            RegistrationId: string;
            RegistrationType: number;
            RequireSiteAdministrator: boolean;
            Rights: BasePermissions;
            Title: string;
            UrlAction: string;
    }
    /**
        * Custom Action Element Collection
        */
    export interface CustomActionElementCollection {
            Items: CustomActionElement;
    }
    /**
        * Custom Result
        */
    export interface CustomResult {
            GroupTemplateId: string;
            ItemTemplateId: string;
            Properties: KeyValue;
            ResultTitle: string;
            ResultTitleUrl: string;
            Table: SimpleDataTable;
            TableType: string;
    }
    /**
        * Document Library Information
        */
    export interface DocumentLibraryInformation {
            AbsoluteUrl: string;
            Modified: string;
            ModifiedFriendlyDisplay: string;
            ServerRelativeUrl: string;
            Title: string;
    }
    /**
        * Encryption Option
        */
    export interface EncryptionOption {
            AES256CBCKey: any;
    }
    /**
        * Event Receiver Definition Creation Information
        */
    export interface EventReceiverDefinitionCreationInformation {
            /** The event receiver type. */
            EventType: number;
            /** The strong name of the assembly that is used for receiving events. */
            ReceiverAssembly?: string;
            /** A string that represents the class that is used for receiving events. */
            ReceiverClass?: string;
            /** The name of the event receiver. */
            ReceiverName: string;
            /** The URL of a web service that is used for receiving events. */
            ReceiverUrl?: string;
            /** An integer that represents the relative sequence of the event. */
            SequenceNumber?: number;
            /** The execution synchronization of the event receiver. */
            Synchronization?: number;
    }
    /**
        * Field Attachment File
        */
    export interface FieldAttachmentFile {
            FileName: string;
            FileNameAsPath: ResourcePath;
            ServerRelativePath: ResourcePath;
            ServerRelativeUrl: string;
    }
    /**
        * Field Attachment Files
        */
    export interface FieldAttachmentFiles {
            results: Array<FieldAttachmentFile>;
    }
    /**
        * Field Calculation Error Value
        */
    export interface FieldCalculationErrorValue {
            ErrorMessage: string;
    }
    /**
        * Field Creation Information
        */
    export interface FieldCreationInformation {
            /** The choices. */
            Choices?: {
                    results: Array<string>;
            };
            /** The field type. */
            FieldTypeKind: number;
            /** Indicates whether only the first eight characters are used for the field name. */
            IsCompactName?: boolean;
            /** The name of the source lookup field. */
            LookupFieldName?: string;
            /** The ID of the target list for the source lookup field. */
            LookupListId?: any;
            /** The ID of the site that contains the list that is the source for the lookup field value. */
            LookupWebId?: any;
            /** A value that specifies whether the field requires a value. */
            Required?: boolean;
            /** A value that specifies the display name of the field. */
            Title: string;
    }
    /**
        * Field Geolocation Value
        */
    export interface FieldGeolocationValue {
            __metadata?: {
                    type: string;
            };
            Altitude: number;
            Latitude: number;
            Longitude: number;
            Measure: number;
    }
    /**
        * Field Lookup Value
        */
    export interface FieldLookupValue {
            __metadata?: {
                    type: string;
            };
            LookupId: number;
            LookupValue: string;
    }
    /**
        * Field Managed Metadata Value
        */
    export interface FieldManagedMetadataValue {
            __metadata?: {
                    type: string;
            };
            Label: string;
            TermGuid: string;
            WssId: number;
    }
    /**
        * Field Multi-Choice
        */
    export interface FieldMultiChoiceValue {
            __metadata?: {
                    type: string;
            };
            results: Array<string>;
    }
    /**
        * Field Multi-Lookup
        */
    export interface FieldMultiLookupValue {
            __metadata?: {
                    type: string;
            };
            results: Array<FieldLookupValue>;
    }
    /**
        * Field Multi-User
        */
    export interface FieldMultiUserValue extends Types.SP.IResults<FieldUserValue> {
    }
    /**
        * Field Rating Scale Question Answer
        */
    export interface FieldRatingScaleQuestionAnswer {
            __metadata?: {
                    type: string;
            };
            Answer: number;
            Question: string;
    }
    /**
        * Field Url Value
        */
    export interface FieldUrlValue {
            __metadata?: {
                    type: string;
            };
            Description: string;
            Url: string;
    }
    /**
        * Field User Value
        */
    export interface FieldUserValue {
            __metadata?: {
                    type: string;
            };
            ContentTypeDisp?: string;
            Created?: string;
            Department?: string;
            EMail?: string;
            FirstName?: string;
            Id?: number;
            ID?: number;
            ImnName?: string;
            JobTitle?: string;
            LastName?: string;
            MobilePhone?: string;
            Modified?: string;
            NameWithPicture?: string;
            NameWithPictureAndDetails?: string;
            Office?: string;
            SipAddress?: string;
            Title?: string;
            UserName?: string;
            WorkPhone?: string;
    }
    /**
        * File Collection Add Parameters
        */
    export interface FileCollectionAddParameters {
            Overwrite: boolean;
    }
    /**
        * File Creation Information
        */
    export interface FileCreationInformation {
            Content: any;
            Overwrite: boolean;
            Url: string;
    }
    /**
        * Folder Collection Add Parameters
        */
    export interface FolderCollectionAddParameters {
            Overwrite: boolean;
    }
    /**
        * Group Creation Information
        */
    export interface GroupCreationInformation {
            /** The group description. */
            Description?: string;
            /** The group name. */
            Title: string;
    }
    /**
        * Hashtag
        */
    export interface Hashtag {
            Actor: string;
            Application: string;
            Label: string;
            Timestamp: string;
    }
    /**
        * Ingestion Task Key
        */
    export interface IngestionTaskKey {
            IngestionTableAccountKey: string;
            IngestionTableAccountName: string;
            JobId: string;
            TaskId: string;
            TenantName: string;
    }
    /**
        * Key Value
        */
    export interface KeyValue {
            Key: string;
            Value: string;
            ValueType: string;
    }
    /**
        * Language
        */
    export interface Language {
            DisplayName: string;
            LanguageTag: string;
            Lcid: number;
    }
    /**
        * List Creation Information
        */
    export interface ListCreationInformation {
            /** The list template type. */
            BaseTemplate: number;
            /** The list schema xml. */
            CustomSchemaXml?: string;
            /** The list of data source properties. */
            DataSourceProperties?: KeyValue;
            /** The list description. */
            Description?: string;
            /** The list document template type. */
            DocumentTemplateType?: number;
            /** Option to display the list on the quick launch. */
            QuickLaunchOption?: number;
            /** The list template feature id. */
            TemplateFeatureId?: string;
            /** The list name. */
            Title: string;
    }
    /**
        * List Data Source
        */
    export interface ListDataSource {
            Properties: KeyValue;
    }
    /**
        * List Data Validation Exception Value
        */
    export interface ListDataValidationExceptionValue {
            FieldFailures: ListDataValidationFailure;
            ItemFailures: ListDataValidationFailure;
    }
    /**
        * List Data Validation Failure
        */
    export interface ListDataValidationFailure {
            DisplayName: string;
            Message: string;
            Name: string;
            Reason: number;
            ValidationType: number;
    }
    /**
        * List Item Collection Position
        */
    export interface ListItemCollectionPosition {
            PagingInfo: string;
    }
    /**
        * List Item Creation Information
        */
    export interface ListItemCreationInformation {
            FolderUrl: string;
            LeafName: string;
            UnderlyingObjectType: number;
    }
    /**
        * List Item Form Update Value
        */
    export interface ListItemFormUpdateValue {
            ErrorMessage: string;
            FieldName: string;
            FieldValue: string;
            HasException: boolean;
    }
    /**
        * Menu Node
        */
    export interface MenuNode {
            CustomProperties: KeyValue;
            FriendlyUrlSegment: string;
            IsDeleted: boolean;
            IsHidden: boolean;
            Key: any;
            string: any;
            Nodes: MenuNode;
            NodeType: number;
            SimpleUrl: string;
            Title: string;
    }
    /**
        * Menu State
        */
    export interface MenuState {
            FriendlyUrlPrefix: string;
            Nodes: MenuNode;
            SimpleUrl: string;
            SPSitePrefix: string;
            SPWebPrefix: string;
            StartingNodeKey: string;
            StartingNodeTitle: string;
            Version: string;
    }
    /**
        * Method Information
        */
    export interface MethodInformation {
            IsBeta: boolean;
            Name: string;
            Parameters: ParameterInformation;
            ReturnTypeFullName: string;
    }
    /**
        * Navigation Node Creation Information
        */
    export interface NavigationNodeCreationInformation {
            AsLastNode: boolean;
            IsExternal: boolean;
            Title: string;
            Url: string;
    }
    /**
        * Parameter Information
        */
    export interface ParameterInformation {
            Name: string;
            ParameterTypeFullName: string;
    }
    /**
        * Personal Result Suggestion
        */
    export interface PersonalResultSuggestion {
            HighlightedTitle: string;
            IsBestBet?: boolean;
            Title: string;
            Url: string;
    }
    /**
        * Property Information
        */
    export interface PropertyInformation {
            ExcludeFromDefaultRetrieval: boolean;
            IsBeta: boolean;
            Name: string;
            PropertyTypeFullName: string;
            ReadOnly: boolean;
    }
    /**
        * Provisioned Migration Containers Information
        */
    export interface ProvisionedMigrationContainersInfo {
            DataContainerUri: string;
            EncryptionKey: any;
            MetadataContainerUri: string;
    }
    /**
        * Provisioned Migration Queue Info
        */
    export interface ProvisionedMigrationQueueInfo {
            JobQueueUri: string;
    }
    /**
        * Query Property
        */
    export interface QueryProperty {
            Name: string;
            Value: QueryPropertyValue;
    }
    /**
        * Query Property Value
        */
    export interface QueryPropertyValue {
            BoolVal?: boolean;
            IntVal?: number;
            QueryPropertyValueTypeIndex?: number;
            StrArray?: String;
            StrVal?: string;
    }
    /**
        * Query Result
        */
    export interface QueryResult {
            CustomResults: CustomResult;
            QueryId: string;
            QueryRuleId?: string;
            RefinementResults: RefinementResults;
            RelevantResults: RelevantResults;
            SpecialTermResults: SpecialTermResults;
    }
    /**
        * Query Suggestion Query
        */
    export interface QuerySuggestionQuery {
            IsPersonal?: boolean;
            Query: string;
    }
    /**
        * Query Suggestion Range
        */
    export interface QuerySuggestionRange {
            Length?: number;
            Start?: number;
    }
    /**
        * Query Suggestion Results
        */
    export interface QuerySuggestionResults {
            PeopleNames: String;
            PersonalResults: PersonalResultSuggestion;
            Queries: QuerySuggestionQuery;
    }
    /**
        * Recycle Bin Queue Information
        */
    export interface RecycleBinQueueInformation {
            IsAscending: boolean;
            ItemState: number;
            OrderBy: number;
            PagingInfo: string;
            RowLimit: number;
            ShowOnlyMyItems: boolean;
    }
    /**
        * Refinement Results
        */
    export interface RefinementResults {
            GroupTemplateId: string;
            ItemTemplateId: string;
            Property: KeyValue;
            Refiners: Refiner;
            ResultTitle: string;
            ResultTitleUrl: string;
    }
    /**
        * Refiner
        */
    export interface Refiner {
            Entries: RefinerEntry;
            Name: string;
    }
    /**
        * Refineer Entry
        */
    export interface RefinerEntry {
            RefinementCount?: number;
            RefinementName: string;
            RefinementToken: string;
            RefinementValue: string;
    }
    /**
        * Relevant Results
        */
    export interface RelevantResults {
            GroupTemplateId: string;
            ItemTemplateId: string;
            Properties: KeyValue;
            ResultTitle: string;
            ResultTitleUrl: string;
            RowCount: number;
            Table: SimpleDataTable;
            TotalRows: number;
            TotalRowsIncludingDuplicates: number;
    }
    /**
        * Reordering Rule
        */
    export interface ReorderingRule {
            Boost?: number;
            MatchType?: number;
            MatchValue: string;
    }
    /**
        * Reordering Rules Creation Information
        */
    export interface ReorderingRulesCreationInformation {
            Boost?: number;
            MatchType?: number;
            MatchValue: string;
    }
    /**
        * Related Item
        */
    export interface RelatedItem {
            IconUrl: string;
            ItemId: number;
            ListId: string;
            Title: string;
            Url: string;
            WebId: string;
    }
    /**
        * Render List Context Menu Data Parameters
        */
    export interface RenderListContextMenuDataParameters {
            CascDelWarnMessage: string;
            CustomAction: string;
            Field: string;
            ID: string;
            InplaceFullListSearch: string;
            InplaceSearchQuery: string;
            IsCSR: string;
            IsXslView: string;
            ItemId: string;
            ListViewPageUrl: string;
            OverrideScope: string;
            RootFolder: string;
            View: string;
            ViewCount: string;
    }
    /**
        * Render List Data Override Parameters
        */
    export interface RenderListDataOverrideParameters {
            CascDelWarnMessage: string;
            CustomAction: string;
            DrillDown: string;
            Field: string;
            FieldInternalName: string;
            Filter: string;
            FilterData: string;
            FilterData1: string;
            FilterData2: string;
            FilterData3: string;
            FilterData4: string;
            FilterData5: string;
            FilterData6: string;
            FilterData7: string;
            FilterData8: string;
            FilterData9: string;
            FilterData10: string;
            FilterField: string;
            FilterField1: string;
            FilterField2: string;
            FilterField3: string;
            FilterField4: string;
            FilterField5: string;
            FilterField6: string;
            FilterField7: string;
            FilterField8: string;
            FilterField9: string;
            FilterField10: string;
            FilterFields: string;
            FilterFields1: string;
            FilterFields2: string;
            FilterFields3: string;
            FilterFields4: string;
            FilterFields5: string;
            FilterFields6: string;
            FilterFields7: string;
            FilterFields8: string;
            FilterFields9: string;
            FilterFields10: string;
            FilterLookupId: string;
            FilterLookupId1: string;
            FilterLookupId2: string;
            FilterLookupId3: string;
            FilterLookupId4: string;
            FilterLookupId5: string;
            FilterLookupId6: string;
            FilterLookupId7: string;
            FilterLookupId8: string;
            FilterLookupId9: string;
            FilterLookupId10: string;
            FilterOp: string;
            FilterOp1: string;
            FilterOp2: string;
            FilterOp3: string;
            FilterOp4: string;
            FilterOp5: string;
            FilterOp6: string;
            FilterOp7: string;
            FilterOp8: string;
            FilterOp9: string;
            FilterOp10: string;
            FilterValue: string;
            FilterValue1: string;
            FilterValue2: string;
            FilterValue3: string;
            FilterValue4: string;
            FilterValue5: string;
            FilterValue6: string;
            FilterValue7: string;
            FilterValue8: string;
            FilterValue9: string;
            FilterValue10: string;
            FilterValues: string;
            FilterValues1: string;
            FilterValues2: string;
            FilterValues3: string;
            FilterValues4: string;
            FilterValues5: string;
            FilterValues6: string;
            FilterValues7: string;
            FilterValues8: string;
            FilterValues9: string;
            FilterValues10: string;
            GroupString: string;
            HasOverrideSelectCommand: string;
            ID: string;
            InplaceFullListSearch: string;
            InplaceSearchQuery: string;
            IsCSR: string;
            IsGroupRender: string;
            IsXslView: string;
            ListViewPageUrl: string;
            OverrideScope: string;
            OverrideSelectCommand: string;
            PageFirstRow: string;
            PageLastRow: string;
            RootFolder: string;
            SortDir: string;
            SortDir1: string;
            SortDir2: string;
            SortDir3: string;
            SortDir4: string;
            SortDir5: string;
            SortDir6: string;
            SortDir7: string;
            SortDir8: string;
            SortDir9: string;
            SortDir10: string;
            SortField: string;
            SortField1: string;
            SortField2: string;
            SortField3: string;
            SortField4: string;
            SortField5: string;
            SortField6: string;
            SortField7: string;
            SortField8: string;
            SortField9: string;
            SortField10: string;
            SortFields: string;
            SortFieldValues: string;
            View: string;
            ViewCount: string;
            ViewId: string;
            WebPartId: string;
    }
    /**
        * Render List Data Parameters
        */
    export interface RenderListDataParameters {
            AllowMultipleValueFilterForTaxonomyFields: boolean;
            DatesInUtc: boolean;
            ExpandGroups: boolean;
            FirstGroupOnly: boolean;
            FolderServerRelativeUrl: string;
            OverrideViewXml: string;
            Paging: string;
            RenderingOptions: number;
            ViewXml: string;
    }
    /**
        * Render List Filter Data Parameters
        */
    export interface RenderListFilterDataParameters {
            ExcludeFieldFilteringHtml: boolean;
            FieldInternalName: string;
            OverrideScope: string;
            ProcessQStringToCAML: string;
            ViewId: string;
    }
    /**
        * Resource Path
        */
    export interface ResourcePath {
            DecodedUrl: string;
    }
    /**
        * Role Definition Creation Information
        */
    export interface RoleDefinitionCreationInformation {
            BasePermissions: BasePermissions;
            Description: string;
            Name: string;
            Order: number;
    }
    /**
        * Search Request
        */
    export interface SearchRequest {
            BlockDedupeMode?: number;
            /** A Boolean value that specifies whether to perform result type processing for the query. */
            BypassResultTypes?: boolean;
            /** The type of the client that issued the query. */
            ClientType?: string;
            /** The managed properties that are used to determine how to collapse individual search  Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications. Within a single collapse specification, results are collapsed if their properties match all individual properties in the collapse specification. */
            CollapseSpecification?: string;
            /** The locale ID (LCID) for the query (see Locale IDs Assigned by Microsoft). */
            Culture?: number;
            /** The preferred number of characters to display in the hit-highlighted summary generated for a search result. */
            DesiredSnippetLength?: number;
            /** A Boolean value that specifies whether the query uses the FAST Query Language (FQL). */
            EnableFql?: boolean;
            /** A Boolean value that specifies whether the result tables that are returned for the result block are mixed with the result tables that are returned for the original query. */
            EnableInterleaving?: boolean;
            /** A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also. */
            EnableNicknames?: boolean;
            /** A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches. */
            EnablePhonetic?: boolean;
            /** A Boolean value that specifies whether the hit highlighted properties can be ordered. */
            EnableOrderingHitHighlightedProperty?: boolean;
            /** A Boolean value that specifies whether to enable query rules for the query. */
            EnableQueryRules?: boolean;
            /** A Boolean value that specifies whether to sort search  */
            EnableSorting?: boolean;
            /** A Boolean value that specifies whether stemming is enabled. */
            EnableStemming?: boolean;
            /** A Boolean value that specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table. A block rank log contains the textual information on the block score and the documents that were de-duplicated. */
            GenerateBlockRankLog?: boolean;
            /** The additional query terms to append to the query. */
            HiddenConstraints?: string;
            /** The number of properties to show hit highlighting for in the search  */
            HitHighlightedMultivaluePropertyLimit?: number;
            /** The properties to highlight in the search result summary when the property value matches the search terms entered by the user. */
            HithighlightedProperties?: Types.SP.Results.String;
            /** The maximum number of characters to display in the hit-highlighted summary generated for a search result. */
            MaxSnippetLength?: number;
            QLSQuerySession?: string;
            /** The GUID for the user who submitted the search query. */
            PersonalizationData?: string;
            /** A Boolean value that specifies whether to return best bet results for the query. */
            ProcessBestBets?: boolean;
            /** A Boolean value that specifies whether to return personal favorites with the search  */
            ProcessPersonalFavorites?: boolean;
            /** Additional properties for the query. */
            Properties?: KeyValue;
            /** Custom tags that identify the query. You can specify multiple query tags, separated by semicolons. */
            QueryTag?: string;
            /** A string that contains the text that replaces the query text, as part of a query transform. */
            QueryTemplate?: string;
            /** The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries. */
            QueryTemplatePropertiesUrl?: string;
            /** A string that contains the text for the search query */
            Querytext: string;
            /** The ID of the ranking model to use for the query. */
            RankingModelId?: string;
            /** The set of refinement filters used when issuing a refinement query. For GET requests, the RefinementFilters parameter is specified as an FQL filter. For POST requests, the RefinementFilters parameter is specified as an array of FQL filters. */
            RefinementFilters?: Types.SP.Results.String;
            /** The set of refiners to return in a search result. */
            Refiners?: string;
            /** Special rules for reordering search  These rules can specify that documents matching certain conditions are ranked higher or lower in the  */
            ReorderingRules?: Array<ReorderingRulesCreationInformation>;
            /** The URL for the search results page. */
            ResultsUrl?: string;
            /** The maximum number of rows overall that are returned in the search  Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall. */
            RowLimit?: number;
            /** The maximum number of rows to return per page. Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page, and is used primarily when you want to implement paging for search  */
            RowsPerPage?: number;
            /** The managed properties to return in the search  To return a managed property, set the property's retrievable flag to true in the search schema. */
            SelectProperties?: Types.SP.Results.String;
            /** The list of properties by which the search results are ordered. */
            SortList?: Types.SP.Results.Object;
            /** The result source ID to use for executing the search query. */
            SourceId?: string;
            /** The first row that is included in the search results that are returned. You use this parameter when you want to implement paging for search  */
            StartRow?: number;
            /** The number of characters to display in the result summary for a search result. */
            SummaryLength?: number;
            /** The amount of time in milliseconds before the query request times out. The default value is 30000. */
            Timeout?: number;
            TimeZoneId?: number;
            TotalRowsExactMinimum?: number;
            /** A Boolean value that specifies whether duplicate items are removed from the  */
            TrimDuplicates?: boolean;
            TrimDuplicatesIncludeId?: boolean;
            /** The locale identifier (LCID) of the user export interface (see Locale IDs Assigned by Microsoft). */
            UIlanguage?: number;
            UseOLSQuery?: number;
    }
    /**
        * Search Result
        */
    export interface SearchResult {
            ElapsedTime?: number;
            PrimaryQueryResult: QueryResult;
            Properties: KeyValue;
            SecondaryQueryResults: QueryResult;
            SpellingSuggestion: string;
            TriggeredRules?: String;
    }
    /**
        * Search Suggestion
        */
    export interface SearchSuggestion {
            ClientType?: string;
            /** The locale ID (LCID) for the query (see Locale IDs Assigned by Microsoft). */
            Culture?: number;
            /** A Boolean value that specifies whether stemming is enabled. */
            EnableStemming?: boolean;
            /** A Boolean value that specifies whether to turn on query rules for this query. */
            EnableQueryRules?: boolean;
            /** A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. */
            fCapitalizeFirstLetters?: boolean;
            /** A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. */
            fHitHighlighting?: boolean;
            /** A Boolean value that specifies whether to return query suggestions for prefix matches. */
            fPrefixMatchAllTerms?: boolean;
            /** A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. */
            fPreQuerySuggestions?: boolean;
            /** The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5. */
            iNumberOfQuerySuggestions?: number;
            /** The number of personal results to retrieve. Must be greater than zero (0). The default value is 5. */
            iNumberOfResultSuggestions?: number;
            OLSQuerySession?: string;
            /** A string that contains the text for the search query */
            Querytext: string;
            /** A Boolean value that specifies whether to include people names in the returned query suggestions. */
            ShowPeopleNameSuggestions?: boolean;
            SourceId?: string;
            UseOLSQuery?: boolean;
    }
    /**
        * Shared User
        */
    export interface SharedWithUser {
            Email: string;
            Name: string;
    }
    /**
        * Shared User Collection
        */
    export interface SharedWithUserCollection {
            Items: SharedWithUser;
    }
    /**
        * Sharing Link Information
        */
    export interface SharingLinkInfo {
            Expiration: string;
            IsActive: boolean;
            LinkKind: number;
            Url: string;
    }
    /**
        * Simple Data Row
        */
    export interface SimpleDataRow {
            Cells: Types.SP.Results.DataRow;
    }
    /**
        * Simple Data Table
        */
    export interface SimpleDataTable {
            Rows: KeyValue;
    }
    /**
        * Social Actor
        */
    export interface SocialActor {
            AccountName: string;
            ActorType?: number;
            CanFollow?: boolean;
            ContentUri: string;
            EmailAddress: string;
            FollowedContentUri: string;
            Id: string;
            ImageUri: string;
            IsFollowed?: boolean;
            LibraryUri: string;
            Name: string;
            PersonSiteUri: string;
            Status?: number;
            StatusText: string;
            TagGuid?: string;
            Title: string;
            Uri: string;
    }
    /**
        * Social Attachment
        */
    export interface SocialAttachment {
            AttachmentKind?: number;
            ClickAction: SocialAttachmentAction;
            ContentUri: string;
            Description: string;
            Height?: number;
            Length?: number;
            Name: string;
            PreviewHeight?: number;
            PreviewUri: string;
            PreviewWidth?: number;
            Uri: string;
            Width?: number;
    }
    /**
        * Social Attachment Action
        */
    export interface SocialAttachmentAction {
            ActionKind?: number;
            ActionUri: string;
            Height?: number;
            Width?: number;
    }
    /**
        * Social Data Item
        */
    export interface SocialDataItem {
            AccountName?: string;
            ItemType?: string;
            Text: string;
            Uri: string;
    }
    /**
        * Social Data Overlay
        */
    export interface SocialDataOverlay {
            ActorIndexes?: Number;
            Index?: number;
            Length?: number;
            LinkUri: string;
            OverlayType?: number;
    }
    /**
        * Social Exception Details
        */
    export interface SocialExceptionDetails {
            InternalErrorCode?: number;
            InternalMessage: string;
            InternalStackTrace: string;
            InternalTypeName: string;
            Status?: number;
    }
    /**
        * Social Feed Options
        */
    export interface SocialFeedOptions {
            MaxThreadCount?: number;
            NewerThan?: string;
            OlderThan?: string;
            SortOrder?: number;
    }
    /**
        * Social Feed
        */
    export interface SocialFeed {
            Attributes?: number;
            NewestProcessed?: string;
            OldestProcessed?: string;
            Threads: SocialThread;
            UnreadMentionCount?: number;
    }
    /**
        * Social Feed Manager
        */
    export interface SocialFeedManager {
            Owner: SocialActor;
            PersonalSitePortalUri?: string;
    }
    /**
        * Social Following Manager
        */
    export interface SocialFollowingManager {
            FollowedDocumentsUri?: string;
            FollowedSitesUri: string;
    }
    /**
        * Social Link
        */
    export interface SocialLink {
            Text: string;
            Uri: string;
    }
    /**
        * Social Post
        */
    export interface SocialPost {
            Attachment: SocialAttachment;
            Attributes?: number;
            AuthorIndex?: number;
            CreatedTime?: string;
            Id?: string;
            LikerInfo?: SocialPostActorInfo;
            ModifiedTime?: string;
            Overlays: SocialDataOverlay;
            PostType?: number;
            PreferredImageUri: string;
            Source: SocialLink;
            Text: string;
    }
    /**
        * Social Post Actor Info
        */
    export interface SocialPostActorInfo {
            IncludesCurrentUser?: boolean;
            Indexes?: Number;
            TotalCount?: number;
    }
    /**
        * Social Post Creation Data
        */
    export interface SocialPostCreationData {
            Attachment?: SocialAttachment;
            ContentItems?: SocialDataItem;
            ContentText: string;
            DefinitionData?: SocialPostDefinitionData;
            SecurityUris?: String;
            Source?: SocialLink;
            UpdateStatusText?: boolean;
    }
    /**
        * Social Post Definition Data
        */
    export interface SocialPostDefinitionData {
            Items: SocialPostDefinitionDataItem;
            Name: string;
    }
    /**
        * Social Post Definition Data Item
        */
    export interface SocialPostDefinitionDataItem {
            AccountName: string;
            ItemType?: number;
            PlaceholderName: string;
            TagGuid?: string;
            Text: string;
            Uri: string;
    }
    /**
        * Social Post Reference
        */
    export interface SocialPostReference {
            Digest: SocialThread;
            Post: SocialPost;
            ThreadId: string;
            ThreadOwnerIndex?: number;
    }
    /**
        * Social Rest Following Manager
        */
    export interface SocialRestFollowingManager {
            FollowedDocumentsUri?: string;
            FollowedSitesUri: string;
            MyFollowedDocumentsUri: string;
            MyFollowedSitesUri: string;
            SocialActor: SocialActor;
    }
    /**
        * Social Rest Post Creation Data
        */
    export interface SocialRestPostCreationData {
            ID: string;
            creationData: SocialPostCreationData;
    }
    /**
        * Social Thread
        */
    export interface SocialThread {
            Actors: SocialActor;
            Attributes?: number;
            Id: string;
            OwnerIndex?: number;
            PermaLink: string;
            PostReference: SocialPostReference;
            Replies: SocialPost;
            RootPost: SocialPost;
            Status?: number;
            ThreadType?: number;
            TotalReplyCount?: number;
    }
    /**
        * Sort
        */
    export interface Sort {
            Direction?: number;
            Property: string;
    }
    /**
        * SP Invitation Creation Result
        */
    export interface SPInvitationCreationResult {
            Email: string;
            InvitationLink: string;
            Lcid: number;
    }
    /**
        * Special Term Result
        */
    export interface SpecialTermResult {
            Description: string;
            IsVisualBestBet?: boolean;
            PiSearchResultId: string;
            RenderTemplateId: string;
            Title: string;
            Url: string;
    }
    /**
        * Special Term Results
        */
    export interface SpecialTermResults {
            GroupTemplateId: string;
            ItemTemplateId: string;
            Properties: KeyValue;
            ResultTitle: string;
            ResultTitleUrl: string;
    }
    /**
        * String Collection
        */
    export interface StringCollection {
            Id4a81de82eeb94d6080ea5bf63e27023a?: string;
            Items: String;
    }
    /**
        * Subweb Query
        */
    export interface SubwebQuery {
            ConfigurationFilter: number;
            WebTemplateFilter: number;
    }
    /**
        * Tenant App Information
        */
    export interface TenantAppInformation {
            AppPrincipalId: string;
            AppWebFullUrl: string;
            CreationTime: string;
            IconAbsoluteUrl: string;
            IconFallbackAbsoluteUrl: string;
            Id: string;
            LaunchUrl: string;
            PackageFingerprint: any;
            ProductId: string;
            RemoteAppUrl: string;
            Status: number;
            Title: string;
    }
    /**
        * Time Zone Information
        */
    export interface TimeZoneInformation {
            Bias: number;
            DaylightBias: number;
            StandardBias: number;
    }
    /**
        * Upgrade Info
        */
    export interface UpgradeInfo {
            ErrorFile: string;
            Errors: number;
            LastUpdated: string;
            LogFile: string;
            RequestDate: string;
            RetryCount: number;
            StartTime: string;
            Status: number;
            UpgradeType: number;
            Warnings: number;
    }
    /**
        * Usage Information
        */
    export interface UsageInfo {
            Bandwidth: number;
            DiscussionStorage: number;
            Hits: number;
            Storage: number;
            StoragePercentageUsed: number;
            Visits: number;
    }
    /**
        * User Creation Information
        */
    export interface UserCreationInformation {
            Email?: string;
            LoginName: string;
            Title?: string;
    }
    /**
        * User Custom Action Information
        */
    export interface UserCustomActionCreationInformation {
            /** A value that specifies an implementation specific XML fragment that determines user export interface properties of the custom action. */
            CommandUIExtension?: string;
            /** The description of the custom action. */
            Description?: string;
            /** A value that specifies an implementation-specific value that determines the position of the custom action in the page. */
            Group?: string;
            /** The URL of the image associated with the custom action. */
            ImageUrl?: string;
            /** The location of the custom action. */
            Location?: string;
            /** The name of the custom action. */
            Name: string;
            /** The value that specifies the identifier of the object associated with the custom action. */
            RegistrationId?: string;
            /** The value that specifies the type of object associated with the custom action. Represents an SP.UserCustomActionRegistrationType value. */
            RegistrationType?: number;
            /** The value that specifies the permissions needed for the custom action. */
            Rights?: any;
            /** The value that specifies the ECMAScript to be executed when the custom action is performed. */
            ScriptBlock?: string;
            /** A value that specifies the URI of a file which contains the ECMAScript to execute on the page. */
            ScriptSrc?: string;
            /** The value that specifies an implementation-specific value that determines the order of the custom action that appears on the page. */
            Sequence?: number;
            /** The display title of the custom action. */
            Title?: string;
            /** The URL, URI, or ECMAScript (JScript, JavaScript) function associated with the action. */
            Url?: string;
    }
    /**
        * User Id Information
        */
    export interface UserIdInfo {
            NameId: string;
            NameIdIssuer: string;
    }
    /**
        * View Creation Information
        */
    export interface ViewCreationInformation {
            /** The relative url to the jslink */
            JSLink?: string;
            /** The new list view is a paged view. */
            Paged?: boolean;
            /** The new list view is a personal view. If the value is false, the new list view is a public view. */
            PersonalView?: boolean;
            /** The maximum number of list items that the new list view displays on a visual page of the list view. */
            RowLimit?: number;
            /** Option to set as default view. */
            SetAsDefaultView?: boolean;
            /** The name of the view. */
            Title: string;
            /** The query for the new list view. */
            ViewQuery?: string;
            /** The view type. */
            ViewTypeKind?: number;
    }
    /**
        * Visualization
        */
    export interface Visualization {
            DefaultScreen: VisualizationStyleSet;
            DetailView: VisualizationStyleSet;
            MediumScreen: VisualizationStyleSet;
            SmallScreen: VisualizationStyleSet;
            VisualizationAppInfo: VisualizationAppInfo;
            VisualizationType: number;
    }
    /**
        * Visualization App Information
        */
    export interface VisualizationAppInfo {
            DesignUri: string;
            Id: string;
            RuntimeUri: string;
    }
    /**
        * Visualization Field
        */
    export interface VisualizationField {
            InternalName: string;
            Style: string;
    }
    /**
        * Visualization Style Set
        */
    export interface VisualizationStyleSet {
            AspectRatio: string;
            BackgroundColor: string;
            Fields: VisualizationField;
            MinHeight: string;
    }
    /**
        * Web Creation Information
        */
    export interface WebCreationInformation {
            /** The description of the new site. */
            Description?: string;
            /** The locale ID that specifies the language of the new site. */
            Language?: number;
            /** A value that specifies the title of the new site. */
            Title: string;
            /** The URL leaf name of the new site. The URL must not contain the following:
                    The characters ~, ", #, %, &, *, :, <, >, ?, \, {, |, or }
                    The string \x7f
                    Consecutive . or / characters
                    Starting ., /, or _ characters
                    Ending . or / characters
             */
            Url: string;
            /** A value that specifies whether the new site will inherit permissions from its parent site. */
            UseSamePermissionsAsParentSite?: boolean;
            /** A value that specifies the name of the site template to be used for creating the new site. Use the GetAvailableWebTemplates method to get the names of available web templates on the site. */
            WebTemplate: string;
    }
    /**
        * Web Information Creation Information
        */
    export interface WebInfoCreationInformation {
            Description?: string;
            Language?: number;
            Title: string;
            Url: string;
            UseUniquePermissions?: boolean;
            WebTemplate: string;
    }
    /**
        * Web Request Information
        */
    export interface WebRequestInfo {
            Body: string;
            Headers: KeyValue;
            StatusCode: number;
    }
    /**
        * Web Response Information
        */
    export interface WebResponseInfo {
            Body: string;
            Headers: KeyValue;
            StatusCode: number;
    }
    /**
        * Xml Schema Field Creation Information
        */
    export interface XmlSchemaFieldCreationInformation {
            Options: number;
            SchemaXml: string;
    }
}

declare module 'gd-sprest/mapper/types/contentType' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFieldResult, IFields, IFieldLink, IFieldLinks, IListResult } from "gd-sprest/mapper/types";
    /**
        * Content Type Creation Information
        */
    export interface IContentTypeCreationInformation {
            /** The content type description. */
            Description?: string;
            /** The content type group. */
            Group?: string;
            /** The content type id. */
            Id?: string;
            /** The content type name. */
            Name: string;
    }
    /**
        * Content Type Methods
        */
    export interface IContentTypeMethods {
            /**
                * Deletes the content type.
                */
            delete(): IBase;
            /**
                * Updates it's properties.
                * @param data - The content type properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * Content Type Properties
        */
    export interface IContentTypeProps {
            /** Gets or sets a description of the content type. */
            Description: string;
            /** Gets or sets a value that specifies the name of a custom display form template to use for list items that have been assigned the content type. */
            DisplayFormTemplateName: string;
            /** Gets or sets a value that specifies the URL of a custom display form to use for list items that have been assigned the content type. */
            DisplayFormUrl: string;
            /** Gets or sets a value that specifies the file path to the document template used for a new list item that has been assigned the content type. */
            DocumentTemplate: string;
            /** Gets a value that specifies the URL of the document template assigned to the content type. */
            DocumentTemplateUrl: string;
            /** Gets or sets a value that specifies the name of a custom edit form template to use for list items that have been assigned the content type. */
            EditFormTemplateName: string;
            /** Gets or sets a value that specifies the URL of a custom edit form to use for list items that have been assigned the content type. */
            EditFormUrl: string;
            /** Gets or sets a value that specifies the content type group for the content type. */
            Group: string;
            /** Gets or sets a value that specifies whether the content type is unavailable for creation or usage directly from a user export interface. */
            Hidden: boolean;
            /** Gets a value that specifies an identifier for the content type. */
            Id: Types.SP.IStringValue;
            /** Gets or sets the JSLink for the content type custom form template. The JSLink property is not supported on Survey or Events lists. A SharePoint calendar is an Events list. */
            JSlink: string;
            MobileDisplayFormUrl: string;
            MobileEditFormUrl: string;
            MobileNewFormUrl: string;
            /** Gets or sets a value that specifies the name of the content type. */
            Name: string;
            /** Gets or sets a value that specifies the name of the content type. */
            NewFormTemplateName: string;
            /** Gets or sets a value that specifies the name of the content type. */
            NewFormUrl: string;
            /** Gets or sets a value that specifies whether changes to the content type properties are denied. */
            Readonly: boolean;
            /** Gets a value that specifies the XML Schema representing the content type. */
            SchemaXml: string;
            /** Gets a non-localized version of the XML schema that defines the content type. */
            SchemaXmlWithResourceTokens: string;
            /** Gets a value that specifies a server-relative path to the content type scope of the content type. */
            Scope: string;
            /** Gets or sets whether the content type can be modified. */
            Sealed: boolean;
            /** A string representation of the value of the Id. */
            StringId: string;
    }
    /**
        * Content Type Query Properties
        */
    export interface IContentTypeQueryProps {
            DescriptionResource(): IBase;
            /**
                * Gets the column (also known as field) references in the content type.
                */
            FieldLinks(): IFieldLinks;
            /**
                * Gets the column (also known as field) reference in the content type.
                * @param guid - The guid of the field link.
                */
            FieldLinks(guid: string): IBase<IFieldLink>;
            /**
                * Gets the fields for the content type.
                */
            Fields(): IFields;
            /**
                * Gets the field for the content type.
                * @param internalNameOrTitle - The internal name or title of the field.
                */
            Fields(internalNameOrTitle: string): IFields;
            NameResource(): IBase;
            /** Gets the parent content type of the content type. */
            Parent(): IContentTypeMethods;
            /**
                * Gets a value that specifies the collection of workflow associations for the content type.
                */
            WorkflowAssociations(): IBase;
    }
    /**
        * Content Type Query Result
        */
    export interface IContentTypeQueryResult extends IContentTypeMethods, IContentTypeProps {
            DescriptionResource: Types.SP.IResourcePath;
            /**
                * Gets the column (also known as field) references in the content type.
                */
            FieldLinks: Types.SP.IResults<IFieldLink>;
            /**
                * Gets the fields for the content type.
                */
            Fields: Types.SP.IResults<IFieldResult>;
            NameResource: Types.SP.IResourcePath;
            /** Gets the parent content type of the content type. */
            Parent: IListResult | Types.SP.IWebResult;
            /**
                * Gets a value that specifies the collection of workflow associations for the content type.
                */
            WorkflowAssociations: Types.SP.IResults<any>;
    }
    /**
        * Content Type Result
        */
    export interface IContentTypeResult extends IContentTypeMethods, IContentTypeProps, IContentTypeQueryProps, IBase<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
    /**
        * Content Type
        */
    export interface IContentType extends IContentTypeMethods, IContentTypeQueryProps, IBase<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/contentTypes' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IContentType, IContentTypeCreationInformation, IContentTypeQueryResult, IContentTypeResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IContentTypesMethods {
            /**
                * Adds a content type to the collection.
                * @param parameters - The content type creation information.
                */
            add(parameters: IContentTypeCreationInformation): IBase<IContentType, IContentTypeResult>;
            /**
                * Adds an existing content type to this collection.
                * @param contentTypeId - The content type id to add.
                */
            addAvailableContentType(contentTypeId: any): IBase<IContentType, IContentTypeResult>;
            /**
                * Gets a content type by id.
                * @param id - The content type id.
                */
            getById(id: any): IContentType & IBase<IContentType, IContentTypeResult, IContentTypeQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IContentTypes, IContentTypeResults>;
    }
    /**
        * Content Types
        */
    export interface IContentTypes extends IContentTypesMethods, IBaseCollection<IContentType, IContentTypeResult, IContentTypeQueryResult> {
    }
    /**
        * Content Type Results
        */
    export interface IContentTypeResults extends IContentTypesMethods, IBaseCollection<IContentTypeResult, IContentTypeResult, IContentTypeQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/eventReceiver' {
    import { IBase } from "gd-sprest/utils/types";
    /**
        * Event Receiver Definition Creation Information
        */
    export interface IEventReceiverDefinitionCreationInformation {
            /** The event receiver type. */
            EventType: number;
            /** The strong name of the assembly that is used for receiving events. */
            ReceiverAssembly?: string;
            /** A string that represents the class that is used for receiving events. */
            ReceiverClass?: string;
            /** The name of the event receiver. */
            ReceiverName: string;
            /** The URL of a web service that is used for receiving events. */
            ReceiverUrl?: string;
            /** An integer that represents the relative sequence of the event. */
            SequenceNumber?: number;
            /** The execution synchronization of the event receiver. */
            Synchronization?: number;
    }
    /**
        * Event Receiver Methods
        */
    export interface IEventReceiverMethods {
            /**
                * Deletes the event receiver.
                */
            delete(): IBase;
            /**
                * Updates it's properties.
                * @param data - The field properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * Event Receiver Properties
        */
    export interface IEventReceiverProps {
            /** Specifies the type of event. */
            EventType: number;
            /** The strong name of the assembly that is used for receiving events. */
            ReceiverAssembly?: string;
            /** A string that represents the class that is used for receiving events. */
            ReceiverClass?: string;
            /** The unique identifier of the event receiver. */
            ReceiverId?: string;
            /** The name of the event receiver. */
            ReceiverName: string;
            /** The URL of a web service that is used for receiving events. */
            ReceiverUrl?: string;
            /** An integer that represents the relative sequence of the event. */
            SequenceNumber?: number;
            /** The execution synchronization of the event receiver. */
            Synchronization?: number;
    }
    /**
        * Event Receiver Query Properties
        */
    export interface IEventReceiverQueryProps {
    }
    /**
        * Event Receiver Query Result
        */
    export interface IEventReceiverQueryResult extends IEventReceiverMethods, IEventReceiverProps {
    }
    /**
        * Event Receiver Result
        */
    export interface IEventReceiverResult extends IEventReceiverMethods, IEventReceiverProps, IEventReceiverQueryProps, IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
    /**
        * Event Receiver
        */
    export interface IEventReceiver extends IEventReceiverMethods, IEventReceiverQueryProps, IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/eventReceivers' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IEventReceiver, IEventReceiverDefinitionCreationInformation, IEventReceiverQueryResult, IEventReceiverResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IEventReceiversMethods {
            /**
                * Adds an event receiver to the collection.
                * @param parameters - The event receiver definition creation information.
                */
            add(parameters: IEventReceiverDefinitionCreationInformation): IBase<IEventReceiver, IEventReceiverResult>;
            /**
                * Gets an event receiver in the collection.
                * @param id - The id of the event receiver.
                */
            getById(id: string): IEventReceiver & IBase<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IEventReceivers, IEventReceiverResults>;
    }
    /**
        * Event Receivers
        */
    export interface IEventReceivers extends IEventReceiversMethods, IBaseCollection<IEventReceiver, IEventReceiverResult, IEventReceiverQueryResult> {
    }
    /**
        * Event Receiver Results
        */
    export interface IEventReceiverResults extends IEventReceiversMethods, IBaseCollection<IEventReceiverResult, IEventReceiverResult, IEventReceiverQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/field' {
    import { IBase } from "gd-sprest/utils/types";
    import { IResourcePath } from "gd-sprest/mapper/types";
    /**
        * Field Creation Information
        */
    export interface IFieldCreationInformation {
            /** The choices. */
            Choices?: {
                    results: Array<string>;
            };
            /** The field type. */
            FieldTypeKind: number;
            /** Indicates whether only the first eight characters are used for the field name. */
            IsCompactName?: boolean;
            /** The name of the source lookup field. */
            LookupFieldName?: string;
            /** The ID of the target list for the source lookup field. */
            LookupListId?: any;
            /** The ID of the site that contains the list that is the source for the lookup field value. */
            LookupWebId?: any;
            /** A value that specifies whether the field requires a value. */
            Required?: boolean;
            /** A value that specifies the display name of the field. */
            Title: string;
    }
    /**
        * Field Methods
        */
    export interface IFieldMethods {
            /**
                * Deletes the field.
                */
            delete(): IBase;
            /**
                * Sets the value of the ShowInDisplayForm property for this field.
                * @param showInForm - Flag to show the field in the display form.
                */
            setShowInDisplayForm(showInForm: any): IBase;
            /**
                * Sets the value of the ShowInEditForm property for this field.
                * @param showInForm - Flag to show the field in the display form.
                */
            setShowInEditForm(showInForm: any): IBase;
            /**
                * Sets the value of the ShowInNewForm property for this field.
                * @param showInForm - Flag to show the field in the display form.
                */
            setShowInNewForm(showInForm: any): IBase;
            /**
                * Updates it's properties.
                * @param data - The field properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * Field Properties
        */
    export interface IFieldProps {
            AutoIndexed: boolean;
            /** Gets a value that specifies whether the field can be deleted. */
            CanBeDeleted: boolean;
            /** Gets or sets a value that specifies the default value for the field. */
            DefaultValue: string;
            /** Gets or sets a value that specifies the description of the field. */
            Description: string;
            /** Gets or sets a value that specifies the reading order of the field. */
            Direction: string;
            /** Gets or sets a value that specifies whether to require unique field values in a list or library column. */
            EnforceUniqueValues: boolean;
            /** Gets the name of the entity property for the list item entity that uses this field. */
            EntityPropertyName: string;
            /** Gets or sets a value that specifies the type of the field. Represents a FieldType value. See FieldType in the .NET client object model reference for a list of field type values. */
            FieldTypeKind: number;
            /** Gets a value that specifies whether list items in the list can be filtered by the field value. */
            Filterable: boolean;
            /** Gets a Boolean value that indicates whether the field derives from a base field type. */
            FromBaseType: boolean;
            /** Gets or sets a value that specifies the field group. */
            Group: string;
            /** Gets or sets a value that specifies whether the field is hidden in list views and list forms. */
            Hidden: boolean;
            /** Gets a value that specifies the field identifier. */
            Id: string;
            /** Gets or sets a Boolean value that specifies whether the field is indexed. */
            Indexed: boolean;
            /** Gets a value that specifies the field internal name. */
            InternalName: string;
            /** Gets or sets the name of an external JS file containing any client rendering logic for fields of this type. */
            JSLink: string;
            /** Gets or sets a value that specifies whether the value of the field is read-only. */
            ReadOnlyField: boolean;
            /** Gets or sets a value that specifies whether the field requires a value. */
            Required: boolean;
            /** Gets or sets a value that specifies the XML schema that defines the field. */
            SchemaXml: string;
            /** Gets a value that specifies the server-relative URL of the list or the site to which the field belongs. */
            Scope: string;
            /** Gets a value that specifies whether properties on the field cannot be changed and whether the field cannot be deleted. */
            Sealed: boolean;
            /** Gets a value that specifies whether list items in the list can be sorted by the field value. */
            Sortable: boolean;
            /** Gets or sets a value that specifies a customizable identifier of the field. */
            StaticName: string;
            /** Gets or sets value that specifies the display name of the field. */
            Title: string;
            /** Gets or sets a value that specifies the type of the field. */
            TypeAsString: string;
            /** Gets a value that specifies the display name for the type of the field. */
            TypeDisplayName: string;
            /** Gets a value that specifies the description for the type of the field. */
            TypeShortDescription: string;
            /** Gets or sets a value that specifies the data validation criteria for the value of the field. */
            ValidationFormula: string;
            /** Gets or sets a value that specifies the error message returned when data validation fails for the field. */
            ValidationMessage: string;
    }
    /**
        * Field Query Properties
        */
    export interface IFieldQueryProps {
            DescriptionResource(): IBase<IResourcePath>;
            TitleResource(): IBase<IResourcePath>;
    }
    /**
        * Field Query Result
        */
    export interface IFieldQueryResult extends IFieldMethods, IFieldProps {
            DescriptionResource: IResourcePath;
            TitleResource: IResourcePath;
    }
    /**
        * Field Result
        */
    export interface IFieldResult extends IFieldMethods, IFieldProps, IFieldQueryProps, IBase<IField, IFieldResult, IFieldQueryResult> {
    }
    /**
        * Field
        */
    export interface IField extends IFieldMethods, IFieldQueryProps, IBase<IField, IFieldResult, IFieldQueryResult> {
    }
    /**
        * Base Choice Field
        */
    export interface IFieldBaseChoice extends IFieldResult {
            /** A value that specifies values that are available for selection in the field. */
            Choices: {
                    results: Array<string>;
            };
            /** A value that specifies whether the field can accept values other than those specified by the Choices property. */
            FillInChoice: boolean;
            /** A value that specifies the internal values corresponding to Choices. */
            Mappings: string;
    }
    /**
        * Calculated Field
        */
    export interface IFieldCalculated extends IFieldResult {
            /** The date and time format that is displayed in the field. */
            DateFormat: number;
            /** A value that specifies the formula for the field. */
            Formula: string;
            /** A value that specifies the output format for the field. */
            OutputType: number;
    }
    /**
        * Choice Field
        */
    export interface IFieldChoice extends IFieldBaseChoice {
            /** Determines whether to display the choice field as option buttons (also known as "radio buttons") or as a drop-down list. */
            EditFormat: number;
    }
    /**
        * Computed Field
        */
    export interface IFieldComputed extends IFieldResult {
            /** A value that specifies whether a lookup field can reference the field. */
            EnableLookup: boolean;
    }
    /**
        * Currency Field
        */
    export interface IFieldCurrency extends IFieldNumber {
            /** A value that specifies the language code identifier (LCID) used to format the value of the field. */
            CurrencyLocaleId: number;
    }
    /**
        * Date/Time Field
        */
    export interface IFieldDateTime extends IFieldResult {
            /** A value that specifies the calendar type of the field. */
            DateTimeCalendarType: number;
            /** The format of the date and time that is displayed in the field. */
            DisplayFormat: number;
            /** Represents a date and time friendly format. */
            FriendlyDisplayFormat: number;
    }
    /**
        * Lookup Field
        */
    export interface IFieldLookup extends IFieldResult {
            /** A value that specifies whether the lookup field allows multiple values. You cannot set a deletion constraint on a lookup field that allows multiple values. */
            AllowMultipleValues: boolean;
            /** Flag to determine if this is a dependent lookup field. */
            IsDependentLookup: boolean;
            /** A value that specifies whether this lookup field is returned by SP.List.getRelatedFields from the list being looked up to. Always returns false if the field represents a secondary column in a multiple-column lookup. Secondary columns are not discoverable from the source list. */
            IsRelationship: boolean;
            /** A value that specifies the internal field name of the field used as the lookup values. */
            LookupField: string;
            /** A value that specifies the list identifier of the list that contains the field to use as the lookup values. */
            LookupList: string;
            /** The ID of the Web site that contains the list that is the source of this field's value. */
            LookupWebId: string;
            /** A value that specifies the primary lookup field identifier if this is a dependent lookup field. Otherwise, it is an empty string. */
            PrimaryFieldId: string;
            /** A value that specifies the delete behavior of the lookup field. */
            RelationshipDeleteBehavior: number;
    }
    /**
        * Managed Metadata Field
        */
    export interface IFieldManagedMetadata extends IFieldLookup {
            /** The root term */
            AnchorId: string;
            /** Flag to determine if the anchor is valid. */
            IsAnchorValid: boolean;
            /** Flag to determine if this is a keyword. */
            IsKeyword: boolean;
            /** Flag to determine if the path is rendered. */
            IsPathRendered: boolean;
            /** Flag to determine if the term set is valid. */
            IsTermSetValid: boolean;
            /** A valid that specifies if the term is pinned to filters pane. */
            PinnedToFiltersPane: boolean;
            /** A value that specifies if the term is shown in the filters pane. */
            ShowInFiltersPane: number;
            /** The term store id. */
            SspId: string;
            /** The term set id. */
            TermSetId: string;
            /** Flag to determine if the field was created by the user. */
            UserCreated: boolean;
    }
    /**
        * Multi-Choice Field
        */
    export interface IFieldMultiChoice extends IFieldBaseChoice {
    }
    /**
        * Note Field
        */
    export interface IFieldNote extends IFieldResult {
            /** A value that specifies whether a hyperlink is allowed as a value of the field. */
            AllowHyperlink: boolean;
            /** A value that specifies whether all changes to the value of the field are displayed in list forms. */
            AppendOnly: boolean;
            /** A value that specifies the number of lines of text to display for the field. */
            NumberOfLines: number;
            /** A value that specifies whether the field supports a subset of rich formatting. */
            RestrictedMode: boolean;
            /** A value that specifies whether the field supports rich formatting. */
            RichText: boolean;
            /** A value that specifies whether an implementation specific mechanism for linking wiki pages is supported. */
            WikiLinking: boolean;
    }
    /**
        * Number Field
        */
    export interface IFieldNumber extends IFieldResult {
            /** A value that specifies the minimum allowed value for the field. */
            MaximumValue: number;
            /** A value that specifies the minimum allowed value for the field. */
            MinimumValue: number;
            /** Flag to determine if the number is displayed as a percentage. */
            ShowAsPercentage?: boolean;
    }
    /**
        * Rating Scale Field
        */
    export interface IFieldRatingScale extends IFieldBaseChoice {
            /** A value that specifies the end number for the rating scale. */
            GridEndNumber: number;
            /** A value that specifies the display text corresponding to the choice in the rating scale that indicates the non-applicable option. */
            GridNAOptionText: string;
            /** A value that specifies the start number for the rating scale. */
            GridStartNumber: number;
            /** A value that specifies the display text corresponding to the average of the rating scale. */
            GridTextRangeAverage: string;
            /** A value that specifies the display text corresponding to the maximum of the rating scale. */
            GridTextRangeHigh: string;
            /** A value that specifies the display text corresponding to the minimum of the rating scale. */
            GridTextRangeLow: string;
            /** A value that specifies the number of options in the rating scale. */
            RangeCount: number;
    }
    /**
        * Text Field
        */
    export interface IFieldText extends IFieldResult {
            /** A value that specifies the maximum number of characters allowed in the value of the field. */
            MaxLength: number;
    }
    /**
        * URL Field
        */
    export interface IFieldUrl extends IFieldResult {
            /** A value that specifies the display format for the value in the field. */
            DisplayFormat: number;
    }
    /**
        * User Field
        */
    export interface IFieldUser extends IFieldLookup {
            /** A value that specifies whether to display the name of the user in a survey list. */
            AllowDisplay: boolean;
            /** A value that specifies whether presence is enabled on the field. */
            Presence: boolean;
            /** A value that specifies the identifier of the SharePoint group whose members can be selected as values of the field. */
            SelectionGroup: number;
            /** A value that specifies whether users and groups or only users can be selected. */
            SelectionMode: number;
    }
}

declare module 'gd-sprest/mapper/types/fieldLink' {
    /**
      * Field Link
      */
    export interface IFieldLink {
        DisplayName: string;
        FieldInternalName: string;
        Hidden: boolean;
        Id: string;
        Name: string;
        ReadOnly: boolean;
        Required: boolean;
        ShowInDisplayForm: boolean;
    }
}

declare module 'gd-sprest/mapper/types/fieldLinks' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFieldLink } from "gd-sprest/mapper/types";
    /**
        * Field Links
        */
    export interface IFieldLinks extends IBaseCollection<IFieldLink, IFieldLink, IFieldLink> {
            /**
                * Adds a content type to the collection.
                * @param data - The field link properties.
                */
            add(data: any): IBase<IFieldLink>;
            /**
                * Gets the field link by its id.
                * @param id - The id of the field.
                */
            getById(id: any): IFieldLink & IBase<IFieldLink>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IFieldLinks>;
    }
}

declare module 'gd-sprest/mapper/types/fields' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IField, IFieldCreationInformation, IFieldQueryResult, IFieldResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IFieldsMethods {
            /**
                * Adds a field to the field collection.
                * @param parameters - The field properties.
                */
            add(parameters: IField): IBase<IField, IFieldResult>;
            /**
                * Adds a field to the field collection.
                * @param parameters - The field creation information.
                */
            addField(parameters: IFieldCreationInformation): IBase<IField, IFieldResult>;
            /**
                * Adds a secondary lookup field that depends on a primary lookup field for its relationship to the list where it gets its information.
                * @param displayName - The title of the new field.
                * @param primaryLookupField - The ID of the lookup field to associate this dependent lookup field with.
                * @param showField - The name of the field from the target list to include data from.
                */
            addDependentLookupField(displayName: any, primaryLookupField: any, showField: any): IBase<IField, IFieldResult>;
            /**
                * Creates a field based on the specified schema, Boolean value, and field options.
                * Set the option to addFieldInternalNameHint - 8 to ensure the internal name in the schema xml is not altered.
                * @param schemaXml - The schema XML definition of the field.
                */
            createFieldAsXml(schemaXml: any): IBase<IField, IFieldResult>;
            /**
                * Gets the field with the specified ID.
                * @param id - The field id.
                */
            getById(id: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
            /**
                * Returns the first Field object with the specified internal name or title from the collection.
                * @param internalNameOrTitle - The internal name or title of the field.
                */
            getByInternalNameOrTitle(internalNameOrTitle: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
            /**
                * Returns the first field object in the collection based on the title of the specified field.
                * @param title - The title of the field.
                */
            getByTitle(title: any): IField & IBase<IField, IFieldResult, IFieldQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IFields, IFieldResults>;
    }
    /**
        * Fields
        */
    export interface IFields extends IFieldsMethods, IBaseCollection<IField, IFieldResult, IFieldQueryResult> {
    }
    /**
        * Field Results
        */
    export interface IFieldResults extends IFieldsMethods, IBaseCollection<IFieldResult, IFieldResult, IFieldQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/file' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFileVersionResult, IFileVersions } from "gd-sprest/mapper/types";
    /**
        * File Methods
        */
    export interface IFileMethods {
            /**
                * Approves the file submitted for content approval with the specified comment.
                * @param comment - The comment for the approval. It's length must be <= 1023.
                */
            approve(comment: any): IBase;
            /**
                * Stops the chunk upload session without saving the uploaded data. If the file doesn’t already exist in the library, the partially uploaded file will be deleted. Use this in response to user action (as in a request to cancel an upload) or an error or exception.
                * Use the uploadId value that was passed to the StartUpload method that started the upload session.
                * This method is currently available only on Office 365.
                * @param uploadId - The unique id of the upload session.
                */
            cancelupload(uploadId: any): IBase;
            /**
                * Checks the file in to a document library based on the check-in type.
                * @param comment - The comment for the check-in. Its length must be <= 1023.
                * @param checkInType - The check-in type: MinorCheckIn - 0; MajorCheckIn - 1; OverwriteCheckIn - 2
                */
            checkin(comment: any, checkInType: any): IBase;
            /**
                * Checks out the file from a document library based on the check-out type.
                */
            checkout(): IBase;
            /**
                * Returns the file content.
                */
            content(): IBase;
            /**
                * Continues the chunk upload session with an additional fragment. The current file content is not changed.
                * Use the uploadId value that was passed to the StartUpload method that started the upload session.
                * This method is currently available only on Office 365.
                * @param uploadId - The unique id of the upload session.
                * @param fileOffset - The size of the offset into the file where the fragment starts.
                */
            continueUpload(uploadId: any, fileOffset: any): IBase;
            /**
                * Copies the file to the destination URL.
                * @param strNewUrl - The absolute URL or server relative URL of the destination file path to copy to.
                * @param bOverWrite - True to overwrite a file with the same name in the location.
                */
            copyTo(strNewUrl: any, bOverWrite: any): IBase;
            /**
                * Deletes the File.
                */
            delete(): IBase;
            /**
                * Denies approval for a file that was submitted for content approval.
                * Only documents in lists that are enabled for content approval can be denied.
                * @param comment - The comment for the denial. It's length must be <= 1023.
                */
            deny(comment: any): IBase;
            /**
                * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.
                * Use the uploadId value that was passed to the StartUpload method that started the upload session.
                * This method is currently available only on Office 365.
                * @param uploadId - The unique id of the upload session.
                * @param fileOffset - The size of the offset into the file where the fragment starts.
                */
            finishUpload(uploadId: any, fileOffset: any): IBase;
            /**
                * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.
                * An exception is thrown if the file is not an ASPX page.
                * @param scope - The webpart personalization scope: User - 0; Shared - 1
                */
            getlimitedwebpartmanager(scope: any): IBase;
            /**
                * Moves the file to the specified destination URL.
                * @param newUrl - The absolute url or server relative url of the destination file path to move to.
                * @param flags - The move operation: Overwrite - 1; AllowBrokenThickets (Move even if supporting files are separated from the file) - 8;
                */
            moveTo(newUrl: any, flags: any): IBase;
            /**
                * Opens the file as a stream.
                */
            openBinaryStream(): IBase;
            /**
                * Submits the file for content approval with the specified comment.
                * @param comment - The comment for the published file. It's length must be <= 1023.
                */
            publish(comment: any): IBase;
            /**
                * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.
                */
            recycle(): IBase;
            /**
                * Saves the file as a stream.
                * @param stream - The binary stream of the file.
                */
            saveBinaryStream(stream: any): IBase;
            /**
                * Starts a new chunk upload session and uploads the first fragment. The current file content is not changed when this method completes.
                * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.
                * The upload session ends either when you use the CancelUpload method or when you successfully complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.
                * @param uploadId - The unique id of the upload session.
                */
            startUpload(uploadId: any): IBase;
            /**
                * Reverts an existing checkout for the file.
                */
            undoCheckOut(): IBase;
            /**
                * Removes the file from content approval or unpublish a major version.
                * @param comment - The comment for the unpublish operation. Its length must be <= 1023.
                */
            unpublish(comment: any): IBase;
            /**
                * Updates it's properties.
                * @param data - The file properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * File Properties
        */
    export interface IFileProps {
            /** Gets a value that returns the comment used when a document is checked in to a document library. */
            CheckInComment: string;
            /** Gets a value that indicates how the file is checked out of a document library. Represents an SP.CheckOutType value: . The checkout state of a file is independent of its locked state. */
            CheckOutType: number;
            /** Returns internal version of content, used to validate document equality for read purposes. */
            ContentTag: string;
            /** Gets a value that specifies the customization status of the file. Represents an SP.CustomizedPageStatus value: None = 0; Uncustomized = 1; Customized = 2. */
            CustomizedPageStatus: number;
            /** Gets a value that specifies the ETag value. */
            ETag: string;
            /** Gets a value that specifies whether the file exists. */
            Exists: boolean;
            /** Gets the size of the file in bytes, excluding the size of any Web Parts that are used in the file. */
            Length: number;
            /** Gets a value that specifies the publishing level of the file. Represents an SP.FileLevel value: Published = 1; Draft = 2; Checkout = 255. */
            Level: number;
            LinkingUrl: string;
            /** Gets a value that specifies the major version of the file. */
            MajorVersion: number;
            /** Gets a value that specifies the minor version of the file. */
            MinorVersion: number;
            /** Gets the name of the file including the extension. */
            Name: string;
            ServerRelativePath: Types.SP.IResourcePath;
            /** Gets the relative URL of the file based on the URL for the server. */
            ServerRelativeUrl: string;
            SiteId: string;
            /** Gets a value that specifies when the file was created. */
            TimeCreated: string;
            /** Gets a value that specifies when the file was last modified. */
            TimeLastModified: string;
            /** Gets a value that specifies the display name of the file. */
            Title: string;
            /** Gets a value that specifies the implementation-specific version identifier of the file. */
            UiVersion: number;
            /** Gets a value that specifies the implementation-specific version identifier of the file. */
            UiVersionLabel: string;
            UniqueId: string;
            WebId: string;
    }
    /**
        * File Query Properties
        */
    export interface IFileQueryProps {
            /**
                * Gets a value that specifies the user who added the file.
                */
            Author(): Types.SP.IUser;
            /**
                * Gets a value that returns the user who has checked out the file.
                */
            CheckedOutByUser(): Types.SP.IUser;
            EffectiveInformationRightsManagementSettings(): IBase;
            InformationRightsManagementSettings(): IBase;
            /**
                * Gets a value that specifies the list item field values for the list item corresponding to the file.
                */
            ListItemAllFields(): IBase;
            /**
                * Gets a value that returns the user that owns the current lock on the file.
                */
            LockedByUser(): Types.SP.IUser;
            /**
                * Gets a value that returns the user who last modified the file.
                */
            ModifiedBy(): Types.SP.IUser;
            /**
                * Property Bag
                */
            Properties(): IBase<Types.SP.IPropertyValues>;
            VersionEvents(): IBase;
            /**
                * Gets a value that returns a collection of file version objects that represent the versions of the file.
                */
            Versions(): IBase<IFileVersions>;
    }
    /**
        * File Query Result
        */
    export interface IFileQueryResult extends IFileMethods, IFileProps {
            /**
                * Gets a value that specifies the user who added the file.
                */
            Author: Types.SP.IUserResult;
            /**
                * Gets a value that returns the user who has checked out the file.
                */
            CheckedOutByUser: Types.SP.IUserResult;
            EffectiveInformationRightsManagementSettings: IBase;
            InformationRightsManagementSettings: Types.SP.IInformationRightsManagementSettings;
            /**
                * Gets a value that specifies the list item field values for the list item corresponding to the file.
                */
            ListItemAllFields: Types.SP.IListItemResult;
            /**
                * Gets a value that returns the user that owns the current lock on the file.
                */
            LockedByUser: Types.SP.IUserResult;
            /**
                * Gets a value that returns the user who last modified the file.
                */
            ModifiedBy: Types.SP.IUserResult;
            /**
                * Property Bag
                */
            Properties: Types.SP.IPropertyValues;
            VersionEvents: Types.SP.IResults<any>;
            /**
                * Gets a value that returns a collection of file version objects that represent the versions of the file.
                */
            Versions: Types.SP.IResults<IFileVersionResult>;
    }
    /**
        * File Result
        */
    export interface IFileResult extends IFileMethods, IFileProps, IFileQueryProps, IBase<IFile, IFileResult, IFileQueryResult> {
    }
    /**
        * File
        */
    export interface IFile extends IFileMethods, IFileQueryProps, IBase<IFile, IFileResult, IFileQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/files' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFile, IFileQueryResult, IFileResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IFilesMethods {
            /**
                * Adds a file to this collection.
                * @param overwrite - true to overwrite the file if it already exists; otherwise false.
                * @param url - The folder-relative URL of the file.
                * @param content - The contents of the file. The maximum size of a binary file that you can add by using the REST API is 2 GB.
                */
            add(overwrite: any, url: any, content: any): IBase<IFile, IFileResult>;
            /**
                * Adds a ghosted file to an existing list or document library.
                * @param urlOfFile - The server-relative URL where you want to save the file.
                * @param templateFileType - The SP.TemplateFileType to use to create the file.
                */
            addTemplateFile(urlOfFile: any, templateFileType: number): IBase<IFile, IFileResult>;
            /**
                * Get the file at the specified URL.
                * @param serverRelativeUrl - The name or server relative url of the file.
                */
            getByUrl(serverRelativeUrl: any): IFile & IBase<IFile, IFileResult, IFileQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IFiles>;
    }
    /**
        * Files
        */
    export interface IFiles extends IFilesMethods, IBaseCollection<IFile, IFileResult, IFileQueryResult> {
    }
    /**
        * File Results
        */
    export interface IFileResults extends IFilesMethods, IBaseCollection<IFileResult, IFileResult, IFileQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/fileVersion' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFileVersion, IFileVersionQueryResult, IFileVersionResult } from "gd-sprest/mapper/types";
    /**
        * File Version Methods
        */
    export interface IFileVersionMethods {
            /**
                * Deletes the file version.
                */
            delete(): any;
    }
    /**
        * File Version Properties
        */
    export interface IFileVersionProps {
            /** Gets a value that specifies the check-in comment. */
            CheckInComment: string;
            /** Gets a value that specifies the creation date and time for the file version. */
            Created: string;
            /** Gets the internal identifier for the file version. */
            ID: number;
            /** Gets a value that specifies whether the file version is the current version. */
            IsCurrentVersion: string;
            /**  */
            Size: number;
            /** Gets a value that specifies the relative URL of the file version based on the URL for the site or subsite. */
            Url: string;
            /** Gets a value that specifies the implementation specific identifier of the file. Uses the majorVersionNumber.minorVersionNumber format, for example: 1.2. */
            VersionLabel: string;
    }
    /**
        * File Version Query Properties
        */
    export interface IFileVersionQueryProps {
            /**
                * Gets a value that specifies the user that represents the creator of the file version.
                */
            CreatedBy(): Types.SP.IUser;
    }
    /**
        * File Version Query Result
        */
    export interface IFileVersionQueryResult extends IFileVersionMethods, IFileVersionProps {
            /**
                * A value that specifies the user that represents the creator of the file version.
                */
            CreatedBy: Types.SP.IUserResult;
    }
    /**
        * File Version Result
        */
    export interface IFileVersionResult extends IFileVersionMethods, IFileVersionProps, IFileVersionQueryProps, IBase<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
    }
    /**
        * File Version
        */
    export interface IFileVersion extends IFileVersionMethods, IFileVersionQueryProps, IBase<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/fileVersions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFileVersion, IFileVersionQueryResult, IFileVersionResult } from "gd-sprest/mapper/types";
    /**
        * File Versions
        */
    export interface IFileVersions extends IBaseCollection<IFileVersion, IFileVersionResult, IFileVersionQueryResult> {
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IFileVersions>;
    }
}

declare module 'gd-sprest/mapper/types/folder' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IFile, IFileResults, IFiles, IFolderResults, IFolders } from "gd-sprest/mapper/types";
    /**
        * Folder Methods
        */
    export interface IFolderMethods {
            /**
                * Deletes the folder.
                */
            delete(): IBase;
            /**
                * Get the folder at the specified URL.
                * @param serverRelativeUrl - The server-relative URL of the folder.
                */
            getByUrl(serverRelativeUrl: any): IFolder & IBase<IFolder, IFolderResult, IFolderQueryResult>;
            /**
                * Moves the list folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.
                */
            recycle(): IBase;
            /**
                * Updates it's properties.
                * @param data - The file properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * Folder Properties
        */
    export interface IFolderProps {
            /** Specifies the sequence in which content types are displayed. */
            ContentTypeOrder: Types.SP.IStringValue;
            /** Gets a value that specifies whether the file exists. */
            Exists: boolean;
            /** Gets a value that specifies the count of items in the list folder. */
            ItemCount: number;
            /** Indicates whether the folder is enabled for WOPI default action. */
            IsWOPIEnabled: boolean;
            /** Gets the name of the folder. */
            Name: string;
            ServerRelativePath: Types.SP.IResourcePath;
            /** Gets the server-relative URL of the list folder. */
            ServerRelativeUrl: string;
            TimeCreated: string;
            TimeLastModified: string;
            /** Gets or sets a value that specifies the content type order. */
            UniqueContentTypeOrder: Types.SP.IStringValue;
            UniqueId: string;
            /** Gets or sets a value that specifies folder-relative URL for the list folder welcome page. */
            WelcomePage: string;
    }
    /**
        * Folder Query Properties
        */
    export interface IFolderQueryProps {
            /**
                * Gets the files contained in the folder.
                */
            Files(): IFiles;
            /**
                * Gets the file contained in the folder.
                * @param url - The url of the file within the current folder.
                */
            Files(url: string): IFile;
            /**
                * Gets the folders contained in the list folder.
                */
            Folders(): IFolders;
            /**
                * Gets the folder contained in the list folder.
                * @param url - The url of the sub-folder within the current folder.
                */
            Folders(url: string): IFolder;
            /**
                * Specifies the list item field (2) values for the list item corresponding to the file.
                */
            ListItemAllFields(): IBase<Types.SP.IListItem>;
            /**
                * Gets the parent list folder of the folder.
                */
            ParentFolder(): IFolder;
            /**
                * Property Bag
                */
            Properties(): IBase<Types.SP.IPropertyValues>;
            StorageMetrics(): IBase;
    }
    /**
        * Folder Query Result
        */
    export interface IFolderQueryResult extends IFolderMethods, IFolderProps {
            /**
                * Gets the files contained in the folder.
                */
            Files: IFileResults;
            /**
                * Gets the folders contained in the list folder.
                */
            Folders: IFolderResults;
            /**
                * Specifies the list item field (2) values for the list item corresponding to the file.
                */
            ListItemAllFields: Types.SP.IListItemResults;
            /**
                * Gets the parent list folder of the folder.
                */
            ParentFolder: IFolderResult;
            /**
                * Property Bag
                */
            Properties: Types.SP.IPropertyValues;
            StorageMetrics: any;
    }
    /**
        * Folder Result
        */
    export interface IFolderResult extends IFolderMethods, IFolderProps, IFolderQueryProps, IFolderQueryProps, IBase<IFolder, IFolderResult, IFolderQueryResult> {
    }
    /**
        * Folder
        */
    export interface IFolder extends IFolderMethods, IFolderQueryProps, IBase<IFolder, IFolderResult, IFolderQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/folders' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IFolder, IFolderQueryResult, IFolderResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IFoldersMethods {
            /**
                * Adds the folder that is located at the specified URL to the collection.
                * @param url - The path where you want to add the folder (including the name of the new folder) as a fully-qualified URL, server-relative URL, or site-relative URL.
                */
            add(url: any): IBase<IFolder, IFolderResult>;
            /**
                * Get the file at the specified URL.
                * @param serverRelativeUrl - The server-relative URL of the folder.
                */
            getbyurl(serverRelativeUrl: any): IFolder & IBase<IFolder, IFolderResult, IFolderQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IFolders, IFolderResults>;
    }
    /**
        * Folders
        */
    export interface IFolders extends IFoldersMethods, IBaseCollection<IFolder, IFolderResult, IFolderQueryResult> {
    }
    /**
        * Folder Results
        */
    export interface IFolderResults extends IFoldersMethods, IBaseCollection<IFolderResult, IFolderResult, IFolderQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/group' {
    import { IBase } from "gd-sprest/utils/types";
    import { IUser, IUserResult, IUserResults, IUsers } from "gd-sprest/mapper/types";
    /**
        * Group Creation Information
        */
    export interface IGroupCreationInformation {
            /** The group description. */
            Description?: string;
            /** The group name. */
            Title: string;
    }
    /**
        * Group Methods
        */
    export interface IGroupMethods {
    }
    /**
        * Group Properties
        */
    export interface IGroupProps {
            /** Gets or sets a value that indicates whether the group members can edit membership in the group. */
            AllowMembersEditMembership: boolean;
            /** Gets or sets a value that indicates whether to allow users to request membership in the group and request to leave the group. */
            AllowRequestToJoinLeave: boolean;
            /** Gets or sets the description of the group. */
            Description: string;
            /** Gets a value that specifies the member identifier for the user or group. */
            Id: string;
            /** Gets a value that indicates whether this member should be hidden in the UI. */
            IsHiddenInUI: string;
            /** Gets the name of the group. */
            LoginName: string;
            /** Gets or sets a value that indicates whether only group members are allowed to view the membership of the group. */
            OnlyAllowMembersViewMembership: boolean;
            /** Gets the name for the owner of this group. */
            OwnerTitle: string;
            /** Gets or sets the email address to which the requests of the membership are sent. */
            RequestToJoinLeaveEmailSetting: string;
            /** Gets a value containing the type of the principal. Represents a bitwise SP.PrincipalType value: None = 0; User = 1; DistributionList = 2; SecurityGroup = 4; SharePointGroup = 8; All = 15. */
            PrincipalType: string;
            /** Gets or sets a value that specifies the name of the principal. */
            Title: string;
    }
    /**
        * Group Query Properties
        */
    export interface IGroupQueryProps {
            /**
                * Gets or sets a value that indicates whether the request to join or leave the group can be accepted automatically.
                */
            AutoAcceptRequestToJoinLeave(): IBase<boolean>;
            /**
                * Gets a value that indicates whether the current user can edit the membership of the group.
                */
            CanCurrentUserEditMembership(): IBase<boolean>;
            /**
                * Gets a value that indicates whether the current user can manage the group.
                */
            CanCurrentUserManageGroup(): IBase<boolean>;
            /**
                * Gets a value that indicates whether the current user can view the membership of the group.
                */
            CanCurrentUserViewMembership(): IBase<boolean>;
            /**
                * Gets or sets the owner of the group which can be a user or another group assigned permissions to control security.
                */
            Owner(): IUser;
            /**
                * Gets a collection of user objects that represents all of the users in the group.
                */
            Users(): IUsers;
            /**
                * Gets a collection of user objects that represents all of the users in the group.
                * @param id - The user id.
                */
            Users(id: any): IUser;
    }
    /**
        * Group Query Result
        */
    export interface IGroupQueryResult extends IGroupMethods, IGroupProps {
            /**
                * Gets or sets a value that indicates whether the request to join or leave the group can be accepted automatically.
                */
            AutoAcceptRequestToJoinLeave: boolean;
            /**
                * Gets a value that indicates whether the current user can edit the membership of the group.
                */
            CanCurrentUserEditMembership: boolean;
            /**
                * Gets a value that indicates whether the current user can manage the group.
                */
            CanCurrentUserManageGroup: boolean;
            /**
                * Gets a value that indicates whether the current user can view the membership of the group.
                */
            CanCurrentUserViewMembership: boolean;
            /**
                * Gets or sets the owner of the group which can be a user or another group assigned permissions to control security.
                */
            Owner: IUserResult;
            /**
                * Gets a collection of user objects that represents all of the users in the group.
                */
            Users: IUserResults;
    }
    /**
        * Group Result
        */
    export interface IGroupResult extends IGroupMethods, IGroupProps, IGroupQueryProps, IBase<IGroup, IGroupResult, IGroupQueryResult> {
    }
    /**
        * Group
        */
    export interface IGroup extends IGroupMethods, IGroupQueryProps, IBase<IGroup, IGroupResult, IGroupQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/groups' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IGroup, IGroupCreationInformation, IGroupQueryResult, IGroupResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface ISiteGroupsMethods {
            /**
                * Adds a site to the site collection.
                * @param groupInfo - The group creation information.
                */
            add(groupInfo: IGroupCreationInformation): IBase<IGroup, IGroupResult>;
            /**
                * Returns a group from the collection based on the member ID of the group.
                * @param id - The site group id.
                */
            getById(id: any): IGroup & IBase<IGroup, IGroupResult, IGroupQueryResult>;
            /**
                * Returns a cross-site group from the collection based on the name of the group.
                * @param name - The name of the group. The group name is specified in its LoginName property.
                */
            getByName(name: any): IGroup & IBase<IGroup, IGroupResult, IGroupQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<ISiteGroups, ISiteGroupResults>;
            /**
                * Removes the group with the specified member ID from the collection.
                * @param id - The ID of the group to remove.
                */
            removeById(id: any): IBase;
            /**
                * Removes the cross-site group with the specified name from the collection.
                * @param name - The name of the group to remove. The group name is specified in its LoginName property.
                */
            removeByLoginName(name: any): IBase;
    }
    /**
        * Site Groups
        */
    export interface ISiteGroups extends ISiteGroupsMethods, IBaseCollection<IGroup, IGroupResult, IGroupQueryResult> {
    }
    /**
        * Site Group Results
        */
    export interface ISiteGroupResults extends ISiteGroupsMethods, IBaseCollection<IGroupResult, IGroupResult, IGroupQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/items' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IListItem, IListItemQueryResult, IListItemResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IListItemsMethods {
            /**
                * Adds an item to the list item collection.
                * @param data - The item properties.
                */
            add(data: any): IBase<IListItem, IListItemResult>;
            /**
                * Gets an item by the specified id.
                * @param id - The item id.
                */
            getById(id: any): IListItem & IBase<IListItem, IListItemResult, IListItemQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IListItems, IListItemResults>;
    }
    /**
        * List Items
        */
    export interface IListItems extends IListItemsMethods, IBaseCollection<IListItem, IListItemResult, IListItemQueryResult> {
    }
    /**
        * List Item Results
        */
    export interface IListItemResults extends IListItemsMethods, IBaseCollection<IListItemResult, IListItemResult, IListItemQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/limitedWebPartManager' {
    import { IBase } from "gd-sprest/utils/types";
    /**
        * Limited Web Part Manager
        */
    export interface ILimitedWebPartManager extends IBase<ILimitedWebPartManager, ILimitedWebPartManager> {
            /**
                * Properties
                */
            HasPersonalizedParts: boolean;
            Scope: number;
            /**
                * Gets a webpart by its id.
                * @param id - The web part id.
                */
            WebParts(id: any): IBase;
    }
}

declare module 'gd-sprest/mapper/types/list' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IContentType, IContentTypeResults, IContentTypes, IListItem, IListItemQueryResult, IListItemResult, IListItemResults, IListItems, IView, IViewQueryResult, IViewResult, IViewResults, IViews } from "gd-sprest/mapper/types";
    /**
        * List Creation Information
        */
    export interface IListCreationInformation {
            /** The list template type. */
            BaseTemplate: number;
            /** The list schema xml. */
            CustomSchemaXml?: string;
            /** The list of data source properties. */
            DataSourceProperties?: Array<string>;
            /** The list description. */
            Description?: string;
            /** The list document template type. */
            DocumentTemplateType?: number;
            /** Option to display the list on the quick launch. */
            QuickLaunchOption?: number;
            /** The list template feature id. */
            TemplateFeatureId?: string;
            /** The list name. */
            Title: string;
    }
    /**
        * List Data Source
        */
    export interface IListDataSource {
            Properties: Array<string>;
    }
    /**
        * List Template
        */
    export interface IListTemplate {
            AllowsFolderCreation: boolean;
            Description: string;
            FeatureId: string;
            Hidden: boolean;
            ImageUrl: string;
            InternalName: string;
            IsCustomTemplate: boolean;
            ListTemplateTypeKind: number;
            Name: string;
            OnQuickLaunch: boolean;
            Unique: boolean;
    }
    /**
        * List Methods
        */
    export interface IListMethods {
            /**
                * Creates unique role assignments for the securable object.
                * @param copyRoleAssignments - True to copy the role assignments from the parent securable object; false to remove the inherited role assignments except one that contains the current user.
                * @param clearSubScopes - True to make all child securable objects inherit role assignments from the current object; false (default) to leave role assignments unchanged for child securable objects that do not inherit role assignments from their parent object.
                */
            breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): any;
            /**
                * Deletes the list.
                */
            delete(): IBase;
            /**
                * A static method to get the list by the entity name.
                * @param entityTypeName - The entity type name of the list.
                * @param callback - The method to be executed after the request completes.
                */
            getByEntityName(entityTypeName: string, callback: (IList) => void, targetInfo?: any): IBase<IList, IListResult, IListQueryResult>;
            /**
                * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.
                * @param query - The change query.
                */
            getChanges(query: any): IBase;
            /**
                * Returns the list item with the specified list item identifier.
                * @param id - The list item id.
                */
            getItemById(id: any): IListItem & IBase<IListItem, IListItemResult, IListItemQueryResult>;
            /**
                * Returns a collection of items from the list based on the view xml.
                * @param viewXml - The view xml CAML query.
                */
            getItems(viewXml: any): IBase<IListItems, IListItemResults>;
            /**
                * Returns a collection of items from the list based on the specified query.
                * @camlQuery - The caml query.
                */
            getItemsByQuery(camlQuery: any): IBase<IListItems, IListItemResults>;
            /**
                * Returns a collection of items from the list based on the specified query.
                * @query - The query that contains the change token.
                */
            getListItemChangesSinceToken(query: Types.SP.ComplexTypes.ChangeLogItemQuery): IBase<IListItems, IListItemResults>;
            /**
                * Returns a collection of lookup fields that use this list as a data source and that have FieldLookup.IsRelationship set to true.
                */
            getRelatedFields(): IBase;
            /**
                * Gets the effective user permissions for the current user.
                * @param loginName - The user login name.
                */
            getUserEffectivePermissions(loginName: any): IBase;
            /**
                * Returns the list view with the specified view identifier.
                * @param viewId - The view id.
                */
            getViewById(viewId: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
            /**
                * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.
                */
            recycle(): IBase;
            /**
                * Renders the list data.
                * @param viewXml - A CAML query that defines the items and fields that you want returned.
                */
            renderListData(viewXml: any): IBase;
            /**
                * Renders the list form data.
                * @param itemId - The item id.
                * @param formId - The identifier of the form.
                * @param mode - The SP.ControlMode of the control used to display the item.
                */
            renderListFormData(itemId: any, formId: any, mode: number): IBase;
            /**
                * Reserves a list item ID for idempotent list item creation.
                */
            reserveListItemId(): IBase;
            /**
                * Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.
                */
            resetRoleInheritance(): IBase;
            /**
                * Updates it's properties.
                * @param data - The list properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * List Properties
        */
    export interface IListProps {
            /** Gets a value that specifies whether the list supports content Types.SP. */
            AllowContentTypes: boolean;
            AllowDeletion: boolean;
            /** Gets the list definition type on which the list is based. Represents a ListTemplateType value. See ListTemplateType in the .NET client object model reference for template type values. */
            BaseTemplate: number;
            /** Gets the base type for the list. Represents an SP.BaseType value: Generic List = 0; Document Library = 1; Discussion Board = 3; Survey = 4; Issue = 5. */
            BaseType: number;
            /**
                * Gets a value that specifies the override of the web application's BrowserFileHandling property at the list level. Represents an SP.BrowserFileHandling value: Permissive = 0; Strict = 1.
                */
            BrowserFileHandling: number;
            /** Gets or sets a value that specifies whether content types are enabled for the list. */
            ContentTypesEnabled: boolean;
            /** Gets a value that specifies when the list was created. */
            Created: string;
            CurrentChangeToken: Types.SP.IStringValue;
            /** Gets a value that specifies the default workflow identifier for content approval on the list. Returns an empty GUID if there is no default content approval workflow. */
            DefaultContentApprovalWorkflowId: string;
            /** Gets or sets a value that specifies the description of the list. */
            Description: string;
            /** Gets or sets a value that specifies the reading order of the list. Returns ""NONE"", ""LTR"", or ""RTL"". */
            Direction: string;
            /** Gets or sets a value that specifies the server-relative URL of the document template for the list. Returns a server-relative URL if the base type is DocumentLibrary, otherwise returns null. */
            DocumentTemplateUrl: string;
            /** Gets or sets a value that specifies the minimum permission required to view minor versions and drafts within the list. Represents an SP.DraftVisibilityType value: Reader = 0; Author = 1; Approver = 2. */
            DraftVersionVisibility: number;
            EnableAssignToEmail: boolean;
            /** Gets or sets a value that specifies whether list item attachments are enabled for the list. */
            EnableAttachments: boolean;
            /** Gets or sets a value that specifies whether new list folders can be added to the list. */
            EnableFolderCreation: boolean;
            /** Gets or sets a value that specifies whether minor versions are enabled for the list. */
            EnableMinorVersions: boolean;
            /** Gets or sets a value that specifies whether content approval is enabled for the list. */
            EnableModeration: boolean;
            /** Gets or sets a value that specifies whether historical versions of list items and documents can be created in the list. */
            EnableVersioning: boolean;
            /**  */
            EntityTypeName: string;
            ExcludeFromOfflineClient: boolean;
            FileSavePostProcessingEnabled: boolean;
            /** Gets or sets a value that indicates whether forced checkout is enabled for the document library. */
            ForceCheckout: boolean;
            /** Gets a value that specifies whether the list is an external list. */
            HasExternalDataSource: boolean;
            /** Gets or sets a Boolean value that specifies whether the list is hidden. If true, the server sets the OnQuickLaunch property to false. */
            Hidden: boolean;
            /** Gets the GUID that identifies the list in the database. */
            Id: string;
            /** Gets a value that specifies the URI for the icon of the list. */
            ImageUrl: string;
            /**  */
            IrmEnabled: boolean;
            /**  */
            IrmExpire: boolean;
            /**  */
            IrmReject: boolean;
            /** Gets or sets a value that specifies a flag that a client application can use to determine whether to display the list. */
            IsApplicationList: boolean;
            /** Gets a value that specifies whether the list is a gallery. */
            IsCatalog: boolean;
            /**  */
            IsPrivate: boolean;
            /** Gets a value that specifies the number of list items in the list. */
            ItemCount: number;
            /** Gets a value that specifies the last time a list item was deleted from the list. */
            LastItemDeletedDate: string;
            /** Gets a value that specifies the last time a list item, field, or property of the list was modified. */
            LastItemModifiedDate: string;
            ListExperienceOptions: number;
            /**  */
            ListItemEntityTypeFullName: string;
            MajorVersionLimit: number;
            MajorWithMinorVersionsLimit: number;
            /** Gets or sets a value that indicates whether the list in a Meeting Workspace site contains data for multiple meeting instances within the site. */
            MultipleDataList: boolean;
            /** Gets or sets a value that specifies that the crawler must not crawl the list. */
            NoCrawl: boolean;
            /** Gets a value that specifies the server-relative URL of the site that contains the list. */
            ParentWebUrl: string;
            ParserDisabled: boolean;
            ReadSecurity: number;
            /** Gets a value that indicates whether folders can be created within the list. */
            ServerTemplateCanCreateFolders: boolean;
            /** Gets a value that specifies the feature identifier of the feature that contains the list schema for the list. Returns an empty GUID if the list schema is not contained within a feature. */
            TemplateFeatureId: string;
            /** Gets or sets the displayed title for the list. Its length must be <= 255 characters. */
            Title: string;
    }
    /**
        * List Query Properties
        */
    export interface IListQueryProps {
            /**
                * Gets the content types that are associated with the list.
                */
            ContentTypes(): IContentTypes;
            /**
                * Gets the content types that are associated with the list.
                * @param id - The id of the content type.
                */
            ContentTypes(id: string): IContentType;
            /**
                * Gets the data source associated with the list, or null if the list is not a virtual list. Returns null if the HasExternalDataSource property is false.
                */
            DataSource(): IBase<Array<string>>;
            /**
                * Gets a value that specifies the location of the default display form for the list. Clients specify a server-relative URL, and the server returns a site-relative URL
                */
            DefaultDisplayFormUrl(): IBase<string>;
            /**
                * Gets a value that specifies the URL of the edit form to use for list items in the list. Clients specify a server-relative URL, and the server returns a site-relative URL.
                */
            DefaultEditFormUrl(): IBase<string>;
            /**
                * Gets a value that specifies the location of the default new form for the list. Clients specify a server-relative URL, and the server returns a site-relative URL.
                */
            DefaultNewFormUrl(): IBase<string>;
            /**
                * Gets the default list view.
             */
            DefaultView(): IView;
            DescriptionResouce(): IBase<Types.SP.IResourcePath>;
            /**
                * Gets a value that specifies the effective permissions on the list that are assigned to the current user.
                */
            EffectiveBasePermissions(): IBase<Types.SP.IBasePermissions>;
            /**
                * Gets a value that specifies the effective permissions on the list that are for the user export interface.
             */
            EffectiveBasePermissionsForUI(): IBase<Types.SP.IBasePermissions>;
            /**
                * Gets the event receivers associated with the list.
             */
            EventReceivers(): Types.SP.IEventReceivers;
            /**
                * Gets the event receiver associated with the list.
                * @param id - The id of the event receiver.
             */
            EventReceivers(id: string): Types.SP.IEventReceiver;
            /**
                * Gets the fields in the list.
                */
            Fields(): Types.SP.IFields;
            /**
                * Gets the field in the list.
                * @param internalNameOrTitle - The internal name or title of the field.
                */
            Fields(internalNameOrTitle: string): Types.SP.IField;
            /**
                * Gets the object where role assignments for this object are defined. If role assignments are defined directly on the current object, the current object is returned.
                */
            FirstUniqueAncestorSecurableObject(): IBase<string>;
            /**
                * Gets the list forms in the list.
                */
            Forms(): IBase;
            /**
                * Gets the list form in the list.
                * @param id - The id of the form.
                */
            Forms(id: string): IBase;
            /**
                * Gets a value that specifies whether the role assignments are uniquely defined for this securable object or inherited from a parent securable object.
                */
            HasUniqueRoleAssignments(): IBase;
            /**
                * Gets a value that specifies the information rights management settings.
             */
            InformationRightsManagementSettings(): IBase;
            /**
                * Gets a value that indicates whether the list is designated as a default asset location for images or other files which the users upload to their wiki pages.
                */
            IsSiteAssetsLibrary(): IBase<boolean>;
            /**
                * Gets the list items in the list.
                */
            Items(): IListItems;
            /**
                * Gets the list item in the list.
                * @param id - The id of the list item.
                */
            Items(id: number): IListItem;
            /**
                * Gets or sets a value that specifies whether the list appears on the Quick Launch of the site. If true, the server sets the Hidden property to false.
                */
            OnQuickLaunch(): IBase<boolean>;
            /**
                * Gets a value that specifies the site that contains the list.
                */
            ParentWeb(): Types.SP.IWeb;
            /**
                * Gets the role assignments for the securable object.
                */
            RoleAssignments(): Types.SP.IRoleAssignments;
            /**
                * Gets the role assignments for the securable object.
                * @param id - The role assignment id.
                */
            RoleAssignments(id: string): Types.SP.IRoleAssignment;
            /**
                * Gets the root folder of the list.
                */
            RootFolder(): Types.SP.IFolder;
            /**
                * Gets the file in the root folder of the list.
                * @param url - The url of the file within the root folder.
                */
            RootFolder(url: string): Types.SP.IFile;
            /**
                * Gets a value that specifies the list schema of the list.
                */
            SchemaXml(): IBase<string>;
            Subscriptions(): IBase<IBase>;
            TitleResource(): IBase<Types.SP.IResourcePath>;
            /**
                * Gets the user custom actions for the list.
                */
            UserCustomActions(): Types.SP.IUserCustomActions;
            /**
                * Gets the user custom action(s) for the list.
                * @param id - The id of the user custom action.
                */
            UserCustomActions(id: string): Types.SP.IUserCustomAction;
            /**
                * Gets or sets a value that specifies the data validation criteria for a list item. Its length must be <= 1023.
                */
            ValidationFormula(): IBase<string>;
            /**
                * Gets or sets a value that specifies the error message returned when data validation fails for a list item. Its length must be <= 1023.
                */
            ValidationMessage(): IBase<string>;
            /**
                * Gets the views in the list.
                */
            Views(): IViews;
            /**
                * Gets the view in the list.
                * @param id - The id of the view.
                */
            Views(id: string): IView;
            /**
                * Gets a value that specifies the collection of all workflow associations for the list.
                */
            WorkflowAssociations(): IBase<string>;
            WriteSecurity(): IBase<number>;
    }
    /**
        * List Query Result
        */
    export interface IListQueryResult extends IListMethods, IListProps {
            /**
                * Gets the content types that are associated with the list.
                */
            ContentTypes: IContentTypeResults;
            /**
                * Gets the data source associated with the list, or null if the list is not a virtual list. Returns null if the HasExternalDataSource property is false.
                */
            DataSource: IListDataSource;
            /**
                * Gets a value that specifies the location of the default display form for the list. Clients specify a server-relative URL, and the server returns a site-relative URL
                */
            DefaultDisplayFormUrl: string;
            /**
                * Gets a value that specifies the URL of the edit form to use for list items in the list. Clients specify a server-relative URL, and the server returns a site-relative URL.
                */
            DefaultEditFormUrl: string;
            /**
                * Gets a value that specifies the location of the default new form for the list. Clients specify a server-relative URL, and the server returns a site-relative URL.
                */
            DefaultNewFormUrl: string;
            /**
                * Gets the default list view.
             */
            DefaultView: IViewResult;
            /**
                * Gets the URL of the default view for the list.
                */
            DefaultViewUrl: string;
            DescriptionResouce: Types.SP.IResourcePath;
            /**
                * Gets a value that specifies the effective permissions on the list that are assigned to the current user.
                */
            EffectiveBasePermissions: Types.SP.IBasePermissions;
            /**
                * Gets a value that specifies the effective permissions on the list that are for the user export interface.
             */
            EffectiveBasePermissionsForUI: Types.SP.IBasePermissions;
            /**
                * Gets the event receivers associated with the list.
             */
            EventReceivers: Types.SP.IEventReceiverResults;
            /**
                * Gets the fields in the list.
                */
            Fields: Types.SP.IFieldResults;
            /**
                * Gets the object where role assignments for this object are defined. If role assignments are defined directly on the current object, the current object is returned.
                */
            FirstUniqueAncestorSecurableObject: Types.SP.IWebResult;
            /**
                * Gets the list forms in the list.
                */
            Forms: Types.SP.IResults<Types.SP.IForm>;
            /**
                * Gets a value that specifies whether the role assignments are uniquely defined for this securable object or inherited from a parent securable object.
                */
            HasUniqueRoleAssignments: boolean;
            /**
                * Gets a value that specifies the information rights management settings.
             */
            InformationRightsManagementSettings: Types.SP.IInformationRightsManagementSettings;
            /**
                * Gets a value that indicates whether the list is designated as a default asset location for images or other files which the users upload to their wiki pages.
                */
            IsSiteAssetsLibrary: boolean;
            /**
                * Gets the list items in the list.
                */
            Items: IListItemResults;
            /**
                * Gets or sets a value that specifies whether the list appears on the Quick Launch of the site. If true, the server sets the Hidden property to false.
                */
            OnQuickLaunch: boolean;
            /**
                * Gets a value that specifies the site that contains the list.
                */
            ParentWeb: Types.SP.IWebResult;
            /**
                * Gets the role assignments for the securable object.
                */
            RoleAssignments: Types.SP.IRoleAssignmentResults;
            /**
                * Gets the root folder of the list.
                */
            RootFolder: Types.SP.IFolderResult;
            /**
                * Gets a value that specifies the list schema of the list.
                */
            SchemaXml: string;
            Subscriptions: Types.SP.IResults<Types.SP.ISubscription>;
            TitleResource: Types.SP.IResourcePath;
            /**
                * Gets the user custom actions for the list.
                */
            UserCustomActions: Types.SP.IUserCustomActionResults;
            /**
                * Gets or sets a value that specifies the data validation criteria for a list item. Its length must be <= 1023.
                */
            ValidationFormula: string;
            /**
                * Gets or sets a value that specifies the error message returned when data validation fails for a list item. Its length must be <= 1023.
                */
            ValidationMessage: string;
            /**
                * Gets the views in the list.
                */
            Views: IViewResults;
            /**
                * Gets a value that specifies the collection of all workflow associations for the list.
                */
            WorkflowAssociations: Types.SP.IResults<string>;
            WriteSecurity: number;
    }
    /**
        * List Result
        */
    export interface IListResult extends IListMethods, IListProps, IListQueryProps, IBase<IList, IListResult, IListQueryResult> {
    }
    /**
        * List
        */
    export interface IList extends IListMethods, IListQueryProps, IBase<IList, IListResult, IListQueryResult> {
            /**
                * Constructor
                * @param listName - The name of the list.
                * @param targetInfo - (Optional) The target information.
                */
            new (listName: string, targetInfo?: ITargetInfo): IList;
    }
}

declare module 'gd-sprest/mapper/types/listItem' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IContentType, IContentTypeResult, IList, IListResult } from "gd-sprest/mapper/types";
    /**
        * List Item Methods
        */
    export interface IListItemMethods {
            /**
                * Creates unique role assignments for the securable object.
                * @param copyRoleAssignments - True to copy the role assignments from the parent securable object; false to remove the inherited role assignments except one that contains the current user.
                * @param clearSubScopes - True to make all child securable objects inherit role assignments from the current object; false (default) to leave role assignments unchanged for child securable objects that do not inherit role assignments from their parent object.
                */
            breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): IBase;
            /**
                * Deletes the list item.
                */
            delete(): IBase;
            /**
                * Gets the effective permissions that a specified user has on the list item.
                * @param loginName - The login name.
                */
            getUserEffectivePermissions(loginName: any): IBase;
            /**
                * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.
                */
            recycle(): IBase;
            /**
                * Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.
                */
            resetRoleInheritance(): IBase;
            /**
                * Updates it's properties.
                * @param data - The list properties to update.
                */
            update(data: any): IBase;
            /**
                * Validates and sets the values of the specified collection of fields for the list item.
                * @param formValues - The fields to change and their new values. Pass this parameter in the request body, as shown in the request example.
                * @param bNewDocumentUpdate - True if the list item is a document being updated after upload; otherwise false. Pass this parameter in the request body, as shown in the request example, or in the URI path.
                */
            validateUpdateListItem(formValues: any, bNewDocumentUpdate: any): any;
    }
    /**
        * List Item Properties
        */
    export interface IListItemProps {
            /**
                * Gets a value that specifies the display name of the list item.
                */
            DisplayName: string;
            /** Gets a value that specifies the effective permissions on the list item that are assigned to the current user. */
            EffectiveBasePermissions: Types.SP.IBasePermissions;
            /** Gets the effective base permissions for the current user, as they should be displayed in UI. */
            EffectiveBasePermissionsForUI: Types.SP.IBasePermissions;
            /** Gets a value that specifies whether the list item is a file or a list folder. Represents an SP.FileSystemObjectType value: Invalid = -1; File = 0; Folder = 1; Web = 2. */
            FileSystemObjectType: number;
            IconOverlay: string;
            /** Gets a value that specifies the list item identifier. */
            Id: number;
            ServerRedirectedEmbedUrl: string;
    }
    /**
        * List Item Query Properties
        */
    export interface IListItemQueryProps {
            /**
                * Get the attachment collection.
                */
            AttachmentFiles(): Types.SP.IAttachmentFiles;
            /**
                * Gets the specified attachment file.
                * @param fileName - The filename of the attachment.
                */
            AttachmentFiles(fileName: string): IBase<Types.SP.IAttachment>;
            /**
                * Gets a value that specifies the content type of the list item.
                */
            ContentType(): IContentType;
            /**
                * Gets the values for the list item as HTML.
                */
            FieldValuesAsHtml(): IBase;
            /**
                * Gets the list item's field values as a collection of string values.
                */
            FieldValuesAsText(): IBase;
            /**
                * Gets the formatted values to be displayed in an edit form.
                */
            FieldValuesForEdit(): IBase;
            /**
                * Gets the file that is represented by the item from a document library.
                */
            File(): Types.SP.IFile;
            /**
                * Gets the object where role assignments for this object are defined. If role assignments are defined directly on the current object, the current object is returned.
                */
            FirstUniqueAncestorSecurableObject(): IBase<string>;
            /**
                * Gets a folder object that is associated with a folder item.
                */
            Folder(): Types.SP.IFolder;
            GetDlpPolicyTip(): IBase;
            /**
                * Gets a value that specifies whether the role assignments are uniquely defined for this securable object or inherited from a parent securable object.
                */
            HasUniqueRoleAssignments(): IBase<string>;
            /**
                * Gets the parent list that contains the list item.
                */
            ParentList(): IList;
            /**
                * Property Bag
                */
            Properties(): IBase<Types.SP.IPropertyValues>;
            /**
                * Gets the role assignments for the securable object.
                */
            RoleAssignments(): Types.SP.IRoleAssignments;
            /**
                * Gets the role assignment(s) for the securable object.
                * @param id - The role assignment id.
                */
            RoleAssignments(id: string): Types.SP.IRoleAssignment;
    }
    /**
        * List Item Query Result
        */
    export interface IListItemQueryResult extends IListItemMethods, IListItemProps {
            /**
                * Get the attachment collection.
                */
            AttachmentFiles: Types.SP.IAttachmentFilesMethods & Types.SP.IResults<Types.SP.IAttachment>;
            /**
                * Gets a value that specifies the content type of the list item.
                */
            ContentType: IContentTypeResult;
            /**
                * Gets the values for the list item as HTML.
                */
            FieldValuesAsHtml: Array<string>;
            /**
                * Gets the list item's field values as a collection of string values.
                */
            FieldValuesAsText: Array<string>;
            /**
                * Gets the formatted values to be displayed in an edit form.
                */
            FieldValuesForEdit: Array<string>;
            /**
                * Gets the file that is represented by the item from a document library.
                */
            File: Types.SP.IFileResult;
            /**
                * Gets the object where role assignments for this object are defined. If role assignments are defined directly on the current object, the current object is returned.
                */
            FirstUniqueAncestorSecurableObject: IListResult;
            /**
                * Gets a folder object that is associated with a folder item.
                */
            Folder: Types.SP.IFolderResult;
            GetDlpPolicyTip(): IBase;
            /**
                * Gets a value that specifies whether the role assignments are uniquely defined for this securable object or inherited from a parent securable object.
                */
            HasUniqueRoleAssignments: boolean;
            /**
                * Gets the parent list that contains the list item.
                */
            ParentList: IListResult;
            /**
                * Property Bag
                */
            Properties: Array<string>;
            /**
                * Gets the role assignments for the securable object.
                */
            RoleAssignments: Types.SP.IRoleAssignmentResults;
    }
    /**
        * List Item Result
        */
    export interface IListItemResult extends IListItemMethods, IListItemProps, IListItemQueryProps, IBase<IListItem, IListItemResult, IListItemQueryResult> {
    }
    /**
        * List Item
        */
    export interface IListItem extends IListItemMethods, IListItemQueryProps, IBase<IListItem, IListItemResult, IListItemQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/lists' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IList, IListCreationInformation, IListQueryResult, IListResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IListsMethods {
            /**
                * Adds a list to the list collection.
                * @param parameters - The list creation information.
                */
            add(parameters: IListCreationInformation): IBase<IList, IListResult>;
            /**
                * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.
                */
            ensureSiteAssetsLibrary(): IBase<IList, IListResult, IListQueryResult>;
            /**
                * Gets a list that is the default location for wiki pages.
                */
            ensureSitePagesLibrary(): IBase<IList, IListResult, IListQueryResult>;
            /**
                * Returns the list with the specified list identifier.
                * @param id - The list id.
                */
            getById(id: any): IList & IBase<IList, IListResult, IListQueryResult>;
            /**
                * Returns the list with the specified title from the collection.
                * @param title - The list title.
                */
            getByTitle(title: any): IList & IBase<IList, IListResult, IListQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<ILists, IListResults>;
    }
    /**
        * Lists
        */
    export interface ILists extends IListsMethods, IBaseCollection<IList, IListResult, IListQueryResult> {
    }
    /**
        * List Results
        */
    export interface IListResults extends IListsMethods, IBaseCollection<IListResult, IListResult, IListQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/navigation' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IMenuState } from "gd-sprest/mapper/types";
    /**
        * Navigation Methods
        */
    export interface INavigationServiceRESTMethods {
            /**
                * Method to get the menu state.
                * @param menuNodeKey - The key of the start node. If no key is provided, the root node is used.
                * @param depth - The depth of the dump. Default is 10.
                * @param customProperties - (Optionally implemented by a site map data provider.) A comma-separated list of custom properties to return. Use the "\" character to escape a comma separator within a property.
                * @param mapProviderName - Specifies which provider on the site is selected. If no SiteMapProvider used, "CurrentNavSiteMapProviderNoEncode" is used.
                */
            getMenuState(menuNodeKey?: number, depth?: number, customProperties?: string, mapProviderName?: string): IBase<IMenuState>;
    }
    /**
        * Navigation Properties
        */
    export interface INavigationServiceRESTProps {
    }
    /**
        * Navigation Queryable Properties
        */
    export interface INavigationServiceRESTQueryProps {
            MenuState(): IBase<IMenuState>;
            MenuState(key: number): IBase<IMenuState>;
    }
    /**
        * Navigation
        */
    export interface INavigationServiceREST extends INavigationServiceRESTMethods, INavigationServiceRESTQueryProps, IBase<INavigationServiceREST> {
            /**
                * Constructor
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            new (url?: string, targetInfo?: ITargetInfo): INavigationServiceREST;
    }
}

declare module 'gd-sprest/mapper/types/peopleManager' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    /**
        * Person Properties
        */
    export interface IPersonProperties extends IBase<IPersonProperties> {
            /**
                * The user's account name.
                */
            AccountName: string;
            /**
                * The account names of the user's direct reports.
                */
            DirectReports: string;
            /**
                * The user's display name.
                */
            DisplayName: string;
            /**
                * The user's email address.
                */
            Email: string;
            /**
                * The account names of the user's manager hierarchy.
                */
            ExtendedManagers: string;
            /**
                * The account names of the user's extended reports.
                */
            ExtendedReports: string;
            /**
                * A Boolean value that indicates whether the user is being followed by the current user.
                */
            IsFollowed: boolean;
            /**
                * The user's latest microblog post.
                */
            LatestPost: string;
            /**
                * The account names of the user's peers.
                */
            Peers: string;
            /**
                * The absolute URL of the user's personal site.
                */
            PersonalUrl: string;
            /**
                * The URL of the user's profile picture.
                */
            PictureUrl: string;
            /**
                * The user's title.
                */
            Title: string;
            /**
                * The user profile properties for the user.
                */
            UserProfileProperties: ComplexTypes.KeyValue;
            /**
                * The URL of the user's profile page.
                */
            UserUrl: string;
    }
    /**
        * People Manager
        */
    export interface IPeopleManager extends IBase<IPeopleManager> {
            /**
                * Constructor
                * @param targetInfo - (Optional) The target information.
                */
            new (targetInfo?: ITargetInfo): IPeopleManager;
            /**
                * The URL of the edit profile page for the current user.
                */
            EditProfileLink: string;
            /**
                * A Boolean value that indicates whether the current user's People I'm Following list is public.
                */
            IsMyPeopleListPublic: boolean;
            /** Checks whether the specified user is following the current user.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
             */
            amIFollowedBy(accountName: string): IBase;
            /**
                * Checks whether the current user is following the specified user.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            amIFollowing(accountName: string): IBase;
            /**
                * Adds the specified user to the current user's list of followed users.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            follow(accountName: string): IBase;
            /**
                * Adds the specified tag to the current user's list of followed tags.
                * @param id - The ID of the tag to start following.
                */
            followTag(id: string): IBase;
            /**
                * Gets tags that the user is following.
                * @param maxCount - The maximum number of tags to get.
                */
            getFollowedTags(maxCount: number): IBase;
            /**
                * Gets the people who are following the specified user.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            getFollowersFor(accountName: string): IBase<IPersonProperties>;
            /**
                * Gets the people who are following the current user.
                */
            getMyFollowers(): IBase<IPersonProperties>;
            /**
                * Gets user properties for the current user.
                */
            getMyProperties(): IBase<IPersonProperties>;
            /**
                * Gets suggestions for who the current user might want to follow.
                */
            getMySuggestions(): IBase<IPersonProperties>;
            /**
                * Gets the people who the specified user is following.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            getPeopleFollowedBy(accountName: string): IBase<IPersonProperties>;
            /**
                * Gets the people who the current user is following.
                */
            getPeopleFollowedByMe(): IBase<IPersonProperties>;
            /**
                * Gets user properties for the specified user.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            getPropertiesFor(accountName: string): IBase<IPersonProperties>;
            /**
                * Gets the most popular tags.
                */
            getTrendingTags(): IBase;
            /**
                * Gets the specified user profile property for the specified user.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                * @param propertyName - The case-sensitive name of the property to get.
                */
            getUserProfilePropertyFor(accountName: string, propertyName: string): IBase<IPersonProperties>;
            /**
                * Removes the specified user from the user's list of suggested people to follow.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            hideSuggestion(accountName: string): IBase;
            /**
                * Checks whether the first user is following the second user.
                * @param possibleFollowerAccountName - The account name of the user who might be following possiblefolloweeaccountname, encoded and passed as an alias in the query string.
                * @param possibleFolloweeAccountName - The account name of the user who might be followed, encoded and passed as an alias in the query string.
                */
            isFollowing(possibleFollowerAccountName: string, possibleFolloweeAccountName: string): IBase;
            /**
                * Uploads and sets the user profile picture. Users can upload a picture to their own profile only.
                * @param stream - The picture in BMP, JPEG, or PNG format of up to 4.76MB.
                */
            setMyProfilePicture(stream: any): IBase;
            /**
                * Remove the specified user from the current user's list of followed users.
                * @param accountName - The account name of the user, encoded and passed as an alias in the query string.
                */
            stopFollowing(accountName: string): IBase;
            /**
                * Remove the specified tag from the current user's list of followed tags.
                * @param id - The ID of the tag to stop following.
                */
            stopFollowingTag(id: string): IBase;
    }
}

declare module 'gd-sprest/mapper/types/peoplePicker' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IEntityData } from "gd-sprest/mapper/types";
    /**
        * People Picker Query
        */
    export interface IPeoplePickerQuery {
            /** True to allow the email address. */
            AllowEmailAddresses?: boolean;
            /** True to allow multiple entities.  */
            AllowMultipleEntities?: boolean;
            /** True to allow all url zones. */
            AllUrlZones?: boolean;
            /** True to enable claim providers. */
            EnabledClaimProviders?: boolean;
            /** True to force claims. */
            ForceClaims?: boolean;
            /** Maximum entity suggestions. */
            MaximumEntitySuggestions: number;
            /** The principal source. */
            PrincipalSource?: number;
            /** The principal type. */
            PrincipalType?: number;
            /** The query string. This value must be >= 3 characters. */
            QueryString?: string;
            /** Required flag. */
            Required?: boolean;
            /** The SharePoint group id. */
            SharePointGroupID?: number;
            /** The url zone. */
            UrlZone?: number;
            /** Url zone specified flag. */
            UrlZoneSpecified?: boolean;
            /** The web. */
            Web?: any;
            /** The web application id. */
            WebApplicationID?: any;
    }
    /**
        * People Picker Resolve User
        */
    export interface IPeoplePickerResolveUser {
            ClientPeoplePickerResolveUser: Array<IPeoplePickerUser>;
    }
    /**
        * People Picker Search User
        */
    export interface IPeoplePickerSearchUser {
            ClientPeoplePickerSearchUser: Array<IPeoplePickerUser>;
    }
    /**
        * People Picker User
        */
    export interface IPeoplePickerUser {
            /** Description */
            Description?: string;
            /** Display Text */
            DisplayText: string;
            /** The user entity data. */
            EntityData?: IEntityData;
            /** Entity Type */
            EntityType?: string;
            /** Flag to determine if the search user is resolved. */
            IsResolved?: boolean;
            /** The search value. */
            Key: string;
            /** An array of un-resolved user entities. */
            MultipleMatches?: Array<IEntityData>;
            /** Provider Display Name */
            ProviderDisplayName?: string;
            /** Provider Name */
            ProviderName?: string;
    }
    /**
        * People Picker
        */
    export interface IPeoplePicker extends IBase {
            /**
                * Constructor
                * @param settings - The search settings.
                */
            new (settings?: ITargetInfo): IPeoplePicker;
            /** Method to resolve users.
                * @param query - The people picker query.
             */
            clientPeoplePickerResolveUser(query: IPeoplePickerQuery): IBase<IPeoplePickerResolveUser>;
            /** Method to search for users.
                * @param query - The people picker query.
             */
            clientPeoplePickerSearchUser(query: IPeoplePickerQuery): IBase<IPeoplePickerSearchUser>;
    }
}

declare module 'gd-sprest/mapper/types/profileLoader' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IUserProfile } from "gd-sprest/mapper/types";
    /**
        * Profile Loader
        */
    export interface IProfileLoader extends IBase<IProfileLoader> {
            /**
                * Constructor
                * @param targetInfo - (Optional) The target information.
                */
            new (targetInfo?: ITargetInfo): IProfileLoader;
            /**
                * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)
                * @param emailIDs - The email addresses of the users to provision sites for. Maximum 200 characters.
                */
            createPersonalSiteEnqueueBulk(emailIDs: Array<string>): IBase;
            /**
                * Gets the user profile of the site owner.
                */
            getOwnerUserProfile(): IBase<IUserProfile>;
            /**
                * Gets the user profile that corresponds to the current user.
                */
            getUserProfile(): IBase<IUserProfile>;
    }
}

declare module 'gd-sprest/mapper/types/propertyValues' {
    import { IBase } from "gd-sprest/utils/types";
    import { ComplexTypes, ODataQuery } from "gd-sprest/mapper/types";
    /**
        * Property Values
        */
    export interface IPropertyValues extends IBase, ComplexTypes.KeyValue {
            /**
                * Queries the collection.
                * @param oData - The OData information.
                */
            query(query: ODataQuery): IPropertyValues;
    }
}

declare module 'gd-sprest/mapper/types/results' {
    import { ComplexTypes } from "gd-sprest/mapper/types";
    /**
        * App License
        */
    export interface AppLicense {
            /** The collection of app licenses. */
            results: Array<AppLicense>;
    }
    /**
        * Content Type Id
        */
    export interface ContentTypeId {
            /** The collection of content type ids. */
            results: Array<ComplexTypes.ContentTypeId>;
    }
    /**
        * Creatable Item Information
        */
    export interface CreatableItemInfo {
            /** The collection of creatable item information. */
            results: Array<ComplexTypes.CreatableItemInfoCollection>;
    }
    /**
        * Custom Action Element
        */
    export interface CustomActionElement {
            /** The collection of custom action elements. */
            results: Array<CustomActionElement>;
    }
    /**
        * Custom Result
        */
    export interface CustomResult {
            /** The collection of custom results. */
            results: Array<CustomResult>;
    }
    /**
        * Data Row
        */
    export interface DataRow {
            /** The collection of data rows. */
            results: Array<ComplexTypes.SimpleDataRow>;
    }
    /**
        * Key/Value
        */
    export interface KeyValue {
            /** The collection of key-value pairs. */
            results: Array<KeyValue>;
    }
    /**
        * List Data Validation Failure
        */
    export interface ListDataValidationFailure {
            /** The collection of list data validation failures. */
            results: Array<ListDataValidationFailure>;
    }
    /**
        * Menu Node
        */
    export interface MenuNode {
            /** The collection of menu nodes. */
            results: Array<MenuNode>;
    }
    /**
        * Number
        */
    export interface Number {
            /** The collection of numbers. */
            results: Array<number>;
    }
    /**
        * Object
        */
    export interface Object {
            /** A collection of objects. */
            results: Array<object>;
    }
    /**
        * Parameter Information
        */
    export interface ParameterInformation {
            /** The collection of parameter information. */
            results: Array<ParameterInformation>;
    }
    /**
        * Personal Result Suggestion
        */
    export interface PersonalResultSuggestion {
            /** The collection of personal result suggestions. */
            results: Array<PersonalResultSuggestion>;
    }
    /**
        * Query Result
        */
    export interface QueryResult {
            /** The collection of custom results. */
            results: Array<QueryResult>;
    }
    /**
        * Query Suggestion Query
        */
    export interface QuerySuggestionQuery {
            /** The collection of query suggestion queries. */
            results: Array<QuerySuggestionQuery>;
    }
    /**
        * Refiner
        */
    export interface Refiner {
            /** The collection of refiners. */
            results: Array<Refiner>;
    }
    /**
        * Refiner Entry
        */
    export interface RefinerEntry {
            /** The collection of refiner entries. */
            results: Array<RefinerEntry>;
    }
    /**
        * Shared User
        */
    export interface SharedWithUser {
            /** The collection of shared users. */
            results: Array<SharedWithUser>;
    }
    /**
        * Social Actor
        */
    export interface SocialActor {
            /** The collection of social actors. */
            results: Array<SocialActor>;
    }
    /**
        * Social Data Item
        */
    export interface SocialDataItem {
            /** The collection of social data items. */
            results: Array<SocialDataItem>;
    }
    /**
        * Social Data Overlay
        */
    export interface SocialDataOverlay {
            /** The collection of social data overlays. */
            results: Array<SocialDataOverlay>;
    }
    /**
        * Social Post
        */
    export interface SocialPost {
            /** The collection of social posts. */
            results: Array<SocialPost>;
    }
    /**
        * Social Post Definition Data Item
        */
    export interface SocialPostDefinitionDataItem {
            /** The collection of social post definition data items. */
            results: Array<SocialPostDefinitionDataItem>;
    }
    /**
        * Social Thread
        */
    export interface SocialThread {
            /** The collection of social threads. */
            results: Array<SocialThread>;
    }
    /**
        * String Collection
        */
    export interface String {
            /** The collection of strings. */
            results: Array<string>;
    }
    /**
        * Visualization Field
        */
    export interface VisualizationField {
            /** The collection of visualization fields. */
            results: Array<VisualizationField>;
    }
}

declare module 'gd-sprest/mapper/types/roleAssignment' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IRoleDefinition, IRoleDefinitions } from "gd-sprest/mapper/types";
    /**
        * Role Assignment Methods
        */
    export interface IRoleAssignmentMethods {
            /**
                * Deletes the role assignment.
                */
            delete(): IBase;
    }
    /**
        * Role Assignment Properties
        */
    export interface IRoleAssignmentProps {
            /** The unique identifier of the role assignment. */
            PrincipalId: string;
    }
    /**
        * Role Assignment Query Properties
        */
    export interface IRoleAssignmentQueryProps {
            /**
                * Gets the user or group that corresponds to the Role Assignment.
                */
            Member(): IBase<Types.SP.IGroup | Types.SP.IUser>;
            /**
                * Gets the collection of role definition bindings for the role assignment.
                */
            RoleDefinitionBindings(): IRoleDefinitions;
    }
    /**
        * Role Assignment Query Result
        */
    export interface IRoleAssignmentQueryResult extends IRoleAssignmentMethods, IRoleAssignmentProps {
            /**
                * Gets the user or group that corresponds to the Role Assignment.
                */
            Member: Types.SP.IUser;
            /**
                * Gets the collection of role definition bindings for the role assignment.
                */
            RoleDefinitionBindings: Types.SP.IResults<IRoleDefinition>;
    }
    /**
        * Role Assignment Result
        */
    export interface IRoleAssignmentResult extends IRoleAssignmentMethods, IRoleAssignmentProps, IRoleAssignmentQueryProps, IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
    /**
        * Role Assignment
        */
    export interface IRoleAssignment extends IRoleAssignmentMethods, IRoleAssignmentQueryProps, IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleAssignments' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IRoleAssignment, IRoleAssignmentQueryResult, IRoleAssignmentResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IRoleAssignmentsMethods {
            /**
                * Adds a new role assignment with the specified principal and role definitions to the collection.
                * @param principalId - The ID of the user or group to assign permissions to.
                * @param roleDefId - The ID of the role definition that defines the permissions to assign.
                */
            addRoleAssignment(principalId: any, roleDefId: any): IBase<IRoleAssignment, IRoleAssignmentResult>;
            /**
                * Gets the role assignment associated with the specified principal ID from the collection.
                * @param principalId - The ID of the user or group to assign permissions to.
                */
            getByPrincipalId(principalId: any): IRoleAssignment & IBase<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult>;
            /**
                * Gets the role definition with the specified role type.
                * @param principalId - The ID of the user or group to assign permissions to.
                * @param roleDefId - The ID of the role definition that defines the permissions to assign.
                */
            removeRoleAssignment(principalId: any, roleDefId: any): IBase;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IRoleAssignments, IRoleAssignmentResults>;
    }
    /**
        * Role Assignments
        */
    export interface IRoleAssignments extends IRoleAssignmentsMethods, IBaseCollection<IRoleAssignment, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
    /**
        * Role Assignment Results
        */
    export interface IRoleAssignmentResults extends IRoleAssignmentsMethods, IBaseCollection<IRoleAssignmentResult, IRoleAssignmentResult, IRoleAssignmentQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleDefinition' {
    import { IBase } from "gd-sprest/utils/types";
    import { IBasePermissions } from "gd-sprest/mapper/types";
    /**
        * Role Definition Methods
        */
    export interface IRoleDefinitionMethods {
            /**
                * Deletes the role definition.
                */
            delete(): IBase;
    }
    /**
        * Role Definition Properties
        */
    export interface IRoleDefinitionProps {
            /** Gets or sets a value that specifies the base permissions for the role definition. */
            BasePermissions: IBasePermissions;
            /** Gets or sets a value that specifies the description of the role definition. */
            Description: string;
            /** Gets a value that specifies whether the role definition is displayed. */
            Hidden: boolean;
            /** Gets a value that specifies the Id of the role definition. */
            Id: number;
            /** Gets or sets a value that specifies the role definition name. */
            Name: string;
            /** Gets or sets a value that specifies the order position of the object in the site collection Permission Levels page. */
            Order: number;
            /** Gets a value that specifies the type of the role definition. Represents an SP.RoleType value. See RoleType in the .NET client object model reference for a list of role type values. */
            RoleTypeKind: number;
    }
    /**
        * Role Definition Query Properties
        */
    export interface IRoleDefinitionQueryProps {
    }
    /**
        * Role Definition Query Result
        */
    export interface IRoleDefinitionQueryResult extends IRoleDefinitionMethods, IRoleDefinitionProps {
    }
    /**
        * Role Definition Result
        */
    export interface IRoleDefinitionResult extends IRoleDefinitionMethods, IRoleDefinitionProps, IRoleDefinitionQueryProps, IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
    /**
        * Role Definition
        */
    export interface IRoleDefinition extends IRoleDefinitionMethods, IRoleDefinitionQueryProps, IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/roleDefinitions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IRoleDefinition, IRoleDefinitionQueryResult, IRoleDefinitionResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IRoleDefinitionsMethods {
            /**
                * Gets the role definition with the specified ID from the collection.
                * @param roleDefId - The ID of the role definition that defines the permissions to assign.
                */
            getById(roleDefId: any): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
            /**
                * Gets the role definition with the specified name.
                * @param name -
                */
            getByName(name: any): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
            /**
                * Gets the role definition with the specified role type.
                * @param roleType - The RoleTypeKind of the role definition.
                */
            getByType(roleType: number): IRoleDefinition & IBase<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IRoleDefinitions, IRoleDefinitionResults>;
    }
    /**
        * Role Definitions
        */
    export interface IRoleDefinitions extends IRoleDefinitionsMethods, IBaseCollection<IRoleDefinition, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
    /**
        * Role Definition Results
        */
    export interface IRoleDefinitionResults extends IRoleDefinitionsMethods, IBaseCollection<IRoleDefinitionResult, IRoleDefinitionResult, IRoleDefinitionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/search' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    /**
        * Search
        */
    export interface ISearch extends IBase<ISearch, ComplexTypes.SearchResult> {
            /**
                * Constructor
                * @param url - The optional url to execute the search against.
                * @param settings - The search settings.
                */
            new (url?: string, settings?: ITargetInfo): ISearch;
            /** Method to execute a search query.
                * @param settings - The search request settings.
             */
            postquery(settings: ComplexTypes.SearchRequest): IBase<ComplexTypes.SearchResult>;
            /** Method to execute a search query.
                * @param settings - The search request settings.
             */
            searchquery(settings: ComplexTypes.SearchRequest): IBase<ComplexTypes.SearchResult>;
            /** Method to execute a search suggestion.
                * @param settings - The search suggest settings.
             */
            suggest(settings: ComplexTypes.SearchSuggestion): IBase<ComplexTypes.QuerySuggestionResults>;
    }
}

declare module 'gd-sprest/mapper/types/site' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ISiteMethods, IWeb, IWebQueryResult, IWebResult } from "gd-sprest/mapper/types";
    /**
        * Site Methods
        */
    export interface ISiteMethods {
            /**
                * Creates a temporary evaluation SPSite for this SPSite, for the purposes of determining whether an upgrade is likely to be successful.
                * @param upgrade - If true, the evaluation site collection MUST be upgraded when it is created. If false, the evaluation site collection MUST NOT be upgraded when it is created.
                * @param sendEmail - If true, a notification email MUST be sent to the requestor and the site collection administrators at the completion of the creation of the evaluation site collection. If false, such notification MUST NOT be sent.
                */
            createPreviewSPSite(upgrade: any, sendEmail: any): IBase;
            /**
                * Extend the upgrade reminder date for this SPSite by the days specified at WebApplication.UpgradeReminderDelay.
                */
            extendUpgradeReminderDate(): IBase;
            /**
                * Specifies the list template gallery, site template gallery, Web Part gallery, master page gallery, or other galleries from the site collection, including custom galleries that are defined by users.
                * @param typeCatalog - Specifies the list template type for the gallery.
                */
            getCatalog(typeCatalog: any): IBase;
            /**
                * Specifies the collection of the site collection changes from the change log that have occurred within the scope of the site collection, based on the specified query.
                * @param query - The change query.
                */
            getChanges(query: any): IBase;
            /**
                * Specifies the collection of custom list templates for a given site.
                * @param web - Specifies the site that contains the custom list templates to be returned.
                */
            getCustomListTemplates(web: any): IBase;
            /**
                * Returns the collection of site definitions that are available for creating Web sites within the site collection.
                * @param LCID - A 32-bit unsigned integer that specifies the language of the site definitions that are returned from the site collection.
                * @param overrideCompatLevel - Specifies the compatibility level of the site to return from the site collection. If this value is 0, the compatibility level of the site is used.
                */
            getWebTemplates(LCID: any, overrideCompatLevel: any): IBase;
            /**
                * Invalidates cached upgrade information about the site collection so that this information will be recomputed the next time it is needed.
                */
            invalidate(): IBase;
            /**
                * Returns true if the object needs to be upgraded; otherwise, false.
                * @param versionUpgrade - If true, version-to-version site collection upgrade is requested; otherwise false for build-to-build site collection upgrade.
                * @param recursive - If true, child upgradable objects will be inspected; otherwise false.
                */
            needsUpgradeByType(versionUpgrade: any, recursive: any): IBase;
            /**
                * Returns the site at the specified URL.
                * @param strUrl - The server-relative URL or site-relative URL of the site to return. If strUrl is empty, the top-level site is returned.
                */
            openWeb(strUrl: any): IBase<IWeb, IWebResult, IWebQueryResult>;
            /**
                * Returns the site with the specified GUID.
                * @param gWebId - A GUID that specifies which site to return.
                */
            openWebById(gWebId: any): IBase<IWeb, IWebResult, IWebQueryResult>;
            /**
                * Runs a health check as follows. (The health rules referenced below perform an implementation-dependent check on the health of a site collection)
                * @param ruleId - Specifies the rule or rules to be run. If the value is an empty GUID, all rules are run, otherwise only the specified rule is run.
                * @param bRepair - Specifies whether repairable rules are to be run in repair mode.
                * @param bRunAlays - Specifies whether the rules will be run as a result of this call or cached results from a previous run can be returned.
                */
            runHealthCheck(ruleId: any, bRepair: any, bRunAlways: any): IBase;
            /**
                * Either runs a site collection upgrade, or schedules it to be run in the future, depending on available system resources and the value of the queueOnly parameter. The user executing this method MUST be a farm administrator or a site collection administrator.
                * @param versionUpgrade - If true, specifies that a version-to-version upgrade will be performed. If false, specifies that a build-to-build upgrade will be performed.
                * @param queueOnly - If true, specifies that the upgrade will not be run immediately; it will be queued for a later run.
                * @param sendEmail - If true, a notification email will be sent to the requestor and the site collection administrators at the completion of the site collection upgrade. If false, such notification will not be sent.
                */
            runUpgradeSiteSession(versionUpgrade: any, queueOnly: any, sendEmail: any): IBase;
            /**
                * Updates it's properties.
                * @param data - The list properties to update.
                */
            update(data: any): IBase;
            /**
                * Sets whether the client-side object model (CSOM) requests that are made in the context of any site inside the site collection require UseRemoteAPIs permission.
                * @param requireUseRemoteAPIs - Specifies whether the client-side object model (CSOM) requests that are made in the context of any site inside the site collection require UseRemoteAPIs permission.
                */
            updateClientObjectModelUseRemoteAPIsPermissionSetting(requireUseRemoteAPIs: any): IBase;
    }
    /**
        * Site Properties
        */
    export interface ISiteProps {
            /** A value that specifies whether creation of declarative workflows can be used on this site collection. */
            AllowCreationDeclarativeWorkflow: boolean;
            /** Gets or sets a value that specifies whether a designer can be used on this site collection. */
            AllowDesigner: boolean;
            /** Gets or sets a value that specifies whether master page editing is allowed on this site collection. */
            AllowMasterPageEditing: boolean;
            /** Gets or sets a value that specifies whether this site collection can be reverted to its base template. */
            AllowRevertFromTemplate: boolean;
            AllowSaveDeclarativeWorkflowAsTemplate: boolean;
            AllowSavePublishDeclarativeWorkflow: boolean;
            /** Whether version to version upgrade is allowed on this site. */
            AllowSelfServiceUpgrade: boolean;
            /** Whether upgrade evaluation site collection is allowed. */
            AllowSelfServiceUpgradeEvaluation: boolean;
            AuditLogTrimmingRetention: number;
            /** Property indicating whether or not this object can be upgraded. */
            CanUpgrade: boolean;
            Classification: string;
            /** Gets the major version of this site collection for purposes of major version-level compatibility checks. */
            CompatibilityLevel: string;
            CurrentChangeToken: string;
            DisableAppViews: boolean;
            DisableCompanyWideSharingLinks: boolean;
            DisableFlows: boolean;
            ExternalSharingTipsEnabled: boolean;
            GroupId: string;
            /** Gets the GUID that identifies the site collection. */
            Id: string;
            /** Gets or sets the comment that is used in locking a site collection. */
            LockIssue: string;
            /** Gets a value that specifies the maximum number of list items allowed per operation before throttling will occur. */
            MaxItemsPerThrottledOperation: number;
            NeedsB2BUpgrade: boolean;
            /** Specifies the primary URI of this site collection, including the host name, port number, and path. */
            PrimaryUri: string;
            /** Gets or sets a Boolean value that specifies whether the site collection is read-only, locked, and unavailable for write access. */
            ReadOnly: boolean;
            RequiredDesignerVersion: string;
            SandboxedCodeActivationCapability: number;
            ServerRelativePath: Types.SP.IResourcePath;
            /** Gets the server-relative URL of the root Web site in the site collection. */
            ServerRelativeUrl: string;
            ShareByEmailEnabled: boolean;
            ShowPeoplePickerSuggestionsForGuestUsers: boolean;
            /** Property that indicates whether users will be able to share links to documents that can be accessed without logging in. */
            ShareByLinkEnabled: boolean;
            /** Gets or sets a value that specifies whether the URL structure of this site collection is viewable. */
            ShowUrlStructure: boolean;
            StatusBarLink: string;
            StatusBarText: string;
            TrimAuditLog: boolean;
            /** Gets or sets a value that specifies whether the Visual Upgrade UI of this site collection is displayed. */
            UIVersionConfigurationEnabled: boolean;
            /** Specifies the upgrade information of this site collection. */
            UpgradeInfo: Types.SP.IUpgradeInfo;
            /** Specifies a date, after which site collection administrators will be reminded to upgrade the site collection. */
            UpgradeReminderDate: string;
            UpgradeScheduled: boolean;
            UpgradeScheduledDate: string;
            /** Specifies whether the site is currently upgrading. */
            Upgrading: boolean;
            /** Gets the full URL to the root Web site of the site collection, including host name, port number, and path. */
            Url: string;
            /** Gets a value that specifies usage information about the site, including bandwidth, storage, and the number of visits to the site collection. */
            Usage: Types.SP.IUsageInfo;
    }
    /**
        * Site Query Properties
        */
    export interface ISiteQueryProps {
            Audit(): IBase<Types.SP.IAudit>;
            /**
                * Gets the event receivers associated with the site.
             */
            EventReceivers(): Types.SP.IEventReceivers;
            /**
                * Gets the event receiver associated with the site.
                * @param id - The id of the event receiver.
             */
            EventReceivers(id: string): Types.SP.IEventReceiver;
            /**
                * Gets a value that specifies the collection of the site collection features for the site collection that contains the site.
                */
            Features(): IBase;
            /**
                * Gets or sets the owner of the site collection. (Read-only in sandboxed solutions.)
                */
            Owner(): Types.SP.IUser;
            /** Gets a value that specifies the collection of recycle bin items for the site collection. */
            RecycleBin(): IBase<Types.SP.IResults<Types.SP.IRecycleBinItem>>;
            /**
                * Gets a value that returns the top-level site of the site collection.
                */
            RootWeb(): IWeb;
            SecondaryContact(): IBase;
            /**
                * Gets the user custom action for the list.
                */
            UserCustomActions(): Types.SP.IUserCustomActions;
            /**
                * Gets the user custom action(s) for the list.
                * @param id - The id of the user custom action.
                */
            UserCustomActions(id: string): Types.SP.IUserCustomAction;
    }
    /**
        * Site Query Result
        */
    export interface ISiteQueryResult extends ISiteMethods, ISiteProps {
            Audit: Types.SP.IAudit;
            /**
                * Gets the event receivers associated with the site.
             */
            EventReceivers: Types.SP.IResults<Types.SP.IEventReceiverResult>;
            /**
                * Gets a value that specifies the collection of the site collection features for the site collection that contains the site.
                */
            Features: Types.SP.IResults<Types.SP.IFeature>;
            /**
                * Gets or sets the owner of the site collection. (Read-only in sandboxed solutions.)
                */
            Owner: Types.SP.IUserResult;
            /** Gets a value that specifies the collection of recycle bin items for the site collection. */
            RecycleBin: Types.SP.IResults<Types.SP.IRecycleBinItem>;
            /**
                * Gets a value that returns the top-level site of the site collection.
                */
            RootWeb: IWebResult;
            SecondaryContact: Types.SP.IUserResult;
            /**
                * Gets the user custom action for the list.
                */
            UserCustomActions: Types.SP.IUserCustomActionResults;
    }
    /**
        * Site Result
        */
    export interface ISiteResult extends ISiteMethods, ISiteProps, ISiteQueryProps, IBase<ISite, ISiteResult, ISiteQueryResult> {
    }
    /**
        * Site
        */
    export interface ISite extends ISiteMethods, ISiteQueryProps, IBase<ISite, ISiteResult, ISiteQueryResult> {
            /**
                * Constructor
                * @param url - (Optional) The site url.
                * @param targetInfo - (Optional) The target information.
                */
            new (url?: string, targetInfo?: ITargetInfo): ISite;
    }
}

declare module 'gd-sprest/mapper/types/socialFeed' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    /**
        * Social Feed
        */
    export interface ISocialFeed {
            /**
                * Gets information about the specified user and the current user.
                * @param accountName - The login name of the user.
                */
            actor(accountName: string): IBase<ISocialRestActor>;
            /**
                * Gets the feed of activity by the specified user (Personal feed type) or gets the specified site feed.
                * @param accountName - The login name of the user.
                */
            actorFeed(accountName: string): IBase<ISocialRestThread>;
            /**
                * Gets the feed of microblog posts that mention the current user, represented by MentionReference thread types, and sets the user's unread mention count to 0.
                */
            clearMyUnreadMentionCount(): IBase;
            /**
                * Gets information about the current user.
                */
            my(): IBase<ISocialRestActor>;
            /**
                * Gets the feed of activity by the current user (Personal feed type).
                */
            myFeed(): IBase<ISocialRestFeed>;
            /**
                * Gets the feed of microblog posts that the current user likes, represented by LikeReference thread Types.SP. See Reference threads and digest threads in SharePoint Server 2013 social feeds.
                */
            myLikes(): IBase<ISocialRestFeed>;
            /**
                * Gets the feed of microblog posts that mention the current user, represented by MentionReference thread Types.SP.
                */
            myMentionFeed(): IBase<ISocialRestFeed>;
            /**
                * Gets the feed of activity by the current user and by people and content the user is following, sorted by last modified date (News feed type).
                */
            myNews(): IBase<ISocialRestFeed>;
            /**
                * Gets the feed of activity by the current user and by people and content the user is following, sorted by created date (Timeline feed type).
                */
            myTimelineFeed(): IBase<ISocialRestFeed>;
            /**
                * Gets the count of unread mentions for the current user.
                */
            myUnreadMentionCount(): IBase<ISocialRestFeed>;
            /**
                * Creates a root post in the specified site feed.
                * @param accountName - The login name of the user.
                */
            postToFeed(accountName: string, postInfo: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
            /**
                * Creates a root post in the current user's feed.
                * @param creationData - The post creation data.
                */
            postToMyFeed(creationData: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
    }
    /**
        * Social Rest Actor
        */
    export interface ISocialRestActor extends IBase<ISocialRestActor> {
            /**
                * Properties
                */
            FollowableItem?: string;
            FollwableItemActor: Types.SP.ComplexTypes.SocialActor;
            Me: Types.SP.ComplexTypes.SocialActor;
            /**
                * Methods
                */
            clearUnreadMentionCount(): IBase<ISocialRestFeed>;
    }
    /**
        * Social Rest Feed
        */
    export interface ISocialRestFeed extends IBase<ISocialRestFeed> {
            /**
                * Properties
                */
            SocialFeed: Types.SP.ComplexTypes.SocialFeed;
            /**
                * Creates a root post in the user's feed.
                */
            post(postInfo: Types.SP.ComplexTypes.SocialRestPostCreationData): ISocialRestThread;
    }
    /**
        * Social Rest Thread
        */
    export interface ISocialRestThread extends IBase<ISocialRestThread> {
            /**
                * Properties
                */
            ID?: string;
            SocialThread: Types.SP.ComplexTypes.SocialThread;
            /**
                * Methods
                */
            delete(): IBase<ISocialRestThread>;
            reply(restCreationData: Types.SP.ComplexTypes.SocialPostCreationData): IBase<ISocialRestThread>;
    }
}

declare module 'gd-sprest/mapper/types/sptypes' {
    /**
        * Calendar Types
        */
    export type ICalendarType = {
            /** Gregorian (localized) */
            Gregorian: number;
            /** Japanese Emperor Era */
            JapaneseEmperorEra: number;
            /** Taiwan Calendar */
            TaiwanCalendar: number;
            /** Korean Tangun Era */
            KoreanTangunEra: number;
            /** Hijri (Arabic Lunar) */
            Hijri: number;
            /** Thai */
            Thai: number;
            /** Hebrew Lunar */
            HebrewLunar: number;
            /** Gregorian (Middle East French) */
            GregorianMiddleEastFrench: number;
            /** Gregorian (Arabic) */
            GregorianArabic: number;
            /** Gregorian (Transliterated English) */
            GregorianTransliteratedEnglish: number;
            /** Gregorian (Transliterated French) */
            GregorianTransliteratedFrench: number;
            /** Korean and Japanese Lunar */
            KoreanandJapaneseLunar: number;
            /** Chinese Lunar */
            ChineseLunar: number;
            /** Saka Era */
            SakaEra: number;
    };
    /**
        * Check Out Types
        */
    export type ICheckOutType = {
            /** Online */
            Online: number;
            /** Offline */
            Offline: number;
            /** None */
            None: number;
    };
    /**
        * Choice Format Types
        */
    export type IChoiceFormatType = {
            /** Dropdown */
            Dropdown: number;
            /** Radio buttons */
            RadioButtons: number;
    };
    /**
        * Client Template Utility
        */
    export type IClientTemplateUtility = {
            /** User Lookup Delimiter */
            UserLookupDelimitString: string;
            /** Multi-User Value Delimiter */
            UserMultiValueDelimitString: string;
    };
    /**
        * Control Modes
        */
    export type IControlMode = {
            /** A placeholder value in the export typeeration indicating that it has no valid display mode from one of the other export typeeration values. */
            Invalid: number;
            /** Specifies that the control is in display mode. */
            Display: number;
            /** Specifies that the control is in edit mode. */
            Edit: number;
            /** Specifies that the control is in new mode. */
            New: number;
            /** Specifies that the control is in view mode. */
            View: number;
    };
    /**
        * Date Format
        */
    export type IDateFormat = {
            /** Displays only the date. */
            DateOnly: number;
            /** Displays the date and time. */
            DateTime: number;
    };
    /**
        * Draft Visibility Types
        */
    export type IDraftVisibilityType = {
            /** export typeeration whose values specify that the minimum permission is approver. */
            Approver: number;
            /** export typeeration whose values specify that the minimum permission is author. */
            Author: number;
            /** export typeeration whose values specify that the minimum permission is reader. */
            Reader: number;
    };
    /**
        * Event Receiver Types
        */
    export type IEventReceiverType = {
            /** Event that occurs before an item has been added. */
            ItemAdding: number;
            /** Event that occurs before an item is updated. */
            ItemUpdating: number;
            /** Event that occurs before an item is deleted. */
            ItemDeleting: number;
            /** Event that occurs before an item has been checked in. */
            ItemCheckingIn: number;
            /** Event that occurs before an item is checked out. */
            ItemCheckingOut: number;
            /** Event that occurs before an item is unchecked out. */
            ItemUncheckingOut: number;
            /** Event that occurs before an attachment has been added to an item. */
            ItemAttachmentAdding: number;
            /** Event that occurs before an attachment has been removed from the item. */
            ItemAttachmentDeleting: number;
            /** Event that occurs before a file is moved. */
            ItemFileMoving: number;
            /** Event that occurs before a document version is deleted. */
            ItemVersionDeleting: number;
            /** Event that occurs before a field is added to a list. */
            FieldAdding: number;
            /** Event that occurs before a field is updated. */
            FieldUpdating: number;
            /** Event that occurs before a field is removed from a list. */
            FieldDeleting: number;
            /** Event that occurs before a list is created. */
            ListAdding: number;
            /** Event that occurs before a list is deleted. */
            ListDeleting: number;
            /** Event that occurs before a site collection is deleted. */
            SiteDeleting: number;
            /** Event that occurs before a site is deleted. */
            WebDeleting: number;
            /** Event that occurs before a site URL has been changed. */
            WebMoving: number;
            /** Event that occurs before a new site is created. */
            WebAdding: number;
            /** Event that occurs before a security group is added. */
            GroupAdding: number;
            /** Event that occurs before a security group is updated. */
            GroupUpdating: number;
            /** Event that occurs before a security group is deleted. */
            GroupDeleting: number;
            /** Event that occurs before a user is added to a security group. */
            GroupUserAdding: number;
            /** Event that occurs before a user is deleted from a security group. */
            GroupUserDeleting: number;
            /** Event that occurs before a role definition is added. */
            RoleDefinitionAdding: number;
            /** Event that occurs before a role definition is updated. */
            RoleDefinitionUpdating: number;
            /** Event that occurs before a role definition is deleted. */
            RoleDefinitionDeleting: number;
            /** Event that occurs before a role assignment is added. */
            RoleAssignmentAdding: number;
            /** Event that occurs before a role assignment is deleted. */
            RoleAssignmentDeleting: number;
            /** Event that occurs before an inheritance is broken. */
            InheritanceBreaking: number;
            /** Event that occurs before an inheritance is restored. */
            InheritanceResetting: number;
            /** Event that occurs before a workflow starts running. */
            WorkflowStarting: number;
            /** Event that occurs after an item has been added. */
            ItemAdded: number;
            /** Event that occurs after an item has been updated. */
            ItemUpdated: number;
            /** Event that occurs after an item has been deleted. */
            ItemDeleted: number;
            /** Event that occurs after an item has been checked in. */
            ItemCheckedIn: number;
            /** Event that occurs after an item has been checked out. */
            ItemCheckedOut: number;
            /** Event that occurs after an item has been unchecked out. */
            ItemUncheckedOut: number;
            /** Event that occurs after an attachment has been added to the item. */
            ItemAttachmentAdded: number;
            /** Event that occurs after an attachment has been removed from the item. */
            ItemAttachmentDeleted: number;
            /** Event that occurs after a file has been moved. */
            ItemFileMoved: number;
            /** Event that occurs after a file is transformed from one type to another. */
            ItemFileConverted: number;
            /** Event that occurs after a document version is deleted. */
            ItemVersionDeleted: number;
            /** Event that occurs after a field has been added. */
            FieldAdded: number;
            /** Event that occurs after a field has been updated. */
            FieldUpdated: number;
            /** Event that occurs after a field has been removed. */
            FieldDeleted: number;
            /** Event that occurs after a list has been created. */
            ListAdded: number;
            /** Event that occurs after a list has been deleted. */
            ListDeleted: number;
            /** Event that occurs after a site collection has been deleted. */
            SiteDeleted: number;
            /** Event that occurs after a site has been deleted. */
            WebDeleted: number;
            /** Event that occurs after a site URL has been changed. */
            WebMoved: number;
            /** Event that occurs after a new site has been created, but before that new site is provisioned. */
            WebProvisioned: number;
            /** Event that occurs happens after a security group is added. */
            GroupAdded: number;
            /** Event that occurs after a security group is updated. */
            GroupUpdated: number;
            /** Event that occurs after a security group is deleted. */
            GroupDeleted: number;
            /** Event that occurs after a user is added to a security group. */
            GroupUserAdded: number;
            /** Event that occurs after a user is deleted from a security group. */
            GroupUserDeleted: number;
            /** Event that occurs after a role definition is added. */
            RoleDefinitionAdded: number;
            /** Event that occurs after a role definition is updated. */
            RoleDefinitionUpdated: number;
            /** Event that occurs after a role definition is deleted. */
            RoleDefinitionDeleted: number;
            /** Event that occurs after a role assignment is added. */
            RoleAssignmentAdded: number;
            /** Event that occurs after a role definition is deleted. */
            RoleAssignmentDeleted: number;
            /** Event that occurs after an inheritance is broken. */
            InheritanceBroken: number;
            /** Event that occurs after an inheritance is restored. */
            InheritanceReset: number;
            /** Event that occurs after a workflow has started running. */
            WorkflowStarted: number;
            /** Event that occurs after a workflow has been postponed. */
            WorkflowPostponed: number;
            /** Event that occurs after a workflow has completed running. */
            WorkflowCompleted: number;
            /** Event that occurs when an instance of an external content type has been added. */
            EntityInstanceAdded: number;
            /** Event that occurs when an instance of an external content type has been updated. */
            EntityInstanceUpdated: number;
            /** Event that occurs when an instance of an external content type has been deleted. */
            EntityInstanceDeleted: number;
            /** Event that occurs after an app is installed. */
            AppInstalled: number;
            /** Event that occurs after an app is upgraded. */
            AppUpgraded: number;
            /** Event that occurs before an app is uninstalled. */
            AppUninstalling: number;
            /** Event that occurs after a list receives an e-mail message. */
            EmailReceived: number;
            /** Identifies workflow event receivers, and is therefore not a true event type. */
            ContextEvent: number;
    };
    /**
        * Event Receiver Synchronization Types
        */
    export type IEventReceiverSynchronizationType = {
            /** Event to be triggered asynchronously. */
            Asynchronous: number;
            /** Event to be triggered synchronously. */
            Synchronization: number;
    };
    /**
        * Field Note Types
        */
    export type IFieldNoteType = {
            /** Enhance Rich Text */
            EnhancedRichText: number;
            /** Rich Text */
            RichText: number;
            /** Text Only */
            TextOnly: number;
    };
    /**
        * Field Number Type
        */
    export type IFieldNumberType = {
            /** Decimal */
            Decimal: number;
            /** Integer */
            Integer: number;
            /** Percentage */
            Percentage: number;
    };
    /**
        * Field Result Types
        */
    export type IFieldResultType = {
            /** Boolean */
            Boolean: string;
            /** Currency */
            Currency: string;
            /** Date Only */
            DateOnly: string;
            /** Date & Time */
            DateTime: string;
            /** Number */
            Number: string;
            /** Text */
            Text: string;
    };
    /**
        * Field Types
        */
    export type IFieldType = {
            /** Specifies that the field indicates whether a meeting in a calendar list is an all-day event. */
            AllDayEvent: number;
            /** Specifies that the field indicates whether the list item has attachments. */
            Attachments: number;
            /** Specifies that the field contains a Boolean value. */
            Boolean: number;
            /** Specifies that the field is a calculated field. */
            Calculated: number;
            /** Specifies that the field contains a single value from a set of specified values. */
            Choice: number;
            /** Specifies that the field is a computed field. */
            Computed: number;
            /** Specifies that the field contains a content type identifier as a value. */
            ContentTypeId: number;
            /** Specifies that the field contains a monotonically increasing integer. */
            Counter: number;
            /** Specifies that the field contains a link between projects in a Meeting Workspace site. */
            CrossProjectLink: number;
            /** Specifies that the field contains a currency value. */
            Currency: number;
            /** Specifies that the field contains a date and time value or a date-only value. */
            DateTime: number;
            /** Specifies that the type of the field was set to an invalid value. */
            Error: number;
            /** Specifies that the field contains the leaf name of a document as a value. */
            File: number;
            /** Specifies that the field contains geographical location values. */
            Geolocation: number;
            /** Specifies that the field contains rating scale values for a survey list. */
            GridChoice: number;
            /** Specifies that the field contains a GUID value. */
            Guid: number;
            /** Specifies that the field contains an integer value. */
            Integer: number;
            /** Must not be used. */
            Invalid: number;
            /** Specifies that the field is a lookup field. */
            Lookup: number;
            /** Must not be used. */
            MaxItems: number;
            /** Specifies that the field indicates moderation status. */
            ModStat: number;
            /** Specifies that the field contains one or more values from a set of specified values. */
            MultiChoice: number;
            /** Specifies that the field contains multiple lines of text. */
            Note: number;
            /** Specifies that the field contains a floating-point number value. */
            Number: number;
            /** Specifies that the field separates questions in a survey list onto multiple pages. */
            PageSeparator: number;
            /** Specifies that the field indicates whether a meeting in a calendar list recurs. */
            Recurrence: number;
            /** Specifies that the field contains a single line of text. */
            Text: number;
            /** Specifies that the field indicates the position of a discussion item in a threaded view of a discussion board. */
            ThreadIndex: number;
            /** Specifies that the field indicates the thread for a discussion item in a threaded view of a discussion board. */
            Threading: number;
            /** Specifies that the field contains a URI and an optional description of the URI. */
            URL: number;
            /** Specifies that the field contains one or more users and groups as values. */
            User: number;
            /** Specifies that the field contains the most recent event in a workflow instance. */
            WorkflowEventType: number;
            /** Specifies that the field indicates the status of a workflow instance on a list item. */
            WorkflowStatus: number;
    };
    /**
        * Field User Selection Types
        */
    export type IFieldUserSelectionType = {
            /** People only. */
            PeopleOnly: number;
            /** People and groups. */
            PeopleAndGroups: number;
    };
    /**
        * File Template Types
     */
    export type IFileTemplateType = {
            /** export typeeration whose value specifies default form template. */
            FormPage: number;
            /** export typeeration whose value specifies default view template. */
            StandardPage: number;
            /** export typeeration whose value specifies default wiki template. */
            WikiPage: number;
    };
    /**
        * Friendly Date Format
        */
    export type IFriendlyDateFormat = {
            /** Unspecified */
            Unspecified: number;
            /** Disabled (standard absolute) */
            Disabled: number;
            /** Relative (standard friendly relative) */
            Relative: number;
    };
    /**
        * List Template Types
     */
    export type IListTemplateType = {
            /** Access Request List */
            AccessRequest: number;
            /** Administrator Tasks */
            AdminTasks: number;
            /** Agenda (Meeting) */
            Agenda: number;
            /** App Data Catalog */
            AppDataCatalog: number;
            /** Announcements */
            Announcements: number;
            /** Call Track */
            CallTrack: number;
            /** Categories (Blog) */
            Categories: number;
            /** Circulation */
            Circulation: number;
            /** Comments (Blog) */
            Comments: number;
            /** Contacts */
            Contacts: number;
            /** Custom grid for a list */
            CustomGrid: number;
            /** Data connection library for sharing information about external data connections */
            DataConnectionLibrary: number;
            /** Data sources for a site */
            DataSources: number;
            /** Decisions (Meeting) */
            Decision: number;
            /** Design Catalog */
            DesignCatalog: number;
            /** Draft Apps library in Developer Site */
            DeveloperSiteDraftApps: number;
            /** Discussion board */
            DiscussionBoard: number;
            /** Document library */
            DocumentLibrary: number;
            /** Calendar */
            Events: number;
            /** External */
            ExternalList: number;
            /** Facility */
            Facility: number;
            /** Project Tasks */
            GanttTasks: number;
            /** Custom list */
            GenericList: number;
            /** Health Reports */
            HealthReports: number;
            /** Health Rules */
            HealthRules: number;
            /** Help Library */
            HelpLibrary: number;
            /** Holidays */
            Holidays: number;
            /** Workspace Pages (Meeting) */
            HomePageLibrary: number;
            /** IME (Input Method Editor) Dictionary */
            IMEDic: number;
            /** Issue tracking */
            IssueTracking: number;
            /** Links */
            Links: number;
            /** List Template gallery */
            ListTemplateCatalog: number;
            /** Master Page gallery */
            MasterPageCatalog: number;
            /** Maintenance Logs Library */
            MaintenanceLogs: number;
            /** Objectives (Meeting) */
            MeetingObjective: number;
            /** Meeting Series (Meeting) */
            Meetings: number;
            /** Attendees (Meeting) */
            MeetingUser: number;
            /** My Site Document Library */
            MySiteDocumentLibrary: number;
            /** Posts (Blog) */
            Posts: number;
            /** No Code Public Workflow */
            NoCodePublic: number;
            /** No Code Workflows */
            NoCodeWorkflows: number;
            /** Picture library */
            PictureLibrary: number;
            /** Solutions */
            SolutionCatalog: number;
            /** Survey */
            Survey: number;
            /** Tasks */
            Tasks: number;
            /** Tasks with Timeline and Hierarchy */
            TasksWithTimelineAndHierarchy: number;
            /** Text Box (Meeting) */
            TextBox: number;
            /** Themes */
            ThemeCatalog: number;
            /** Things To Bring (Meeting) */
            ThingsToBring: number;
            /** Timecard */
            Timecard: number;
            /** User Information */
            UserInformation: number;
            /** Wiki Page Library */
            WebPageLibrary: number;
            /** Web Part gallery */
            WebPartCatalog: number;
            /** Site template gallery */
            WebTemplateCatalog: number;
            /** Whereabouts */
            Whereabouts: number;
            /** Workflow History */
            WorkflowHistory: number;
            /** Custom Workflow Process */
            WorkflowProcess: number;
            /** XML Form library */
            XMLForm: number;
    };
    /**
        * Locale LCID Types
        */
    export type ILocaleLCIDType = {
            Afrikaans: number;
            Albanian: number;
            ArabicAlgeria: number;
            ArabicBahrain: number;
            ArabicEgypt: number;
            ArabicIraq: number;
            ArabicJordan: number;
            ArabicLebanon: number;
            ArabicLibya: number;
            ArabicMorocco: number;
            ArabicOman: number;
            ArabicQatar: number;
            ArabicSaudiArabia: number;
            ArabicSyria: number;
            ArabicTunisia: number;
            ArabicUAE: number;
            ArabicYemen: number;
            Armenian: number;
            AzeriCyrillic: number;
            AzeriLatin: number;
            Basque: number;
            Belarusian: number;
            Bulgarian: number;
            Catalan: number;
            ChineseHongKongSAR: number;
            ChineseMacaoSAR: number;
            ChinesePRC: number;
            ChineseSingapore: number;
            ChineseTaiwan: number;
            CroatianCroatia: number;
            Czech: number;
            Danish: number;
            Divehi: number;
            DutchBelgium: number;
            DutchNetherlands: number;
            EnglishAustralia: number;
            EnglishBelize: number;
            EnglishCanada: number;
            EnglishCaribbean: number;
            EnglishIreland: number;
            EnglishJamaica: number;
            EnglishNewZealand: number;
            EnglishPhilippines: number;
            EnglishSouthAfrica: number;
            EnglishTrinidad: number;
            EnglishUnitedKingdom: number;
            EnglishUnitedStates: number;
            EnglishZimbabwe: number;
            Estonian: number;
            Faeroese: number;
            Finnish: number;
            FrenchBelgium: number;
            FrenchCanada: number;
            FrenchFrance: number;
            FrenchLuxembourg: number;
            FrenchMonaco: number;
            FrenchSwitzerland: number;
            Galician: number;
            Georgian: number;
            GermanAustria: number;
            GermanGermany: number;
            GermanLiechtenstein: number;
            GermanLuxembourg: number;
            GermanSwitzerland: number;
            Greek: number;
            Gujarati: number;
            HebrewIsrael: number;
            HindiIndia: number;
            Hungarian: number;
            Icelandic: number;
            Indonesian: number;
            ItalianItaly: number;
            ItalianSwitzerland: number;
            Japanese: number;
            Kannada: number;
            Kazakh: number;
            Konkani: number;
            Korean: number;
            KyrgyzCyrillic: number;
            Latvian: number;
            Lithuanian: number;
            MacedonianFYROM: number;
            Malay: number;
            MalayBruneiDarussalam: number;
            Marathi: number;
            MongolianCyrillic: number;
            NorwegianBokmal: number;
            NorwegianNynorsk: number;
            PersianIran: number;
            Polish: number;
            PortugueseBrazil: number;
            PortuguesePortugal: number;
            Punjabi: number;
            Romanian: number;
            Russian: number;
            Sanskrit: number;
            SerbianCyrillic: number;
            SerbianLatin: number;
            Slovak: number;
            Slovenian: number;
            SpanishArgentina: number;
            SpanishBolivia: number;
            SpanishChile: number;
            SpanishColombia: number;
            SpanishCostaRica: number;
            SpanishDominicanRepublic: number;
            SpanishEcuador: number;
            SpanishElSalvador: number;
            SpanishGuatemala: number;
            SpanishHonduras: number;
            SpanishMexico: number;
            SpanishNicaragua: number;
            SpanishPanama: number;
            SpanishParaguay: number;
            SpanishPeru: number;
            SpanishPuertoRico: number;
            SpanishSpain: number;
            SpanishUruguay: number;
            SpanishVenezuela: number;
            Swahili: number;
            Swedish: number;
            SwedishFinland: number;
            Syriac: number;
            Tamil: number;
            Tatar: number;
            Telugu: number;
            ThaiThailand: number;
            Turkish: number;
            Ukrainian: number;
            UrduPakistan: number;
            UzbekCyrillic: number;
            UzbekLatin: number;
            Vietnamese: number;
    };
    /**
        * Node Types
        */
    export type INodeType = {
            /** Specifies no node types. */
            None: number;
            /** Specifies any type of SPWeb site. */
            Area: number;
            /** Specifies a List item in the Pages list. */
            Page: number;
            /** Specifies a Microsoft SharePoint Foundation list (SPList). */
            List: number;
            /** Specifies a Microsoft SharePoint Foundation list item (SPListItem). */
            ListItem: number;
            /** Specifies a CMS Page Layout. */
            PageLayout: number;
            /**  Specifies a navigation heading. */
            Heading: number;
            /** Specifies an authored link that references a page. */
            AuthoredLinkToPage: number;
            /** Specifies an authored link that references a Web site or area. */
            AuthoredLinkToWeb: number;
            /** Specifies a generic authored link. */
            AuthoredLinkPlain: number;
            /** Specifies a custom node type that may be useful for extensibility purposes. */
            Custom: number;
            /** Represents an error specific to node types. */
            Error: number;
            /** Specifies any type of authored link. */
            AuthoredLink: number;
            /** Specifies a combination of Area, Page, Heading and AuthoredLink. Navigation uses this value to determine which node types to return by default. */
            Default: number;
            /** Specifies all node types, including Area, Page, List, ListItem, PageLayout, Heading, AuthoredLink, and Custom. */
            All: number;
    };
    /**
        * Page Types
        */
    export type IPageType = {
            /** export typeeration whose values specify a page that is the default view for a list. */
            DefaultView: number;
            /** export typeeration whose values specify a page suitable for display within a dialog box on a client computer. */
            DialogView: number;
            /** export typeeration whose values specify a list form for displaying a list item. */
            DisplayForm: number;
            /** export typeeration whose values specify a list form for displaying a list item, suitable for display within a dialog box on a client computer. */
            DisplayFormDialog: number;
            /** export typeeration whose values specify a list form for editing a list item. */
            EditForm: number;
            /** export typeeration whose values specify a list form for editing a list item, suitable for display within a dialog box on a client computer. */
            EditFormDialog: number;
            /** export typeeration whose values specify a page that does not correspond to a list view or a list form. */
            Invalid: number;
            /** export typeeration whose values specify a list form for creating a new list item. */
            NewForm: number;
            /** export typeeration whose values specify a list form for creating a new list item, suitable for display within a dialog box on a client computer. */
            NewFormDialog: number;
            /** export typeeration whose values specify a page that is a list view and is not the default view for a list. */
            NormalView: number;
            /** export typeeration whose values specify the total number of valid page types. */
            Page_MAXITEMS: number;
            /** export typeeration whose values specify a list form for displaying or editing a list item and represented by a form template (.xsn) file. */
            SolutionForm: number;
            /** export typeeration whose values specify a page that is a list view. */
            View: number;
    };
    /**
        * Personal Site Capabilities
        */
    export type IPersonalSiteCapabilities = {
            Education: number;
            Guest: number;
            MyTasksDashboard: number;
            None: number;
            Profile: number;
            Social: number;
            Storage: number;
    };
    /**
        * Principal Sources
        */
    export type IPrincipalSources = {
            /** Search all principal sources. */
            All: number;
            /** Search the current membership provider. */
            MembershipProvider: number;
            /** Search no principal sources. */
            None: number;
            /** Search the current role provider. */
            RoleProvider: number;
            /** Search the user information list. */
            UserInfoList: number;
            /** Search active directory. */
            Windows: number;
    };
    /**
        * Principal Types
        */
    export type IPrincipalTypes = {
            /** Return all entity types. */
            All: number;
            /** Return distribution list entity types. */
            DistributionList: number;
            /** Return no principal types. */
            None: number;
            /** Return security group entity types. */
            SecurityGroup: number;
            /** Return sharepoint group entity types. */
            SharePointGroup: number;
            /** Return user entity types. */
            User: number;
    };
    /**
        * Relationship Delete Behavior Types
        */
    export type IRelationshipDeleteBehaviorType = {
            /** No relationship behavior is applied. */
            None: number;
            /** Cascade behavior. */
            Cascade: number;
            /** Restrict behavior. */
            Restrict: number;
    };
    /**
        * Reordering Rule Match Types
        */
    export type IReorderingRuleMatchType = {
            ResultContainsKeyword: number;
            TitleContainsKeyword: number;
            TitleMatchesKeyword: number;
            UrlStartsWith: number;
            UrlExactlyMatches: number;
            ContentTypeIs: number;
            FileExtensionMatches: number;
            ResultHasTag: number;
            ManualCondition: number;
    };
    /**
        * Role Types
        */
    export type IRoleType = {
            /** Has all rights from other roles, plus rights to manage roles and view usage analysis data. Includes all rights in the WebDesigner role, plus the following: ManageListPermissions, ManageRoles, ManageSubwebs, ViewUsageData. The Administrator role cannot be customized or deleted, and must always contain at least one member. Members of the Administrator role always have access to, or can grant themselves access to, any item in the Web site. */
            Administrator: number;
            /** Has Reader rights, plus rights to add items, edit items, delete items, manage list permissions, manage personal views, personalize Web Part Pages, and browse directories. Includes all rights in the Reader role, plus the following: AddDelPrivateWebParts, AddListItems, BrowseDirectories, CreatePersonalGroups, DeleteListItems, EditListItems, ManagePersonalViews, UpdatePersonalWebParts. Contributors cannot create new lists or document libraries, but they can add content to existing lists and document libraries. */
            Contributor: number;
            /** Has Contributor rights, plus rights to manage lists. Includes all rights in the Contributor role. Editors can create new lists or document libraries. */
            Editor: number;
            /** Has limited rights to view pages and specific page elements. This role is used to give users access to a particular page, list, or item in a list, without granting rights to view the entire site. Users cannot be added explicitly to the Guest role; users who are given access to lists or document libraries by way of per-list permissions are added automatically to the Guest role. The Guest role cannot be customized or deleted. */
            Guest: number;
            /** export typeeration whose values specify that there are no rights on the Web site. */
            None: number;
            /** Has rights to view items, personalize Web parts, use alerts, and create a top-level Web site using Self-Service Site Creation. A reader can only read a site; the reader cannot add content. When a reader creates a site using Self-Service Site Creation, the reader becomes the site owner and a member of the Administrator role for the new site. This does not affect the user's role membership for any other site. Rights included: CreateSSCSite, ViewListItems, ViewPages. */
            Reader: number;
            /** Has Contributor rights, plus rights to cancel check out, delete items, manage lists, add and customize pages, define and apply themes and borders, and link style sheets. Includes all rights in the Contributor role, plus the following: AddAndCustomizePages, ApplyStyleSheets, ApplyThemeAndBorder, CancelCheckout, ManageLists.WebDesigners can modify the structure of the site and create new lists or document libraries. */
            WebDesigner: number;
    };
    /**
        * Status Pri Color
        */
    export interface IStatusPriColor {
            /** Information */
            Blue: string;
            /** Success */
            Green: string;
            /** Very Important */
            Red: string;
            /** Important */
            Yellow: string;
    }
    /**
        * URL Format Types
        */
    export type IUrlFormatType = {
            /** Hyperlink */
            Hyperlink: number;
            /** Image */
            Image: number;
    };
    /**
        * URL Zones
        */
    export type IURLZones = {
            /** Search the custom zone. */
            Custom: number;
            /** Search the default zone. */
            Default: number;
            /** Search the extranet zone. */
            Extranet: number;
            /** Search the internet zone. */
            Internet: number;
            /** Search the intranet zone. */
            Intranet: number;
    };
    /**
        * User Custom Action Registration Types
        */
    export type IUserCustomActionRegistrationType = {
            /** export typeeration whose values specify that the object association is not specified. */
            None: number;
            /** export typeeration whose values specify that the custom action is associated with a list. */
            List: number;
            /** export typeeration whose values specify that the custom action is associated with a content type. */
            ContentType: number;
            /** export typeeration whose values specify that the custom action is associated with a ProgID. */
            ProgId: number;
            /** export typeeration whose values specify that the custom action is associated with a file extension. */
            FileType: number;
    };
    /**
        * View Types
        */
    export type IViewType = {
            /** export typeeration whose values specify a calendar list view type. */
            Calendar: number;
            /** export typeeration whose values specify a chart list view type. */
            Chart: number;
            /** export typeeration whose values specify a Gantt chart list view type. */
            Gantt: number;
            /** export typeeration whose values specify a datasheet list view type. */
            Grid: number;
            /** export typeeration whose values specify an HTML list view type. */
            Html: number;
            /** export typeeration whose values specify a list view type that displays recurring events. */
            Recurrence: number;
    };
}

declare module 'gd-sprest/mapper/types/tenantApp' {
    import { IBase } from "gd-sprest/utils/types";
    /**
        * Methods
        */
    export interface ITenantAppMethods {
            /**
                * Deploy solution package in tenant app catalog
                * Enable solution to be available to install to specific sites. This API is designed to be executed in the context of the tenant app catalog site.
                */
            deploy(): IBase;
            /**
                * Install solution package from tenant app catalog to SharePoint site
                * Install a solution package with specific identifier from tenant app catalog to the site based on URL context. This REST call can be executed in the context of the site where the install operation should happen.
                */
            install(): IBase;
            /**
                * Remove solution package from tenant app catalog
                * Remove the solution package from the tenant app catalog. This API is designed to be executed in the context of the tenant app catalog site.
                */
            remove(): IBase;
            /**
                * Retract solution package in the tenant app catalog
                * Retract solution to be available from the sites. This API is designed to be executed in the context of the tenant app catalog site.
                */
            retract(): IBase;
            /**
                * Uninstall solution package from SharePoint site
                * Uninstall a solution package from the site. This REST call can be executed in the context of the site where the uninstall operation should happen.
                */
            uninstall(): IBase;
            /**
                * Upgrade solution package in SharePoint site
                * Upgrade a solution package from the site to a newer version available in the tenant app catalog. This REST call can be executed in the context of the site where the upgrade operation should happen.
                */
            upgrade(): IBase;
    }
    /**
        * Properties
        */
    export interface ITenantAppProps {
            /** The app version. */
            AppCatalogVersion: string;
            /** Flag indicating an upgrade is available. */
            CanUpgrade: boolean;
            /** Flag indicating if the current version is deployed. */
            CurrentVersionDeployed: boolean;
            /** Flag indicating if the app is deployed. */
            Deployed: boolean;
            /** The app id. */
            ID: string;
            /** The installed version. */
            InstalledVersion: string;
            /** Flag indicating if this is a client-side solution. */
            IsClientSideSolution: boolean;
            /** The app title. */
            Title: string;
    }
    /**
        * Tenant App Result
        */
    export interface ITenantAppResult extends ITenantAppMethods, ITenantAppProps, IBase<ITenantApp, ITenantAppResult> {
    }
    /**
        * Tenant App
        */
    export interface ITenantApp extends ITenantAppMethods, IBase<ITenantApp, ITenantAppResult> {
    }
}

declare module 'gd-sprest/mapper/types/tenantAppCatalog' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ITenantApp, ITenantApps } from "gd-sprest/mapper/types";
    /**
        * Tenant App Catalog Methods
        */
    export interface ITenantAppCatalogMethods {
            /**
                * Add solution package to tenant app catalog
                * Adding solution to the tenant app catalog. This API is designed to be executed in the context of the tenant app catalog site.
                * @param overwrite - Flag to overwrite the solution.
                * @param url - The file name of the solution.
                */
            add(overwrite?: boolean, url?: string): IBase<Types.SP.IFile, Types.SP.IFileResult>;
            /**
                * Deploy solution package in tenant app catalog
                * Enable solution to be available to install to specific sites. This API is designed to be executed in the context of the tenant app catalog site.
                * @param guid - The app id.
                */
            getById(guid: string): ITenantApp;
    }
    /**
        * Tenant App Catalog Properties
        */
    export interface ITenantAppCatalogProps {
            /**
                * List available packages from tenant app catalog
                * REST API for getting list of available SharePoint Framework solutions or add-ins in tenant app catalog.
                */
            AvailableApps(): ITenantApps;
            /**
                * No documentation available. Need to research this.
                */
            SiteCollectionAppCatalogsSites(): IBaseCollection;
    }
    /**
        * Tenant App Catalog Query Properties
        */
    export interface ITenantAppCatalogQueryProps {
            /**
                * List available packages from tenant app catalog
                * REST API for getting list of available SharePoint Framework solutions or add-ins in tenant app catalog.
                */
            AvailableApps(): ITenantApps;
    }
    /**
        * Tenant App Catalog Query Result
        */
    export interface ITenantAppCatalogQueryResult extends ITenantAppCatalogMethods, ITenantAppCatalogProps {
    }
    /**
        * Tenant App Catalog Result
        */
    export interface ITenantAppCatalogResult extends ITenantAppCatalogMethods, ITenantAppCatalogProps, ITenantAppCatalogQueryProps, IBase<ITenantAppCatalog, ITenantAppCatalogResult, ITenantAppCatalogQueryResult> {
    }
    /**
        * Tenant App Catalog
        */
    export interface ITenantAppCatalog extends ITenantAppCatalogMethods, ITenantAppCatalogQueryProps, IBase<ITenantAppCatalog, ITenantAppCatalogResult, ITenantAppCatalogQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/tenantApps' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { ITenantApp } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface ITenantAppsMethods {
            /**
                * Details on individual solution package from tenant app catalog
                * REST API for getting details on individual SharePoint Framework solution or add-in available in the tenant app catalog.
                * @param guid - The app id.
                */
            getById(guid: string): IBase<ITenantApp>;
    }
    /**
        * Tenant Apps
        */
    export interface ITenantApps extends ITenantAppsMethods, IBaseCollection<ITenantApp> {
    }
}

declare module 'gd-sprest/mapper/types/types' {
    import { IUser } from "gd-sprest/mapper/types/user";
    /**
        * App Tiles
        */
    export interface IAppTiles {
            AppId: string;
            AppPrincipalId: string;
            AppSource: number;
            AppStatus: number;
            AppType: number;
            AssetId: string;
            BaseTemplate: number;
            ChildCount: number;
            ContentMarket: string;
            CustomSettingsUrl: string;
            Description: string;
            IsCorporateCatalogSite: boolean;
            LastModified: string;
            LastModifiedDate: string;
            ProductId: string;
            Target: string;
            Thumbnail: string;
            Title: string;
            Version: number;
    }
    /**
        * Base Permissions
        */
    export interface IBasePermissions {
            High: number;
            Low: number;
    }
    /**
        * Contains Confidential Information
        */
    export interface IContainsConfidentialInfo {
            ContainsConfidentialInfo: boolean;
            ContainsConfidentialInfoLearnMoreUrl: string;
            ExternalSharingTipsEnabled: boolean;
            ExternalSharingTipsInfoLearnMoreUrl: string;
    }
    /**
        * Context Information
        */
    export interface IContextInfo {
            FormDigestTimeoutSeconds: number;
            FormDigestValue: string;
            LibraryVersion: string;
            SiteFullUrl: string;
            SupportedSchemaVersions: IResults<string>;
            WebFullUrl: string;
    }
    /**
        * Entity Data
        */
    export interface IEntityData {
            /** Account Name */
            AccountName?: string;
            /** Department. */
            Department?: string;
            /** EMail */
            Email?: string;
            /** */
            IsAltSecIdPresent?: boolean;
            /** Mobile Phone */
            MobilePhone?: string;
            /** Object ID */
            ObjectId?: string;
            /** Principal Type */
            PrincipalType?: string;
            /** SharePoint Group ID */
            SPGroupID?: string;
            /** SharePoint User ID */
            SPUserID?: string;
            /** Title */
            Title?: string;
    }
    /**
        * Feature
        */
    export interface IFeature {
            DefinitionId: string;
    }
    /**
        * Form
        */
    export interface IForm {
            Id: string;
            ResourcePath: IResourcePath;
            ServerRelativeUrl: string;
            FormType: number;
    }
    /**
        * Information Rights Management Settings
        */
    export interface IInformationRightsManagementSettings {
            AllowPrint: boolean;
            AllowScript: boolean;
            AllowWriteCopy: boolean;
            DisableDocumentBrowserView: boolean;
            DocumentAccessExpireDays: number;
            DocumentLibraryProtectionExpireDate: string;
            EnableDocumentAccessExpire: boolean;
            EnableDocumentBrowserPublishingView: boolean;
            EnableGroupProtection: boolean;
            GroupName: string;
            LicenseCacheExpireDays: number;
            PolicyDescription: string;
            PolicyTitle: string;
            TemplateId: string;
    }
    /**
        * Menu Node
        */
    export interface IMenuNode {
            /** Node properties. */
            CustomProperties: IResults<any>;
            /** The URL of the navigation node relative to the URL of the parent navigation node. */
            FriendlyUrlSegment: string;
            /** Not part of documentation. */
            IsDeleted: boolean;
            /** Indicates whether the node is hidden in the navigation menu. During editing, all nodes temporarily become visible. */
            IsHidden: boolean;
            /** The identifier for the navigation node in the menu tree. */
            Key: string;
            /** The child nodes. */
            Nodes: IResults<IMenuNode>;
            /** The type of the navigation node. */
            NodeType: number;
            /**
                * The relative or absolute URL of the navigation node.
                * Site-relative URLs can start with the "~site" token and site collection-relative URLs can start with the "~sitecollection" token.
                * Applies only to SimpleLink node types.
                */
            SimpleUrl: string;
            /** The title of the navigation node. */
            Title: string;
    }
    /**
        * Menu State
        */
    export interface IMenuState {
            /** The URL of the navigation node relative to the URL of the parent navigation node. */
            FriendlyUrlPrefix: string;
            /** The child nodes. */
            Nodes: IResults<IMenuNode>;
            /**
                * The relative or absolute URL of the navigation node.
                * Site-relative URLs can begin with the "~site" URL token and site collection-relative URLs can begin with the "~sitecollection" URL token.
                * Applies only to SimpleLink node types.
                */
            SimpleUrl: string;
            /**
                * The string that replaces the "~sitecollection" token in site collection-relative links.
                * For example, to get the Try Link command to work with the relative link ~sitecollection/Pages/MyPage.aspx, this value might be http://contoso.com/sites/site1/.
                */
            SPSitePrefix: string;
            /**
                * The string that replaces the "~site" token in site-relative links.
                * For example, to get the Try Link command to work with the relative link ~site/Pages/MyPage.aspx, this value might be http://contoso.com/sites/site1/web1.
                */
            SPWebPrefix: string;
            /** The identifier of the root node in the menu tree. */
            StartingNodeKey: string;
            /**
                * The title of the root node in the menu tree.
                * (Example: "Document Center")
                */
            StartingNodeTitle: string;
            /**
                * An implementation-specific value that the server uses to detect external changes.
                * For example, it could be a change timestamp for the database or a monotonically increasing version number such as "2009-06-15T20:45:30Z".
                */
            Version: string;
    }
    /**
        * Navigation
        */
    export interface INavigation {
            QuickLaunch: IResults<INavigationNode>;
            TopNavigationBar: IResults<INavigationNode>;
    }
    /**
        * Navigation Node
        */
    export interface INavigationNode {
            Id: number;
            IsDocLib: boolean;
            IsExternal: boolean;
            IsVisible: boolean;
            ListTemplateType: number;
            Title: string;
            Url: string;
    }
    /**
        * OData Query
        */
    export interface ODataQuery {
            /** An optional custom query string */
            Custom?: string;
            /** The properties to expand. */
            Expand?: Array<string>;
            /** The filters. */
            Filter?: string;
            /**
                * Flag to get all items.
                * Use this flag to get past the 5000 limit.
                */
            GetAllItems?: boolean;
            /** The order by fields. */
            OrderBy?: Array<string>;
            /** The fields to select. */
            Select?: Array<string>;
            /** The number of results to skip. */
            Skip?: number;
            /** The max number of results to return. */
            Top?: number;
    }
    /**
        * Recycle Bin Item
        */
    export interface IRecycleBinItem {
            Author: IUser;
            AuthorEmail: string;
            AuthorName: string;
            DeletedBy: IUser;
            DeletedByEmail: string;
            DeletedByName: string;
            DeletedDate: string;
            DeletedDateLocalFormatted: string;
            DirName: string;
            DirNamePath: IResourcePath;
            Id: string;
            ItemState: number;
            ItemType: number;
            LeafName: string;
            LeafNamePath: IResourcePath;
            Size: string;
            Title: string;
    }
    /**
        * Regional Settings
        */
    export interface IRegionalSettings {
            AdjustHijriDays: number;
            AlternateCalendarType: number;
            AM: string;
            CalendarType: number;
            Collation: number;
            CollationLCID: number;
            DateFormat: number;
            DateSeparator: string;
            DecimalSeparator: string;
            DigitGrouping: string;
            FirstDayOfWeek: number;
            FirstWeekOfYear: number;
            IsEastAsia: boolean;
            IsRightToLeft: boolean;
            IsUIRightToLeft: boolean;
            ListSeparator: string;
            LocaleId: number;
            NegativeSign: string;
            NegNumberMode: number;
            PM: string;
            PositiveSign: string;
            ShowWeeks: boolean;
            ThousandSeparator: string;
            Time24: boolean;
            TimeMarkerPosition: number;
            TimeSeparator: string;
            WorkDayEndHour: number;
            WorkDays: number;
            WorkDayStartHour: number;
    }
    /**
        * Resource Path
        */
    export interface IResourcePath {
            DecodedUrl: string;
    }
    /**
        * Results
        */
    export interface IResults<P> {
            /** The collection data */
            results: Array<P>;
    }
    /**
        * String Value
        */
    export interface IStringValue {
            StringValue: string;
    }
    /**
        * Subscription
        */
    export interface ISubscription {
    }
    /**
        * Theme Information
        */
    export interface IThemeInfo {
            AccessibleDescription: string;
            ThemeBackgroundImageUri: string;
    }
    /**
        * Upgrade Info
        */
    export interface IUpgradeInfo {
            ErrorFile: string;
            Errors: number;
            LastUpdated: string;
            LogFile: string;
            RequestDate: string;
            RetryCount: number;
            StartTime: string;
            Status: number;
            UpgradeType: number;
            Warnings: number;
    }
    /**
        * Usage Information
        */
    export interface IUsageInfo {
            Bandwidth: number;
            DiscussionStorage: number;
            Hits: number;
            Storage: number;
            StoragePercentageUsed: number;
            Visits: number;
    }
    /**
        * Visualization
        */
    export interface IVisualization {
            DefaultScreen: IVisualizationStyleSet;
            DetailView: IVisualizationStyleSet;
            MediumScreen: IVisualizationStyleSet;
            SmallScreen: IVisualizationStyleSet;
            VisualizationAppInfo: IVisualizationAppInfo;
            VisualizationType: number;
    }
    /**
        * Visualization App Information
        */
    export interface IVisualizationAppInfo {
            DesignUri: string;
            Id: string;
            RuntimeUri: string;
    }
    /**
        * Visualization Field
        */
    export interface IVisualizationField {
            InternalName: string;
            Style: string;
    }
    /**
        * Visualization Style Set
        */
    export interface IVisualizationStyleSet {
            AspectRatio: string;
            BackgroundColor: string;
            Fields: IVisualizationField;
            MinHeight: string;
    }
    /**
        * Web Context Information
        */
    export interface IContextWebInfo {
            GetContextWebInformation: IContextInfo;
    }
    /**
        * Workflow Template
        */
    export interface IWorkflowTemplate {
            AllowManual: boolean;
            AssociationUrl: string;
            AutoStartChange: boolean;
            AutoStartCreate: boolean;
            Description: string;
            Id: string;
            IsDeclarative: boolean;
            Name: string;
            PermissionsManual: IBasePermissions;
    }
}

declare module 'gd-sprest/mapper/types/user' {
    import { IBase } from "gd-sprest/utils/types";
    import { IGroup, ISiteGroupResults, ISiteGroups, IUser } from "gd-sprest/mapper/types";
    /**
        * User Creation Information
        */
    export interface IUserCreationInformation {
            Email?: string;
            LoginName: string;
            Title?: string;
    }
    /**
        * User Methods
        */
    export interface IUserMethods {
            /**
                * Deletes the user custom action.
                */
            delete(): IBase;
    }
    /**
        * User Properties
        */
    export interface IUserProps {
            /** Gets or sets the email address of the user. */
            Email: string;
            /** Gets a value that specifies the member identifier for the user or group. */
            Id: string;
            /** Gets a value that indicates whether this member should be hidden in the UI. */
            IsHiddenInUI: boolean;
            IsSharedByEmailGuestUser: boolean;
            /** Gets or sets a Boolean value that specifies whether the user is a site collection administrator. */
            IsSiteAdmin: boolean;
            /** Gets the login name of the user. */
            LoginName: string;
            /** Gets a value containing the type of the principal. Represents a bitwise SP.PrincipalType value: None = 0; User = 1; DistributionList = 2; SecurityGroup = 4; SharePointGroup = 8; All = 15. */
            PrincipalType: string;
            /** Gets or sets a value that specifies the name of the principal. */
            Title: string;
            /** Gets the information of the user that contains the user's name identifier and the issuer of the user's name identifier. */
            UserId: string;
    }
    /**
        * User Query Properties
        */
    export interface IUserQueryProps {
            /**
                * Gets the groups of which the user is a member.
                */
            Groups(): ISiteGroups;
            /**
                * Gets the group of which the user is a member.
                * @param id - The group id.
                */
            Groups(id: number): IBase<IGroup>;
    }
    /**
        * User Query Result
        */
    export interface IUserQueryResult extends IUserMethods, IUserProps {
            /**
                * Gets the groups of which the user is a member.
                */
            Groups: ISiteGroupResults;
    }
    /**
        * User Result
        */
    export interface IUserResult extends IUserMethods, IUserProps, IUserQueryProps, IBase<IUser, IUserResult, IUserQueryResult> {
    }
    /**
        * User
        */
    export interface IUser extends IUserMethods, IUserQueryProps, IBase<IUser, IUserResult, IUserQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userCustomAction' {
    import { IBase } from "gd-sprest/utils/types";
    import { IBasePermissions, IUserCustomActionMethods } from "gd-sprest/mapper/types";
    /**
        * User Custom Action Information
        */
    export interface IUserCustomActionCreationInformation {
            /** A value that specifies an implementation specific XML fragment that determines user export interface properties of the custom action. */
            CommandUIExtension?: string;
            /** The description of the custom action. */
            Description?: string;
            /** A value that specifies an implementation-specific value that determines the position of the custom action in the page. */
            Group?: string;
            /** The URL of the image associated with the custom action. */
            ImageUrl?: string;
            /** The location of the custom action. */
            Location?: string;
            /** The name of the custom action. */
            Name: string;
            /** The value that specifies the identifier of the object associated with the custom action. */
            RegistrationId?: string;
            /** The value that specifies the type of object associated with the custom action. Represents an SP.UserCustomActionRegistrationType value. */
            RegistrationType?: number;
            /** The value that specifies the permissions needed for the custom action. */
            Rights?: any;
            /** The value that specifies the ECMAScript to be executed when the custom action is performed. */
            ScriptBlock?: string;
            /** A value that specifies the URI of a file which contains the ECMAScript to execute on the page. */
            ScriptSrc?: string;
            /** The value that specifies an implementation-specific value that determines the order of the custom action that appears on the page. */
            Sequence?: number;
            /** The display title of the custom action. */
            Title?: string;
            /** The URL, URI, or ECMAScript (JScript, JavaScript) function associated with the action. */
            Url?: string;
    }
    /**
        * User Custom Action Methods
        */
    export interface IUserCustomActionMethods {
            /**
                * Deletes the user custom action.
                */
            delete(): IBase;
    }
    /**
        * User Custom Action Properties
        */
    export interface IUserCustomActionProps {
            /** Gets or sets a value that specifies an implementation specific XML fragment that determines user export interface properties of the custom action. */
            CommandUIExtension: string;
            /** Gets or sets the description of the custom action. */
            Description: string;
            /** Gets or sets a value that specifies an implementation-specific value that determines the position of the custom action in the page. */
            Group: string;
            /** Gets a value that specifies the identifier of the custom action. */
            Id: string;
            /** Gets or sets the URL of the image associated with the custom action. */
            ImageUrl: string;
            /** Gets or sets the location of the custom action. */
            Location: string;
            /** Gets or sets the name of the custom action. */
            Name: string;
            /** Gets or sets the value that specifies the identifier of the object associated with the custom action. */
            RegistrationId: string;
            /** Gets or sets the value that specifies the type of object associated with the custom action. */
            RegistrationType: number;
            /** Gets or sets the value that specifies the permissions needed for the custom action. */
            Rights: IBasePermissions;
            /** Gets a value that specifies the scope of the custom action. */
            Scope: number;
            /** Gets or sets the value that specifies the ECMAScript to be executed when the custom action is performed. */
            ScriptBlock: string;
            /** Gets or sets a value that specifies the URI of a file which contains the ECMAScript to execute on the page. */
            ScriptSrc: string;
            /** Gets or sets the value that specifies an implementation-specific value that determines the order of the custom action that appears on the page. */
            Sequence: number;
            /** Gets or sets the display title of the custom action. */
            Title: string;
            /** Gets or sets the URL, URI, or ECMAScript (JScript, JavaScript) function associated with the action. */
            Url: string;
            /** Gets a value that specifies an implementation specific version identifier. */
            VersionOfUserCustomAction: string;
    }
    /**
        * User Custom Action Query Properties
        */
    export interface IUserCustomActionQueryProps {
    }
    /**
        * User Custom Action Query Result
        */
    export interface IUserCustomActionQueryResult extends IUserCustomActionMethods, IUserCustomActionProps {
    }
    /**
        * User Custom Action Result
        */
    export interface IUserCustomActionResult extends IUserCustomActionMethods, IUserCustomActionProps, IUserCustomActionQueryProps, IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
    /**
        * User Custom Action
        */
    export interface IUserCustomAction extends IUserCustomActionMethods, IUserCustomActionQueryProps, IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userCustomActions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IUserCustomAction, IUserCustomActionCreationInformation, IUserCustomActionQueryResult, IUserCustomActionResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IUserCustomActionsMethods {
            /**
                * Adds a custom actino to the user custom action collection.
                * @param parameters - The user custom action information.
                */
            add(parameters: IUserCustomActionCreationInformation): IBase<IUserCustomAction, IUserCustomActionResult>;
            /**
                * Deletes all custom actions in the collection.
                */
            clear(): IBase;
            /**
                * Returns the custom action with the specified identifier.
                * @param id - The ID of the user custom action to get.
                */
            getById(id: any): IUserCustomAction & IBase<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IUserCustomActions, IUserCustomActionResults>;
    }
    /**
        * User Custom Actions
        */
    export interface IUserCustomActions extends IUserCustomActionsMethods, IBaseCollection<IUserCustomAction, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
    /**
        * User Custom Action Results
        */
    export interface IUserCustomActionResults extends IUserCustomActionsMethods, IBaseCollection<IUserCustomActionResult, IUserCustomActionResult, IUserCustomActionQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/userProfile' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { IWeb } from "gd-sprest/mapper/types";
    /**
        * User Profile
        */
    export interface IUserProfile extends IBase<IUserProfile> {
            /**
                * Constructor
                * @param targetInfo - (Optional) The target information.
                */
            new (targetInfo?: ITargetInfo): IUserProfile;
            /**
                * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.
                */
            FollowedContent(): IBase<any>;
            /**
                * The account name of the user. (SharePoint Online only)
                */
            AccountName: string;
            /**
                * The display name of the user. (SharePoint Online only)
                */
            DisplayName: string;
            FollowPersonalSiteUrl: string;
            IsPeopleListPublic: boolean;
            IsPrivacySettingOn: boolean;
            IsSelf: boolean;
            JobTitle: string;
            MySiteFirstRunExperience: number;
            MySiteHostUrl: string;
            /**
                * The FirstRun flag of the user. (SharePoint Online only)
                */
            O15FirstRunExperience: number;
            /**
                * The personal site of the user.
                */
            PersonalSite(): IBase<IWeb>;
            /**
                * The capabilities of the user's personal site.
                */
            PersonalSiteCapabilities: number;
            /**
                * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)
                */
            PersonalSiteFirstCreationError: string;
            /**
                * The date and time when the user's personal site was first created. (SharePoint Online only)
                */
            PersonalSiteFirstCreationTime: string;
            /**
                * The status for the state of the personal site instantiation.
                * See PersonalSiteInstantiationState in the .NET client object model reference for a list of instantiation state values.
                */
            PersonalSiteInstantiationState: number;
            /**
                * The date and time when the user's personal site was last created. (SharePoint Online only)
                */
            PersonalSiteLastCreationTime: string;
            /**
                * The number of attempts made to create the user's personal site. (SharePoint Online only)
                */
            PersonalSiteNumberOfRetries: number;
            /**
                * A Boolean value that indicates whether the user's picture is imported from Exchange.
                */
            PictureImportEnabled: boolean;
            PictureUrl: string;
            /**
                * The public URL of the personal site of the current user. (SharePoint Online only)
                */
            PublicUrl: string;
            /**
                * The URL used to create the user's personal site.
                */
            UrlToCreatePersonalSite: string;
            /**
                * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.
                * For SharePoint Online development, My Site Host administrators can also use the CreatePersonalSiteEnqueueBulk method to create personal sites for one or more users.
                * @param interactiveFl - True if this is an interactively (web) initiated request, or false if this is a non-interactively (client) initiated request.
                */
            createPersonalSiteEnque(interactiveFl: boolean): IBase;
            /**
                * Sets the privacy settings for this profile.
                * @param publicFl - true to make all social data public; false to make all social data private.
                */
            shareAllSocialData(publicFl: boolean): IBase;
    }
}

declare module 'gd-sprest/mapper/types/users' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IUser, IUserCreationInformation, IUserQueryResult, IUserResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IUsersMethods {
            /**
                * Adds a site to the site collection.
                * @param userInfo - The user creation information.
                */
            add(userInfo: IUserCreationInformation): IBase<IUser, IUserResult>;
            /**
                * Gets the user with the specified email address.
                * @param email - The email of the user to get.
                */
            getByEmail(email: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
            /**
                * Gets the user with the specified member identifier (ID).
                * @param id - The ID of the user to get.
                */
            getById(id: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
            /**
                * Gets the user with the specified login name.
                * @param loginName - The login name of the user to get, passed as an alias in the query string.
                */
            getByLoginName(loginName: any): IUser & IBase<IUser, IUserResult, IUserQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IUsers, IUserResults>;
            /**
                * Removes the user with the specified ID.
                * @param id - The ID of the user to remove.
                */
            removeById(id: any): IBase;
            /**
                * Removes the user with the specified login name.
                * @param loginName - The login name of the user to remove.
                */
            removeByLoginName(loginName: any): IBase;
    }
    /**
        * Users
        */
    export interface IUsers extends IUsersMethods, IBaseCollection<IUser, IUserResult, IUserQueryResult> {
    }
    /**
        * User Results
        */
    export interface IUserResults extends IUsersMethods, IBaseCollection<IUserResult, IUserResult, IUserQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/utility' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ComplexTypes } from "gd-sprest/mapper/types";
    /**
        * Email
        */
    export interface IEmail {
            /** A collection of additional email headers. */
            AdditionalHeaders?: Array<ComplexTypes.KeyValue>;
            /** A string or collection of email addresses to blind carbon copy the email to. */
            BCC?: Array<string>;
            /** A value that specifies the body of the email. */
            Body: string;
            /** A string or collection of email addresses to carbon copy the email to. */
            CC?: Array<string>;
            /** A value that specifies the email address of the sender. */
            From?: string;
            /** A string or collection of email addresses to send the email to. */
            To: Array<string>;
            /** A value that specifies the email subject. */
            Subject: string;
    }
    /**
        * Principal Result
        */
    export interface IPrincipalResult {
            Department?: string;
            DisplayName?: string;
            Email?: string;
            JobTitle?: string;
            LoginName?: string;
            Mobile?: string;
            PrincipalId?: number;
            PrincipalType?: number;
            SIPAddress?: string;
    }
    /**
        * Resolve Principal
        */
    export interface IResolvePrincipal {
            /** Specifies whether to add the user to the user information list. */
            addToUserInfoList?: boolean;
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
            /** Specifies whether only the email address is used when searching for the principal. */
            inputIsEmailOnly?: boolean;
            /** Specifies whether the user information list is used. */
            matchUserInfoList?: boolean;
            /** The type of the principal. */
            scopes: number;
            /** The source of the principal. */
            sources: number;
    }
    /**
        * Search Principal
        */
    export interface ISearchPrincipal {
            /** The group name. */
            groupName?: string;
            /** The display name, email address, or login name of the principal scopes. */
            input: string;
            /** The maximum number of information entries about principals to return. */
            maxCount: number;
            /** The type of the principal. */
            scopes?: number;
            /** The source of the principal. */
            sources?: number;
    }
    /**
        * Utility Results
        */
    export interface ICreateEmailBodyForInvitationResult extends IBase {
            CreateEmailBodyForInvitation: string;
    }
    export interface IGetCurrentUserEmailAddressesResult extends IBase {
            GetCurrentUserEmailAddresses: string;
    }
    export interface IGetAppLicenseDeploymentIdResult extends IBase {
            GetAppLicenseDeploymentId: string;
    }
    export interface IGetAppLicenseInformationResult extends IBase {
            GetAppLicenseInformation: string;
    }
    export interface IGetLowerCaseStringResult extends IBase {
            GetLowerCaseString: string;
    }
    export interface IResolvePrincipalResult extends IBase {
            ResolvePrincipalInCurrentContext: IPrincipalResult;
    }
    export interface ISearchPrincipalsResult extends IBase {
            results: Array<IPrincipalResult>;
            SearchPrincipalsUsingContextWeb: {
                    results: Array<IPrincipalResult>;
            };
    }
    export interface ISendEmailResult extends IBase {
            SendEmail: string;
    }
    /**
        * Utility Methods
        */
    export interface IUtilityMethods {
            /**
                * Gets the external (outside the firewall) URL to a document or resource in a site.
                * pageAddress - The URL for the document or resource.
                */
            createEmailBodyForInvitation(pageAddress: string): IBase<IBase, ICreateEmailBodyForInvitationResult>;
            /**
                * Gets the app license deployment id.
                */
            getAppLicenseDeploymentId(): IBase<IBase, IGetAppLicenseDeploymentIdResult>;
            /**
                * Gets the app license information.
                */
            getAppLicenseInformation(): IBase<IBase, IGetAppLicenseInformationResult>;
            /**
                * Returns the current user's email address.
                */
            getCurrentUserEmailAddresses(): IBase<IBase, IGetCurrentUserEmailAddressesResult>;
            /**
                * Converts the text to a localized string.
                */
            getLocalizedString(sourceValue: string): IBase;
            /**
                * Converts the text to be lower case.
                */
            getLowerCaseString(sourceValue: string, lcid: number): IBase<IBase, IGetLowerCaseStringResult>;
            /**
                * Need to research
                */
            importAppLicense(url: string): IBase;
            /**
                * Need to research
                */
            isUserLicensedForEntityInContext(url: string): IBase;
            /**
                * Need to research
                */
            localizeWebPartGallery(url: string): IBase;
            /**
                * Need to research
                */
            markDiscussionAsFeatured(url: string): IBase;
            /**
                * Gets information about a principal that matches the specified Search criteria.
                */
            resolvePrincipal(principal: IResolvePrincipal): IBase<IBase, IResolvePrincipalResult>;
            /**
                * Gets information about the principals that match the specified Search criteria.
                */
            searchPrincipals(principal: ISearchPrincipal): IBase<IBase, ISearchPrincipalsResult>;
            /**
                * Need to research
                */
            unmarkDiscussionAsFeatured(url: string): IBase;
    }
    /**
        * Utility
        */
    export interface IUtility extends IUtilityMethods, IBase<IUtility> {
            /**
                * Constructor
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            new (url?: string, targetInfo?: ITargetInfo): IUtility;
            /**
                * Creates a wiki page.
                * @param listUrl - The relative url to the library.
                * @param content - The html content.
                */
            createWikiPage(pageUrl: string, content?: string): IBase<Types.SP.IFile, Types.SP.IFileResult, Types.SP.IFileQueryResult>;
            /**
                * Method to send an email.
                * @param email - The email properties.
                */
            sendEmail(email: IEmail): IBase<IBase, ISendEmailResult>;
    }
}

declare module 'gd-sprest/mapper/types/version' {
    /**
      * Version
      */
    export interface IVersion {
        /** The check-in comment. */
        CheckInComment: string;
        /** The created date. */
        Created: string;
        /** The version id. */
        ID: number;
        /** Flag determining if this is the current version. */
        IsCurrentVersion: boolean;
        /** The file length. */
        Length: number;
        /** The file size. */
        Size: number;
        /** The file url. */
        Url: string;
        /** The version label. */
        VersionLabel: string;
    }
}

declare module 'gd-sprest/mapper/types/versions' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IVersion } from "gd-sprest/mapper/types";
    /**
        * Versions
        */
    export interface IVersions extends IBaseCollection<IVersion, IVersion, IVersion> {
            /**
                * Deletes all versions in the collection.
                */
            deleteAll(): IBase;
            /**
                * Deletes a version, by the specified id.
                * @param id - The version id to delete.
                */
            deleteById(id: any): IBase;
            /**
                * Deletes a version, by the specified label.
                * @param label - The version label to delete.
                */
            deleteByLabel(label: any): IBase;
            /**
                * Gets the version with the specified ID.
                * @param id - The version id to get.
                */
            getById(id: any): IBase<IVersion>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IVersions>;
            /**
                * Restores a version, by the specified label.
                * @param label - The version label to restore.
                */
            restoreByLabel(label: any): IBase<IVersion>;
    }
}

declare module 'gd-sprest/mapper/types/view' {
    import { IBase } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { IViewFields } from "gd-sprest/mapper/types";
    /**
        * View Creation Information
        */
    export interface IViewCreationInformation {
            /** The relative url to the jslink */
            JSLink?: string;
            /** The new list view is a paged view. */
            Paged?: boolean;
            /** The new list view is a personal view. If the value is false, the new list view is a public view. */
            PersonalView?: boolean;
            /** The maximum number of list items that the new list view displays on a visual page of the list view. */
            RowLimit?: number;
            /** Option to set as default view. */
            SetAsDefaultView?: boolean;
            /** The name of the view. */
            Title: string;
            /** The query for the new list view. */
            ViewQuery?: string;
            /** The view type. */
            ViewTypeKind?: number;
    }
    /**
        * View Methods
        */
    export interface IViewMethods {
            /**
                * Deletes the view.
                */
            delete(): IBase;
            /**
                * Returns the list view as HTML.
                */
            renderAsHtml(): IBase;
            /**
                * Updates it's properties.
                * @param data - The list properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * View Properties
        */
    export interface IViewProps {
            /** Gets or sets a value that specifies fields and functions that define totals shown in a list view. If not null, the XML must conform to FieldRefDefinitionAggregation, as specified in [MS-WSSCAML]. */
            Aggregations: string;
            /** Gets or sets a value that specifies whether totals are shown in the list view. */
            AggregationsStatus: string;
            /** Gets a value that specifies the base view identifier of the list view. */
            BaseViewId: string;
            /** Gets or sets the identifier of the content type with which the view is associated so that the view is available only on folders of this content type. */
            ContentTypeId: Types.SP.IStringValue;
            /** Gets or sets a value that specifies whether the list view is the default list view. */
            DefaultView: boolean;
            /** Gets or sets a value that specifies whether the list view is the default list view for the content type specified by contentTypeId. */
            DefaultViewForContentType: boolean;
            /** Gets or sets a value that specifies whether the list view was modified in an editor. */
            EditorModified: boolean;
            /** Gets or sets a value that specifies the column and row formatting for the list view. If not null, the XML must conform to ViewFormatDefinitions, as specified in [MS-WSSCAML]. */
            Formats: string;
            /** Gets or sets a value that specifies whether the list view is hidden. */
            Hidden: boolean;
            /** Gets a value that specifies the XML document that represents the list view. */
            HtmlSchemaXml: string;
            /** Gets a value that specifies the view identifier of the list view. */
            Id: string;
            /** Gets a value that specifies the URI (Uniform Resource Identifier) of the image for the list view. */
            ImageUrl: string;
            /** Gets or sets a value that specifies whether the current folder is displayed in the list view. */
            IncludeRootFolder: boolean;
            /** Gets or sets the name of the JavaScript file used for the view. */
            JSLink: string;
            /** Gets or sets a string that represents the view XML. */
            ListViewXml: string;
            /** Gets or sets a value that specifies the view method for the list view. If not null, the XML must conform to Method, as specified in [MS-WSSCAP]. */
            Method: string;
            /** Gets or sets a value that specifies whether the list view is the default mobile list view. */
            MobileDefaultView: boolean;
            /** Gets or sets a value that specifies whether the list view is a mobile list view. */
            MobileView: boolean;
            /** Gets a value that specifies the content approval type for the list view. */
            ModerationType: string;
            /** Gets a value that specifies whether list items can be reordered in the list view. */
            OrderedView: boolean;
            /** Gets or sets a value that specifies whether the list view is a paged view. */
            Paged: boolean;
            /** Gets a value that specifies whether the list view is a personal view. */
            PersonalView: boolean;
            /** Gets a value that specifies whether the list view is read-only. */
            ReadOnlyView: boolean;
            /** Gets a value that specifies whether the list view requires client integration rights. */
            RequiresClientIntegration: boolean;
            /** Gets or sets a value that specifies the maximum number of list items to display in a visual page of the list view. */
            RowLimit: number;
            /** Gets or sets a value that specifies the scope for the list view. Represents a ViewScope value. DefaultValue = 0, Recursive = 1, RecursiveAll = 2, FilesOnly = 3. */
            Scope: number;
            /** Gets a value that specifies the server-relative URL of the list view page. */
            ServerRelativeUrl: string;
            /** Gets a value that specifies the identifier of the view style for the list view. */
            StyleId: string;
            TabularView: boolean;
            /** Gets a value that specifies whether the list view is a threaded view. */
            Threaded: boolean;
            /** Gets or sets a value that specifies the display name of the list view. */
            Title: string;
            /** Gets or sets a value that specifies the toolbar for the list view. */
            Toolbar: string;
            /** Gets a value that specifies the name of the template for the toolbar that is used in the list view. */
            ToolbarTemplateName: string;
            /** Gets or sets a value that specifies the view data for the list view. If not null, the XML must conform to FieldRefDefinitionViewData, as specified in [MS-WSSCAML]. */
            ViewData: string;
            VisualizationInfo: Types.SP.IVisualization;
            /** Gets or sets a value that specifies the joins that are used in the list view. If not null, the XML must conform to ListJoinsDefinition, as specified in [MS-WSSCAML]. */
            ViewJoins: string;
            /** Gets or sets a value that specifies the projected fields that will be used by the list view. If not null, the XML must conform to ProjectedFieldsDefinitionType, as specified in [MS-WSSCAML]. */
            ViewProjectedFields: string;
            /** Gets or sets a value that specifies the query that is used by the list view. If not null, the XML must conform to CamlQueryRoot, as specified in [MS-WSSCAML]. */
            ViewQuery: string;
            /** Gets a value that specifies the type of the list view. Can be HTML, GRID, CALENDAR, RECURRENCE, CHART, or GANTT. */
            ViewType: string;
    }
    /**
        * View Query Properties
        */
    export interface IViewQueryProps {
            /** Gets a value that specifies the collection of fields in the list view. */
            ViewFields(): IViewFields;
    }
    /**
        * View Query Result
        */
    export interface IViewQueryResult extends IViewMethods, IViewProps {
            /** A value that specifies the collection of fields in the list view. */
            ViewFields: Types.SP.IResults<string>;
    }
    /**
        * View Result
        */
    export interface IViewResult extends IViewMethods, IViewProps, IViewQueryProps, IBase<IView, IViewResult, IViewQueryResult> {
    }
    /**
        * View
        */
    export interface IView extends IViewMethods, IViewQueryProps, IBase<IView, IViewResult, IViewQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/viewFieldCollection' {
    import { IBase } from "gd-sprest/utils/types";
    /**
        * View Fields
        */
    export interface IViewFields extends IBase<IViewFields, IViewFields, IViewFields> {
            /** Gets a value that specifies the XML schema that represents the collection. */
            SchemaXml: string;
            /** Specifies the XML schema of the collection of fields. The Items property is returned with the resource, but it doesn't have a URI-addressable endpoint. */
            Items: string;
            /** The view field collection. */
            results: Array<any>;
            /**
                * Adds the field with the specified field internal name or display name to the collection.
                * @param fieldName - The case-sensitive internal name or display name of the field to add.
                */
            addViewField(fieldName: any): IBase;
            /**
                * Moves the field with the specified field internal name to the specified position in the collection.
                * @param field - The case-sensitive internal name of the field to move. Send this parameter and the index parameter in the request body, as shown in the example.
                * @param index - The zero-based index of the new position for the field. Send this parameter and the field parameter in the request body, as shown in the example.
                */
            moveViewFieldTo(field: any, index: any): IBase;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IViewFields>;
            /**
                * Removes all the fields from the collection.
                */
            removeAllViewFields(): IBase;
            /**
                * Removes the field with the specified field internal name from the collection.
                * @param fieldName - The case-sensitive internal name or display name of the field to add.
                */
            removeViewField(fieldName: any): IBase;
    }
}

declare module 'gd-sprest/mapper/types/views' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IView, IViewCreationInformation, IViewQueryResult, IViewResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IViewsMethods {
            /**
                * Adds a list view to the view collection.
                */
            add(parameters: IViewCreationInformation): IBase<IView, IViewResult>;
            /**
                * Gets the list view with the specified ID.
                * @param id - The ID of the view.
                */
            getById(id: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
            /**
                * Gets the list view with the specified title.
                * @param title - The case-sensitive title of the view.
                */
            getByTitle(title: any): IView & IBase<IView, IViewResult, IViewQueryResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IBase<IViews>;
    }
    /**
        * Views
        */
    export interface IViews extends IViewsMethods, IBaseCollection<IView, IViewResult, IViewQueryResult> {
    }
    /**
        * View Results
        */
    export interface IViewResults extends IViewsMethods, IBaseCollection<IViewResult, IViewResult, IViewQueryResult> {
    }
}

declare module 'gd-sprest/mapper/types/web' {
    import { IBase, ITargetInfo } from "gd-sprest/utils/types";
    import { Types } from "gd-sprest/";
    import { ITenantAppCatalog, IWebInfo, IWebResult, IWebResults, IWebs } from "gd-sprest/mapper/types";
    /**
        * Web Creation Information
        */
    export interface IWebCreationInformation {
            /** The description of the new site. */
            Description?: string;
            /** The locale ID that specifies the language of the new site. */
            Language?: number;
            /** A value that specifies the title of the new site. */
            Title: string;
            /** The URL leaf name of the new site. The URL must not contain the following:
                    The characters ~, ", #, %, &, *, :, <, >, ?, \, {, |, or }
                    The string \x7f
                    Consecutive . or / characters
                    Starting ., /, or _ characters
                    Ending . or / characters
             */
            Url: string;
            /** A value that specifies whether the new site will inherit permissions from its parent site. */
            UseSamePermissionsAsParentSite?: boolean;
            /** A value that specifies the name of the site template to be used for creating the new site. Use the GetAvailableWebTemplates method to get the names of available web templates on the site. */
            WebTemplate: string;
    }
    /**
        * Web Information
        */
    export interface IWebInfo {
            Configuration: number;
            Created: string;
            Description: string;
            Id: string;
            Language: number;
            LastItemModifiedDate: string;
            LastItemUserModifiedDate: string;
            ServerRelativeUrl: string;
            Title: string;
            WebTemplate: string;
            WebTemplateId: number;
    }
    /**
        * Web Methods
        */
    export interface IWebMethods {
            /**
                * Applies the theme specified by the contents of each of the files specified in the arguments to the site.
                * @param colorpaletteurl - The server-relative URL of the color palette file.
                * @param fontschemeurl - The server-relative URL of the font scheme.
                * @param backgroundimageurl - The server-relative URL of the background image.
                * @param sharegenerated - True to store the generated theme files in the root site, or false to store them in this site.
                */
            applyTheme(colorpaletteurl: any, fontschemeurl: any, backgroundimageurl: any, sharegenerated: any): IBase;
            /**
                * Applies the specified site definition or site template to the Web site that has no template applied to it.
                * @param name - The site definition or web template name to apply.
                */
            applyWebTemplate(name: any): IBase;
            /**
                * Creates unique role assignments for the securable object.
                * @param copyRoleAssignments - True to copy the role assignments from the parent securable object; false to remove the inherited role assignments except one that contains the current user.
                * @param clearSubScopes - True to make all child securable objects inherit role assignments from the current object; false (default) to leave role assignments unchanged for child securable objects that do not inherit role assignments from their parent object.
                */
            breakRoleInheritance(copyRoleAssignments: any, clearSubScopes: any): IBase;
            /**
                * Deletes the web.
                */
            delete(): IBase;
            /**
                * Checks whether the push notification subscriber exist for the current user with the given device application instance ID.
                * @param id - The ID of the device app instance.
                */
            doesPushNotificationSubscriberExist(id: any): IBase;
            /**
                * Returns whether the current user has the given set of permissions.
                * @param high - The highest permission range value.
                * @param low - The lowest permission range value.
                */
            doesUserHavePermissions(high: any, low: any): IBase;
            /**
                * Checks whether the specified login name belongs to a valid user in the site. If the user doesn't exist, it will add the user to the site.
                */
            ensureUser(loginName: string): IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
            /**
                * Sends data to an OData service.
                * @param inputStream - The OData input object. Used for create or update operations only.
                */
            executeRemoteLOB(inputStream: any): IBase;
            /**
                * The app BDC catalog.
                */
            getAppBdcCatalog(): IBase;
            /**
                * The app BDC catalog for the specified app instance.
                * @param id - The ID of the app instance.
                */
            getAppBdcCatalogForAppInstance(id: any): IBase;
            /**
                * Retrieves an AppInstance installed on this Site.
                * @param id - The ID of the app instance.
                */
            getAppInstanceById(id: any): IBase;
            /**
                * Retrieves all AppInstances installed on this site that are instances of the specified App.
                * @param id - The product ID of the app.
                */
            getAppInstancesByProductId(id: any): IBase;
            /**
                * Returns a collection of site templates available for the site.
                * @param lcid - The LCID of the site templates to get.
                * @param doIncludeCrossLanguage - True to include language-neutral site templates; otherwise false.
                */
            getAvailableWebTemplates(lcid: any, doIncludeCrossLanguage: any): IBase;
            /**
                * Returns the list gallery on the site.
                * @param galleryType - The gallery type. Represents a ListTemplateType value such as WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114, MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125.
                */
            getCatalog(galleryType: any): Types.SP.IList & IBase<Types.SP.IList, Types.SP.IListResult, Types.SP.IListQueryResult>;
            /**
                * Returns the collection of all changes from the change log that have occurred within the scope of the site, based on the specified query.
                * @param query - The change query.
                */
            getChanges(query: any): IBase;
            /**
                * The context information for the site. Static method.
                */
            getContextWebInformation(): IBase;
            /**
                * The custom list templates for the site.
                */
            getCustomListTemplates(): IBase;
            /**
                * The document libraries on a site. Static method. (SharePoint Online only)
                * @param url - The full URL of the site.
                */
            getDocumentLibraries(url: any): IBase;
            /**
                * The specified external content type in a line-of-business (LOB) system application.
                * @param namespace - The namespace of the external content type.
                * @param name - The name of the external content type.
                */
            getEntity(namespace: any, name: any): IBase;
            /**
                * Returns the file object located at the specified server-relative URL.
                * @param url - The server relative url of the file.
                */
            getFileByServerRelativeUrl(url: any): Types.SP.IFile & IBase<Types.SP.IFile, Types.SP.IFileResult, Types.SP.IFileQueryResult>;
            /**
                * Returns the folder object located at the specified server-relative URL.
                * @param url - The server relative url of the folder.
                */
            getFolderByServerRelativeUrl(url: any): Types.SP.IFolder & IBase<Types.SP.IFolder, Types.SP.IFolderResult, Types.SP.IFolderQueryResult>;
            /**
                * The list at the specified site-relative URL. (SharePoint Online only)
                * @param url - The server relative url of the list.
                */
            getList(url: any): Types.SP.IList & IBase<Types.SP.IList, Types.SP.IListResult, Types.SP.IListQueryResult>;
            /**
                * The push notification subscriber over the site for the specified device application instance ID.
                * @param id - The ID of the device app instance.
                */
            getPushNotificationSubscriber(id: any): IBase;
            /**
                * Queries for the push notification subscribers over the site for the specified value of custom arguments. Null or empty custom arguments will return subscribers without any filtering.
                * @param args - Arguments to filter the results. Passed arguments are compared to the subscribers' custom arguments in the store. Pass null or empty arguments to return unfiltered results.
                */
            getPushNotificationSubscribersByArgs(args: any): IBase;
            /**
                * Queries for the push notification subscribers over the site for the specified user.
                * @param loginName - The login name of the user.
                */
            getPushNotificationSubscribersByUser(loginName: any): IBase;
            /**
                * Returns the collection of child sites of the current site based on the specified query. (SharePoint Online only)
                * @param nWebTemplateFilter - The ID of the template used in the site definition of the sites.
                * @param nConfigurationFilter - The ID of the site template used to provision the sites.
                */
            getSubwebsFilteredForCurrentUser(nWebTemplateFilter: any, nConfigurationFilter: any): IBase<Types.SP.IResults<IWebInfo>>;
            /**
                * Returns the user corresponding to the specified member identifier for the current site.
                * @param id - The user id.
                */
            getUserById(id: any): Types.SP.IUser & IBase<Types.SP.IUser, Types.SP.IUserResult, Types.SP.IUserQueryResult>;
            /**
                * The effective permissions that the specified user has within the current application scope.
                * @param loginName - The user login name.
                */
            getUserEffectivePermissions(loginName: any): IBase;
            /**
                * The site URL from a page URL. Static method.
                * @param url - The full URL of the SharePoint page, with URL encoded characters as needed.
                */
            getWebUrlFromPageUrl(url: any): any;
            /**
                * Uploads and installs an app package to this site.
                * @param appPackageStream - The app package stream.
                */
            loadAndInstallApp(appPackageStream: any): IBase;
            /**
                * Uploads and installs an App package on the site in a specified locale.
                * @param appPackageStream - The app package stream.
                * @param installationLocaleLCID - The LCID of the locale to use to create the app instance.
                */
            loadAndInstallAppInSpecifiedLocale(appPackageStream: any, installationLocaleLCID: any): IBase;
            /**
                * Uploads an App package and creates an instance from it.
                * @param appPackageStream - The app package stream.
                * @param installationLocaleLCID - The LCID of the locale to use to create the app instance.
                */
            loadApp(appPackageStream: any, installationLocaleLCID: any): IBase;
            /**
                * Returns the name of the image file for the icon that is used to represent the specified file.
                * @param filename - The file name. If this parameter is empty, the server returns an empty string.
                * @param progid - The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName (for example, Excel.Sheet or PowerPoint.Slide). This is the ID used by the Windows registry to uniquely identify an object.
                * @param size - The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1.
                */
            mapToIcon(filename: any, progid: any, size: any): IBase;
            /**
                * Processes a notification from an external system.
                * @param stream - The notification message from the external system.
                */
            processExternalNotification(stream: any): IBase;
            /**
                * Registers the subscriber for push notifications over the site. If the registration already exists, the service token is updated with the new value.
                * @param deviceAppInstanceId - The ID of the device app instance.
                * @param serviceToken - The token provided by the notification service to the device to receive notifications.
                */
            registerPushNotificationSubscriber(deviceAppInstanceId: any, serviceToken: any): IBase;
            /**
                * Resets the role inheritance for the securable object and inherits role assignments from the parent securable object.
                */
            resetRoleInheritance(): IBase;
            /**
                * Unregisters the subscriber for push notifications from the site.
                * @param id - The ID of the device app instance.
                */
            unregisterPushNotificationSubscriber(id: any): IBase;
            /**
                * Updates it's properties.
                * @param data - The list properties to update.
                */
            update(data: any): IBase;
    }
    /**
        * Web Properties
        */
    export interface IWebProps {
            /** Gets a value that specifies whether the site allows RSS feeds. */
            AllowRssFeeds: boolean;
            /** The instance Id of the App Instance that this web represents. */
            AppInstanceId: string;
            /** Gets either the identifier (ID) of the site definition configuration that was used to create the site, or the ID of the site definition configuration from which the site template used to create the site was derived. */
            Configuration: number;
            /** Gets a value that specifies when the site was created. */
            Created: string;
            /** Gets or sets the URL for a custom master page file to apply to the website. */
            CustomMasterUrl: string;
            /** Gets or sets the description for the site. */
            Description: string;
            /** Determines if the Document Library Callout's WAC previewers are enabled or not. */
            DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;
            /** Gets or sets a Boolean value that specifies whether the Web site should use Minimal Download Strategy. */
            EnableMinimalDownload: boolean;
            ExcludeFromOfflineClient: boolean;
            /** Gets a value that specifies the site identifier for the site. */
            Id: string;
            /** Gets a value that specifies the LCID for the language that is used on the site. */
            Language: boolean;
            /** Gets a value that specifies when an item was last modified in the site. */
            LastItemModifiedDate: string;
            /** Gets or sets the URL of the master page that is used for the website. */
            MasterUrl: string;
            MembersCanShare: boolean;
            NoCrawl: boolean;
            NotificationsInOneDriveForBusinessEnabled: boolean;
            NotificationsInSharePointEnabled: boolean;
            OverwriteTranslationsOnChange: boolean;
            PreviewFeaturesEnabled: boolean;
            /** Gets or sets a value that specifies whether the Quick Launch area is enabled on the site. */
            QuickLaunchEnabled: boolean;
            /** Gets or sets a value that determines whether the recycle bin is enabled for the website. */
            RecycleBinEnabled: boolean;
            RequestAccessEmail: string;
            /**
                * Gets or sets a Boolean value that specifies whether the Web site can be saved as a site template.
                */
            SaveSiteAsTemplateEnabled: boolean;
            ServerRelativePath: Types.SP.IResourcePath;
            /** Gets or sets the server-relative URL for the Web site. */
            ServerRelativeUrl: string;
            SiteLogoDescription: string;
            SiteLogoUrl: string;
            /** Gets or sets a value that specifies whether the RSS feeds are enabled on the site. */
            SyndicationEnabled: boolean;
            TenantTagPolicyEnabled: boolean;
            ThemeData: string;
            ThemedCssFolderUrl: string;
            ThirdPartyMdmEnabled: boolean;
            /** Gets or sets the title for the Web site. */
            Title: string;
            /** Gets or sets value that specifies whether the tree view is enabled on the site. */
            TreeViewEnabled: boolean;
            /** Gets or sets the user export interface (UI) version of the Web site. */
            UIVersion: number;
            /** Gets or sets a value that specifies whether the settings UI for visual upgrade is shown or hidden. */
            UIVersionConfigurationEnabled: boolean;
            /** Gets the absolute URL for the website. */
            Url: string;
            /** Gets the name of the site definition or site template that was used to create the site. */
            WebTemplate: string;
    }
    /**
        * Web Query Properties
        */
    export interface IWebQueryProps {
            /**
                * Specifies whether the current user can create declarative workflows. If not disabled on the Web application, the value is the same as the AllowCreateDeclarativeWorkflow property of the site collection. Default value: true.
                */
            AllowCreateDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
            /**
                * Gets a value that specifies whether the current user is allowed to use a designer application to customize this site.
                */
            AllowDesignerForCurrentUser(): IBase<boolean>;
            /**
                * Gets a value that specifies whether the current user is allowed to edit the master page.
                */
            AllowMasterPageEditingForCurrentUser(): IBase<boolean>;
            /**
                * Property Bag
                */
            AllProperties(): IBase<Types.SP.IPropertyValues>;
            /**
                * Gets a value that specifies whether the current user is allowed to revert the site to a default site template.
                */
            AllowRevertFromTemplateForCurrentUser(): IBase<boolean>;
            /**
                * Specifies whether the current user can save declarative workflows as a template. If not disabled on the Web application, the value is the same as the AllowSaveDeclarativeWorkflowAsTemplate property of the site collection. Default value: true.
                */
            AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser(): IBase<boolean>;
            /**
                * Specifies whether the current user can save or publish declarative workflows. If not disabled on the Web application, the value is the same as the AllowSavePublishDeclarativeWorkflowAsTemplate property of the site collection. When enabled, can only be set by a site collection administrator. Default value: true.
                */
            AllowSavePublishDeclarativeWorkflowForCurrentUser(): IBase<boolean>;
            /**
                * Gets a collection of metadata for the Web site.
                */
            AllProperties(): IBase;
            AppTiles(): Types.SP.IAppTiles;
            /**
                * Gets or sets the group of users who have been given contribute permissions to the Web site.
                */
            AssociatedMemberGroup(): Types.SP.IGroup;
            /**
                * Gets or sets the associated owner group of the Web site.
                */
            AssociatedOwnerGroup(): Types.SP.IGroup;
            /**
                * Gets or sets the associated visitor group of the Web site.
                */
            AssociatedVisitorGroup(): Types.SP.IGroup;
            Author(): Types.SP.IUser;
            /**
                * Gets the collection of all content types that apply to the current scope, including those of the current Web site, as well as any parent Web sites.
                */
            AvailableContentTypes(): IBase<Types.SP.IContentTypes>;
            /**
                * Gets a value that specifies the collection of all fields available for the current scope, including those of the current site, as well as any parent sites.
                */
            AvailableFields(): IBase<Types.SP.IFields>;
            ClientWebParts(): IBase;
            /**
                * Gets the content types that are associated with the web.
                */
            ContentTypes(): Types.SP.IContentTypes;
            /**
                * Gets the content type that are associated with the web.
                * @param id - The id of the content type.
                */
            ContentTypes(id: string): Types.SP.IContentType;
            /**
                * Gets the current user of the site.
                */
            CurrentUser(): Types.SP.IUser;
            DataLeakagePreventionStatusInfo(): IBase;
            DescriptionResource(): IBase<Types.SP.IResourcePath>;
            /**
                * Gets the URL where the current user can download SharePoint Designer.
                */
            DesignerDownloadUrlForCurrentUser(): IBase;
            /**
                * Represents the intersection of permissions of the app principal and the user principal. In the app-only case, this property returns only the permissions of the app principal. To check only user permissions (ignoring app permissions), use the GetUserEffectivePermissions method.
                */
            EffectiveBasePermissions(): IBase<string>;
            /**
                * Gets the event receivers associated with the web.
             */
            EventReceivers(): Types.SP.IEventReceivers;
            /**
                * Gets the event receiver associated with the web.
                * @param id - The id of the event receiver.
             */
            EventReceivers(id: string): Types.SP.IEventReceiver;
            /**
                * Gets a value that specifies the collection of features that are currently activated in the site.
                */
            Features(): IBase;
            /**
                * Gets the fields in the web.
                */
            Fields(): Types.SP.IFields;
            /**
                * Gets the field in the web.
                * @param internalNameOrTitle - The internal name or title of the field.
                */
            Fields(internalNameOrTitle: string): Types.SP.IField;
            /**
                * Gets the folders contained in the root folder.
                */
            Folders(): Types.SP.IFolders;
            /**
                * Gets the folder contained in the root folder.
                * @param url - The url of the sub-folder within the current folder.
                */
            Folders(url: string): Types.SP.IFolder;
            /**
                * Gets the lists in the Web.
                */
            Lists(): Types.SP.ILists;
            /**
                * Gets the list in the Web.
                * @param name - The list name.
                */
            Lists(name: string): Types.SP.IList;
            /**
                * Gets the list definitions and list templates available for creating lists on the site.
                */
            ListTemplates(): IBase;
            /**
                * Gets the list definition or list template available for creating lists on the site.
                * @param name - The list template form name.
                */
            ListTemplates(name: string): IBase;
            /**
                * Gets a value that specifies the navigation structure on the site, including the Quick Launch area and the top navigation bar.
                */
            Navigation(): IBase<Types.SP.INavigation>;
            /**
                * Gets the parent website of the specified website.
                */
            ParentWeb(): IWeb;
            /**
                * Gets the collection of push notification subscribers over the site.
                */
            PushNotificationSubscribers(): IBase;
            /**
                * Specifies the collection of recycle bin items of the recycle bin of the site.
                */
            RecycleBin(): IBase;
            /**
                * Gets the regional settings that are currently implemented on the website.
                */
            RegionalSettings(): IBase;
            /**
                * Gets the role definitions for the web.
                */
            RoleDefinitions(): Types.SP.IRoleDefinitions;
            /**
                * Gets the role definitions for the web.
                * @param name - The role definition name.
                */
            RoleDefinitions(name: string): Types.SP.IRoleDefinition;
            /**
                * Gets the root folder in the web.
                */
            RootFolder(): Types.SP.IFolder;
            /**
                * Gets the file in the web's root folder.
                * @param url - (Optional) The url of the file within the root folder.
                */
            RootFolder(url: string): Types.SP.IFile;
            /**
                * Gets a value that specifies whether the current user is able to view the file system structure of this site.
                */
            ShowUrlStructureForCurrentUser(): IBase;
            /**
                * Gets the site groups for the web.
                */
            SiteGroups(): Types.SP.ISiteGroups;
            /**
                * Gets the site groups for the web.
                * @param name - The group name.
                */
            SiteGroups(name: string): Types.SP.IGroup;
            /**
                * Gets the UserInfo list of the site collection that contains the Web site.
                */
            SiteUserInfoList(): IBase;
            /**
                * Gets the collection of all users that belong to the site collection.
                */
            SiteUsers(): Types.SP.IUsers;
            /**
                * Gets the collection of all users that belong to the site collection.
                * @param id - The user id.
                */
            SiteUsers(id: any): Types.SP.IUser;
            /**
                * Specifies the language code identifiers (LCIDs) of the languages that are enabled for the site.
                */
            SupportedUILanguageIds(): IBase<Number>;
            /** Gets the tenant app catalog. */
            TenantAppCatalog(): ITenantAppCatalog;
            /**
                * The theming information for this site. This includes information like colors, fonts, border radii sizes etc.
                */
            ThemeInfo(): IBase;
            TitleResource(): IBase<Types.SP.IResourcePath>;
            /**
                * Gets the user custom actions for the web.
                */
            UserCustomActions(): Types.SP.IUserCustomActions;
            /**
                * Gets the user custom action for the web.
                * @param id - The id of the user custom action.
                */
            UserCustomActions(id: string): Types.SP.IUserCustomAction;
            /**
                * Represents key properties of the subsites of a site.
                */
            WebInfos(): IBase;
            /**
                * Gets a Web site collection object that represents all Web sites immediately beneath the Web site, excluding children of those Web sites.
                */
            Webs(): IWebs;
            /**
                * Gets a value that specifies the collection of all workflow associations for the site.
                */
            WorkflowAssociations(): IBase;
            /**
                * Gets a value that specifies the collection of workflow templates associated with the site.
                */
            WorkflowTemplates(): IBase;
    }
    /**
        * Web Query Result
        */
    export interface IWebQueryResult extends IWebMethods, IWebProps {
            /**
                * Specifies whether the current user can create declarative workflows. If not disabled on the Web application, the value is the same as the AllowCreateDeclarativeWorkflow property of the site collection. Default value: true.
                */
            AllowCreateDeclarativeWorkflowForCurrentUser?: boolean;
            AllowDesignerForCurrentUser?: boolean;
            /**
                * Specifies whether the current user is allowed to edit the master page.
                */
            AllowMasterPageEditingForCurrentUser?: boolean;
            /**
                * A value that specifies whether the current user is allowed to revert the site to a default site template.
                */
            AllowRevertFromTemplateForCurrentUser?: boolean;
            /**
                * Specifies whether the current user can save declarative workflows as a template. If not disabled on the Web application, the value is the same as the AllowSaveDeclarativeWorkflowAsTemplate property of the site collection. Default value: true.
                */
            AllowSaveDeclarativeWorkflowAsTemplateForCurrentUser?: boolean;
            /**
                * Specifies whether the current user can save or publish declarative workflows. If not disabled on the Web application, the value is the same as the AllowSavePublishDeclarativeWorkflowAsTemplate property of the site collection. When enabled, can only be set by a site collection administrator. Default value: true.
                */
            AllowSavePublishDeclarativeWorkflowForCurrentUser?: boolean;
            /**
                * A collection of metadata for the Web site.
                */
            AllProperties?: Array<string>;
            AppTiles?: Types.SP.IAppTiles;
            /**
                * The group of users who have been given contribute permissions to the Web site.
                */
            AssociatedMemberGroup: Types.SP.IGroupResult;
            /**
                * The associated owner group of the Web site.
                */
            AssociatedOwnerGroup: Types.SP.IGroupResult;
            /**
                * The associated visitor group of the Web site.
                */
            AssociatedVisitorGroup: Types.SP.IGroupResult;
            /** */
            Author: Types.SP.IUserResult;
            /**
                * The collection of all content types that apply to the current scope, including those of the current Web site, as well as any parent Web sites.
                */
            AvailableContentTypes: Types.SP.IResults<Types.SP.IContentTypeResult>;
            /**
                * A value that specifies the collection of all fields available for the current scope, including those of the current site, as well as any parent sites.
                */
            AvailableFields: Types.SP.IResults<Types.SP.IFieldResult>;
            ClientWebParts: IBase;
            /**
                * Gets the content types that are associated with the web.
                */
            ContentTypes: Types.SP.IContentTypeResults;
            /**
                * Gets the current user of the site.
                */
            CurrentUser: Types.SP.IUserResult;
            DataLeakagePreventionStatusInfo: Types.SP.IContainsConfidentialInfo;
            DescriptionResource: Types.SP.IResourcePath;
            /**
                * Gets the URL where the current user can download SharePoint Designer.
                */
            DesignerDownloadUrlForCurrentUser: string;
            /**
                * Represents the intersection of permissions of the app principal and the user principal. In the app-only case, this property returns only the permissions of the app principal. To check only user permissions (ignoring app permissions), use the GetUserEffectivePermissions method.
                */
            EffectiveBasePermissions: Types.SP.IBasePermissions;
            /**
                * Gets the event receivers associated with the web.
             */
            EventReceivers: Types.SP.IEventReceiverResults;
            /**
                * Gets a value that specifies the collection of features that are currently activated in the site.
                */
            Features: Types.SP.IResults<Types.SP.IFeature>;
            /**
                * The fields in the web.
                */
            Fields: Types.SP.IFieldResults;
            /**
                * The folders contained in the root folder.
                */
            Folders: Types.SP.IFolderResults;
            /**
                * Gets the lists in the Web.
                */
            Lists: Types.SP.IListResults;
            /**
                * The list definitions and list templates available for creating lists on the site.
                */
            ListTemplates: Types.SP.IResults<Types.SP.IListTemplate>;
            /**
                * Gets a value that specifies the navigation structure on the site, including the Quick Launch area and the top navigation bar.
                */
            Navigation: Types.SP.INavigation;
            /**
                * Gets the parent website of the specified website.
                */
            ParentWeb: IWebResult;
            /**
                * Gets the collection of push notification subscribers over the site.
                */
            PushNotificationSubscribers(): IBase;
            /**
                * Specifies the collection of recycle bin items of the recycle bin of the site.
                */
            RecycleBin: Types.SP.IResults<Types.SP.IRecycleBinItem>;
            /**
                * Gets the regional settings that are currently implemented on the website.
                */
            RegionalSettings: Types.SP.IRegionalSettings;
            /**
                * Gets the role definitions for the web.
                */
            RoleDefinitions: Types.SP.IRoleDefinitionResults;
            /**
                * Gets the root folder in the web.
                */
            RootFolder: Types.SP.IFolderResult;
            /**
                * Gets a value that specifies whether the current user is able to view the file system structure of this site.
                */
            ShowUrlStructureForCurrentUser: boolean;
            /**
                * Gets the site groups for the web.
                */
            SiteGroups: Types.SP.ISiteGroupResults;
            /**
                * Gets the UserInfo list of the site collection that contains the Web site.
                */
            SiteUserInfoList: Types.SP.IListResult;
            /**
                * The collection of all users that belong to the site collection.
                */
            SiteUsers: Types.SP.IUserResults;
            /**
                * Specifies the language code identifiers (LCIDs) of the languages that are enabled for the site.
                */
            SupportedUILanguageIds: Types.SP.IResults<number>;
            /** Gets the tenant app catalog. */
            TenantAppCatalog: ITenantAppCatalog;
            /**
                * The theming information for this site. This includes information like colors, fonts, border radii sizes etc.
                */
            ThemeInfo: Types.SP.IThemeInfo;
            TitleResource: Types.SP.IResourcePath;
            /**
                * Gets the user custom actions for the web.
                */
            UserCustomActions: Types.SP.IUserCustomActionResults;
            /**
                * Represents key properties of the subsites of a site.
                */
            WebInfos: Types.SP.IResults<IWebInfo>;
            /**
                * A Web site collection object that represents all Web sites immediately beneath the Web site, excluding children of those Web sites.
                */
            Webs: IWebResults;
            /** The name of the site definition or site template that was used to create the site. */
            WebTemplate: string;
            /**
                * A value that specifies the collection of all workflow associations for the site.
                */
            WorkflowAssociations: Types.SP.IResults<any>;
            /**
                * A value that specifies the collection of workflow templates associated with the site.
                */
            WorkflowTemplates: Types.SP.IResults<Types.SP.IWorkflowTemplate>;
    }
    /**
        * Web Result
        */
    export interface IWebResult extends IWebMethods, IWebProps, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
    }
    /**
        * Web
        */
    export interface IWeb extends IWebMethods, IWebQueryProps, IBase<IWeb, IWebResult, IWebQueryResult> {
            /**
                * Constructor
                * @param url - (Optional) The web url.
                * @param targetInfo - (Optional) The target information.
                */
            new (url?: string, targetInfo?: ITargetInfo): IWeb;
    }
}

declare module 'gd-sprest/mapper/types/webs' {
    import { IBase, IBaseCollection } from "gd-sprest/utils/types";
    import { IWeb, IWebCreationInformation, IWebQueryResult, IWebResult } from "gd-sprest/mapper/types";
    /**
        * Methods
        */
    export interface IWebsMethods {
            /**
                * Adds a site to the site collection.
                * @param parameters - The web creation information.
                */
            add(parameters: IWebCreationInformation): IBase<IWeb, IWebResult>;
            /**
                * Method to get the next set of results.
                */
            next(): IWebs & IBase<IWebs, IWebResults>;
    }
    /**
        * Webs
        */
    export interface IWebs extends IWebsMethods, IBaseCollection<IWeb, IWebResult, IWebQueryResult> {
    }
    /**
        * Web Results
        */
    export interface IWebResults extends IWebsMethods, IBaseCollection<IWebResult, IWebResult, IWebQueryResult> {
    }
}

declare module 'gd-sprest/utils/requestType' {
    import { IRequestType } from "gd-sprest/utils/types";
    /**
      * Request Type
      */
    export const RequestType: IRequestType;
}

declare module 'gd-sprest/utils/baseHelper' {
    import { Base, Types } from "gd-sprest/utils";
    /**
      * Request Helper
      */
    export class BaseHelper implements Types.IBaseHelper {
        base: Base;
        requestType: number;
        response: string;
        status: number;
        addMethods(base: Base, data: any): void;
        addProperties(base: any, data: any): void;
        updateDataCollection(obj: any, results: any): void;
        updateDataObject(isBatchRequest: boolean): void;
        updateMetadata(base: any, data: any): void;
    }
}

declare module 'gd-sprest/utils/baseRequest' {
    import { Base, BaseHelper, Types, XHRRequest } from "gd-sprest/utils";
    /**
      * Base Request
      */
    export class BaseRequest extends BaseHelper implements Types.IBaseRequest {
        getAllItemsFl: boolean;
        requestType: number;
        targetInfo: Types.ITargetInfo;
        xhr: XHRRequest;
        executeMethod(methodName: string, methodConfig: Types.IMethodInfo, args?: any): Base<any, any, any>;
        executeRequest(asyncFl: boolean, callback?: (...args) => void): string | this;
        getCollection(method: string, args?: any): Base<any, any, any>;
        getNextSetOfResults(): Base<any, any, any>;
        getProperty(propertyName: string, requestType?: string): Base<any, any, any>;
        updateMetadataUri(metadata: any, targetInfo: Types.ITargetInfo): void;
        validateDataCollectionResults(): PromiseLike<void>;
    }
}

declare module 'gd-sprest/utils/baseExecution' {
    import { BaseRequest, TargetInfo, Types } from "gd-sprest/utils";
    /**
      * Base Execution
      */
    export class BaseExecution<Type = any, Result = Type> extends BaseRequest implements Types.IBaseExecution {
        batchRequests: Array<Array<{
            callback?: any;
            response?: BaseExecution;
            targetInfo: TargetInfo;
        }>>;
        parent: BaseExecution;
        responseIndex: number;
        responses: Array<BaseExecution>;
        waitFlags: Array<boolean>;
        batch(arg?: any): this;
        execute(...args: any[]): this;
        executeAndWait(): string | this;
        waitForRequestsToComplete(callback: () => void, requestIdx?: number): void;
    }
}

declare module 'gd-sprest/utils/base' {
    import { BaseExecution, Types } from "gd-sprest/utils";
    /*********************************************************************************************************************************/
    export class Base<Type = any, Result = Type, QueryResult = Result> extends BaseExecution<Type, Result> implements Types.IBase {
            /**
                * Constructor
                * @param targetInfo - The target information.
                */
            constructor(targetInfo: Types.ITargetInfo);
            existsFl: any;
            done<T = Types.IBase>(resolve: (value?: T) => void): void;
            getInfo(): Types.IRequestInfo;
            stringify(): string;
    }
}

declare module 'gd-sprest/utils/batch' {
    import { TargetInfo } from "gd-sprest/utils";
    /**
        * Batch Requests
        */
    export class Batch {
            /**
                * Methods
                */
            static getTargetInfo(requests: Array<Array<{
                    callback?: any;
                    targetInfo: TargetInfo;
            }>>): TargetInfo;
    }
}

declare module 'gd-sprest/utils/methodInfo' {
    import { Types } from "gd-sprest/utils";
    /*********************************************************************************************************************************/
    export class MethodInfo implements Types.IMethodInfo {
        /*********************************************************************************************************************************/
        constructor(methodName: string, methodInfo: Types.IMethodInfo, args: any);
        /*********************************************************************************************************************************/
        readonly body: string;
        readonly getAllItemsFl: boolean;
        readonly replaceEndpointFl: boolean;
        readonly requestMethod: string;
        readonly url: string;
    }
}

declare module 'gd-sprest/utils/oData' {
    import { Types } from "gd-sprest/";
    /**
      * OData
      */
    export class OData {
        /*********************************************************************************************************************************/
        constructor(oData: Types.SP.ODataQuery);
        /*********************************************************************************************************************************/
        Custom: string;
        Expand: Array<string>;
        Filter: string;
        GetAllItems: boolean;
        OrderBy: Array<string>;
        readonly QueryString: string;
        Select: Array<string>;
        Skip: number;
        Top: number;
    }
}

declare module 'gd-sprest/utils/targetInfo' {
    import { IRequestInfo, ITargetInfo } from "gd-sprest/utils/types";
    /**
      * Target Information
      */
    export class TargetInfo {
        /*********************************************************************************************************************************/
        constructor(targetInfo: ITargetInfo);
        /*********************************************************************************************************************************/
        request: ITargetInfo;
        readonly isBatchRequest: boolean;
        requestData: any;
        readonly requestInfo: IRequestInfo;
        requestHeaders: object;
        requestMethod: string;
        requestUrl: string;
    }
}

declare module 'gd-sprest/utils/xhrRequest' {
    import { TargetInfo } from "gd-sprest/utils";
    /**
      * XML HTTP Request Class
      */
    export class XHRRequest {
        /*********************************************************************************************************************************/
        constructor(asyncFl: boolean, targetInfo: TargetInfo, callback?: (...args) => void);
        /*********************************************************************************************************************************/
        readonly completedFl: boolean;
        readonly response: any;
        readonly request: any;
        readonly requestData: any;
        readonly requestUrl: string;
        readonly status: number;
    }
}

declare module 'gd-sprest/utils/types' {
    export * from "gd-sprest/utils/types/base";
    export * from "gd-sprest/utils/types/baseExecution";
    export * from "gd-sprest/utils/types/baseHelper";
    export * from "gd-sprest/utils/types/baseRequest";
    export * from "gd-sprest/utils/types/methodInfo";
    export * from "gd-sprest/utils/types/requestType";
    export * from "gd-sprest/utils/types/targetInfo";
}

declare module 'gd-sprest/' {
    /***************************************************************************************************
    MIT License
    
    Copyright (c) 2016 Dattabase, LLC.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
     ***************************************************************************************************/
    import * as Helper from "gd-sprest/helper";
    import { SPTypes } from "gd-sprest/mapper";
    import * as Types from "gd-sprest/types";
    export * from "gd-sprest/lib";
    export * from "gd-sprest/rest";
    export { Helper, SPTypes, Types };
}

declare module 'gd-sprest/lib/types/contextInfo' {
    import { Types } from "gd-sprest/";
    import { Types as BaseTypes } from "gd-sprest/utils";
    /**
        * Context Information
        */
    export interface IContextInformation {
            /** AAD Instance Url */
            aadInstanceUrl: string;
            /** AAD Tenant Id */
            aadTenantId: string;
            /** Alerts Enabled */
            alertsEnabled: boolean;
            /** Allow Silverlight Prompt */
            allowSilverlightPrompt: boolean;
            /** Block Downloads Experience Enabled */
            blockDownloadsExperienceEnabled: boolean;
            /** Can User Create Microsoft Form */
            canUserCreateMicrosoftForm: boolean;
            /** Can User Create Visio Drawing */
            canUserCreateVisioDrawing: boolean;
            /** CDN Prefix */
            cdnPrefix: string;
            /** Client Server Time Delta */
            clientServerTimeDelta: number;
            /** Correlation ID */
            CorrelationId: string;
            /** Cross Domain Photos Enabled */
            crossDomainPhotosEnabled: boolean;
            /** Current Culture LCID */
            currentCultureLCID: string;
            /** Current Culture Name */
            currentCultureName: string;
            /** Current Language */
            currentLanguage: string;
            /** Current UI Culture Name */
            currentUICultureName: string;
            /** Department ID */
            departmentId: string;
            /** Design Package ID */
            DesignPackageId: string;
            /** Disable App Views */
            disableAppViews: boolean;
            /** Disable Flows */
            disableFlows: boolean;
            /** Document */
            document: HTMLDocument;
            /** Environment */
            env: string;
            /** True if the _spPageContextInfo object exists, flase otherwise. */
            existsFl: boolean;
            /** Farm Label */
            farmLabel: string;
            /** FID */
            fid: string;
            /** Form Digest Timeout Seconds */
            formDigestTimeoutSeconds: number;
            /** Form Digest Value */
            formDigestValue: string;
            /** Group Color */
            groupColor: string;
            /** Group Has Homepage */
            groupHasHomepage: boolean;
            /** Group ID */
            groupId: string;
            /** Group Type */
            groupType: string;
            /** Guests Enabled */
            guestsEnabled: boolean;
            /** Has Manage Web Permissions */
            hasManageWebPermissions: boolean;
            /** Has Pending Web Template Extension */
            hasPendingWebTemplateExtension: boolean;
            /** Hide Sync Button On ODB */
            hideSyncButtonOnODB: boolean;
            /** Hub Site ID */
            hubSiteId: boolean;
            /** IDLE Session Sign Out Enabled */
            idleSessionSignOutEnabled: boolean;
            /** Is Anonymous Guest User */
            isAnonymousGuestUser: boolean;
            /** Is App Web */
            isAppWeb: boolean;
            /** Is Email Authentication Guest User */
            isEmailAuthenticatinoGuesUser: boolean;
            /** Is External Guest User */
            isExternalGuestUser: boolean;
            /** Is Hub Site */
            isHubSite: boolean;
            /** Is Multi Geo Tenant */
            isMultiGeoTenant: boolean;
            /** Is No-Script Enabled */
            isNoScriptEnabled: boolean;
            /** Is Site Administrator */
            isSiteAdmin: boolean;
            /** Is SharePoint Online */
            isSPO: boolean;
            /** Is Tenant Development Site */
            isTenantDevSite: boolean;
            /** Is Web Welcome Page */
            isWebWelcomePage: boolean;
            /** Layouts Url */
            layoutsUrl: string;
            /** List Base Template */
            listBaseTemplate: number;
            /** List Id */
            listId: string;
            /** List Permissions Mask */
            listPermMask: Types.SP.IBasePermissions;
            /** List Title */
            listTitle: string;
            /** List Url */
            listUrl: string;
            /** Maximum File Size */
            maximumFileSize: number;
            /** NID */
            nid: string;
            /** Open in Client */
            openInClient: boolean;
            /** Page Item Id */
            pageItemId: number;
            /** Page List Id */
            pageListId: string;
            /** Page Permissions Mask */
            pagePermMask: Types.SP.IBasePermissions;
            /** Page Personalization Scope */
            pagePersonalizationScope: number;
            /** Prefer User Time Zone */
            preferUserTimeZone: boolean;
            /** Preview Features Enabled */
            PreviewFeaturesEnabled: boolean;
            /** Profile Url */
            profileUrl: string;
            /** Publishing Feature On */
            PublishingFeatureOn: boolean;
            /** Recycle Bin Item Count */
            RecycleBinItemCount: number;
            /** Server Redirected Url */
            serverRedirectedUrl: string;
            /** Server Request Path */
            serverRequestPath: string;
            /** Server Time */
            serverTime: string;
            /** Show NGSC Dialog for Sync on ODB */
            showNGSCDialogForSyncOnODB: boolean;
            /** Show NGSC Dialog for Sync on TS */
            showNGSCDialogForSyncOnTS: boolean;
            /** Site Absolute Url */
            siteAbsoluteUrl: string;
            /** Site Classification */
            siteClassification: string;
            /** Site Client Tag */
            siteClientTag: string;
            /** Site Color */
            siteColor: string;
            /** Site ID */
            siteId: string;
            /** Site Pages Enabled */
            sitePagesEnabled: boolean;
            /** Site Server Relative Url */
            siteServerRelativeUrl: string;
            /** Site Subscription ID */
            siteSubscriptionId: string;
            /** Support Percent Store Page */
            supportPercentStorePage: boolean;
            /** Support Pound Store Path */
            supportPoundStorePath: boolean;
            /** System User Key */
            systemUserKey: string;
            /** Tenant App Version */
            tenantAppVersion: string;
            /** Theme Cache Token */
            themeCacheToken: string;
            /** Theme CSS Folder Url */
            themeCssFolderUrl: string;
            /** Theme Image File Names */
            themeImageFileNames: any;
            /** Update From Digest Page Loaded */
            updateFromDigestPageLoaded: Date;
            /** User Display Name */
            userDisplayName: string;
            /** User EMail */
            userEmail: string;
            /** User First Day of Week */
            userFirstDayOfWeek: any;
            /** User Id */
            userId: number;
            /** User Login Name */
            userLoginName: string;
            /** User Time 24 */
            userTime24: boolean;
            /** User Time Zone Data */
            userTimeZoneData: any;
            /** View ID */
            viewId: string;
            /** View Only Experience Enabled */
            viewOnlyExperienceEnabled: boolean;
            /** Web Absolute Url */
            webAbsoluteUrl: string;
            /** Web Description */
            webDescription: string;
            /** Web First Day of Week */
            webFirstDayOfWeek: number;
            /** Web ID */
            webId: string;
            /** Web Language */
            webLanguage: number;
            /** Web Logo Url */
            webLogoUrl: string;
            /** Web Permissions Mask */
            webPermMask: Types.SP.IBasePermissions;
            /** Web Server Relative Url */
            webServerRelativeUrl: string;
            /** Web Template */
            webTemplate: string;
            /** Web Time 24 */
            webTime24: boolean;
            /** Web Title */
            webTitle: string;
            /** Web UI Version */
            webUIVersion: number;
            /** Window */
            window: {
                    $REST: any;
                    addEventListener: any;
                    clearInterval: any;
                    document: HTMLDocument;
                    setInterval: any;
                    SP: any;
                    SPClientTemplates: any;
            };
            /**
                * Method to generate a guid.
                */
            generateGUID: () => string;
            /**
                * Method to get the web context information.
                * @param url - The relative url of the web.
                */
            getWeb(url: string): BaseTypes.IBase<Types.SP.IContextWebInfo>;
    }
}

declare module 'gd-sprest/utils/types/base' {
    import { Types } from "gd-sprest/";
    import { IBaseExecution, IRequestInfo } from "gd-sprest/utils/types";
    /**
        * Base
        */
    export interface IBase<Type = any, Result = Type, QueryResult = Result> extends IBaseExecution<Type, Result> {
            /** True, if the object exists, false otherwise. */
            existsFl: boolean;
            /** The parent object, which created this object. */
            parent: any;
            /** The response */
            response: string;
            /**
                * Method to wait for the requests to complete.
                * @param resolve - The method to be executed after the request completes.
                */
            done<T = IBase>(resolve: (value?: T) => void): any;
            /**
                * Method to get the request information.
                */
            getInfo(): IRequestInfo;
            /**
                * Queries the collection.
                * @param oData - The OData information.
                */
            query?(query: Types.SP.ODataQuery): IBase<Result, QueryResult>;
            /**
                * Method to stringify the object.
                */
            stringify(): string;
    }
    /**
        * Base Collection Results
        */
    export interface IBaseCollectionResult<Result> extends Types.SP.IResults<Result> {
            /** True, if the object exists, false otherwise. */
            existsFl: boolean;
            /** The raw string response. */
            response: string;
            /** Method to stringify the object. */
            stringify(): string;
    }
    /**
        * Base Collection
        */
    export interface IBaseCollection<Type = any, Result = Type, QueryResult = Result> extends Types.SP.IResults<Type>, IBase<IBaseCollectionResult<Result>, IBaseCollectionResult<Result>, IBaseCollectionResult<QueryResult>> {
    }
}

declare module 'gd-sprest/utils/types/baseExecution' {
    import { BaseExecution, TargetInfo } from "gd-sprest/utils";
    import { IBaseRequest } from "gd-sprest/utils/types";
    /**
        * Base Execution
        */
    export interface IBaseExecution<Type = any, Result = Type> extends IBaseRequest {
            /** The batch requests. */
            batchRequests: Array<Array<{
                    callback?: any;
                    response?: BaseExecution;
                    targetInfo: TargetInfo;
            }>>;
            /** The parent. */
            parent: BaseExecution;
            /** The index of this object in the responses array. */
            responseIndex: number;
            /** The responses. */
            responses: Array<BaseExecution>;
            /** The wait flags. */
            waitFlags: Array<boolean>;
            /**
                * Method to execute the request as a batch.
                * Currently available in SharePoint Online only.
                * @param resolve - The method to be executed after the request completes.
                */
            batch(resolve: (value?: Result) => void): Type;
            /**
                * Method to execute the request as a batch.
                * Currently available in SharePoint Online only.
                * @param appendFl - Flag to execute the request as part of a change set.
                */
            batch(appendFl?: boolean): Type;
            /**
                * Method to execute the request.
                * @param waitFl - Flag to execute the request, after the previous requests have completed.
                */
            execute(waitFl: boolean): Type;
            /**
                * Method to execute the request.
                * @param resolve - The method to be executed after the request completes.
                * @param waitFl - Flag to execute the request, after the previous requests have completed.
                */
            execute(resolve?: (value?: Result) => void, waitFl?: boolean): Type;
            /**
                * Method to execute the request synchronously.
                */
            executeAndWait(): Result;
            /**
                * Method to wait for the parent requests to complete
                * @param callback - The callback method.
                * @param requestIdx - The request index.
                */
            waitForRequestsToComplete(callback: () => void, requestIdx?: number): any;
    }
}

declare module 'gd-sprest/utils/types/baseHelper' {
    import { Base } from "gd-sprest/utils";
    /**
      * Request Helper Methods
      */
    export interface IBaseHelper {
        /** The base object. */
        base: Base;
        /** The request type */
        requestType: number;
        /** The request's raw response. */
        response: string;
        /** The request's status. */
        status: number;
        /** Adds methods based on the object type. */
        addMethods(base: Base, data: any): any;
        /** Adds properties based on the object type. */
        addProperties(base: Base, data: any): any;
        /** Updates the data collection objects. */
        updateDataCollection(obj: Base, results: Array<Base>): any;
        /** Updates the data object. */
        updateDataObject(isBatchRequest: boolean): any;
        /** Updates the metadata. */
        updateMetadata(base: any, data: any): any;
    }
}

declare module 'gd-sprest/utils/types/baseRequest' {
    import { XHRRequest } from "gd-sprest/utils";
    import { IBaseHelper, IMethodInfo, ITargetInfo } from "gd-sprest/utils/types";
    /**
      * Base Request
      */
    export interface IBaseRequest extends IBaseHelper {
        /** Flag to get all items. */
        getAllItemsFl: boolean;
        /** The target information. */
        targetInfo: ITargetInfo;
        /** The request. */
        xhr: XHRRequest;
        /** Method to execute the request. */
        executeMethod(methodName: string, methodConfig: IMethodInfo, args?: any): any;
        /** Method to execute the request. */
        executeRequest(asyncFl: boolean, callback?: (...args) => void): any;
        /** Gets the property as a collection. */
        getCollection(method: string, args?: any): any;
        /** Gets the next set of results. */
        getNextSetOfResults(): any;
        /** Gets the property. */
        getProperty(propertyName: string, requestType?: string): any;
        /** Updates the metdata uri. */
        updateMetadataUri(metadata: any, targetInfo: ITargetInfo): any;
        /** Validates the data collection results. */
        validateDataCollectionResults(): PromiseLike<void>;
    }
}

declare module 'gd-sprest/utils/types/methodInfo' {
    /**
      * Method Information Settings
      */
    export interface IMethodInfo {
        argNames?: Array<string>;
        argValues?: Array<any>;
        data?: any;
        getAllItemsFl?: boolean;
        inheritMetadataType?: boolean;
        metadataType?: string;
        name?: string;
        replaceEndpointFl?: boolean;
        requestMethod?: string;
        requestType?: number;
        returnType?: string;
    }
}

declare module 'gd-sprest/utils/types/requestType' {
    /**
      * Request Type
      */
    export type IRequestType = {
        Custom: number;
        Delete: number;
        Merge: number;
        OData: number;
        Get: number;
        GetBuffer: number;
        GetWithArgs: number;
        GetWithArgsInBody: number;
        GetWithArgsInQS: number;
        GetWithArgsValueOnly: number;
        GetReplace: number;
        Post: number;
        PostWithArgs: number;
        PostWithArgsInBody: number;
        PostWithArgsInQS: number;
        PostWithArgsValueOnly: number;
        PostReplace: number;
    };
}

declare module 'gd-sprest/utils/types/targetInfo' {
    /**
        * Request Information
        */
    export interface IRequestInfo {
            /** The data being sent in the body of the request. */
            data?: object;
            /** The request method (GET/POST) */
            method: string;
            /** The url of the request. */
            url: string;
    }
    /**
        * Target Information
        */
    export interface ITargetInfo {
            /** True if the expected request returns an array buffer. */
            bufferFl?: boolean;
            /** The method to execute after the asynchronous request executes. */
            callback?: () => void;
            /** The data to be passed in the body of the request. */
            data?: any;
            /** True to default the request to the web api, site api otherwise. */
            defaultToWebFl?: boolean;
            /** The endpoint of the request. */
            endpoint?: string;
            /** The method to execute. */
            method?: string;
            /** True to override the default request to host flag. */
            overrideDefaultRequestToHostFl?: boolean;
            /** The request digest to use for the request. */
            requestDigest?: string;
            /** The request header. */
            requestHeader?: object;
            /** The request information. */
            requestInfo?: object;
            /** The url of the site/web to execute the request against. */
            url?: string;
    }
}

